<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="EngagementZones/PersonMovedAway" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonMovedAway" inner="1" tooltip="EngagementZones/PersonMovedAway desc" id="4" /><Input name="ALBasicAwareness/HumanLost" type="0" type_size="1" nature="4" stm_value_name="ALBasicAwareness/HumanLost" inner="1" tooltip="ALBasicAwareness/HumanLost desc" id="5" /><Input name="EngagementZones/PersonApproached" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonApproached" inner="1" tooltip="EngagementZones/PersonApproached desc" id="6" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="7" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="100"><Box name="Posture Default" id="6" localization="8" tooltip="" x="151" y="26"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Set Language" id="4" localization="8" tooltip="Select the language you would like the robot to speak and understand. Any following call to&#x0A;ALSpeechRecognition (Speech Reco. box for instance) or ALTextToSpeech (Say box&#x0A;for instance) will use this language." x="171" y="71"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        self.memory.insertData("presentLang",lang)

        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
                self.dialog.setASRConfidenceThreshold(0.45)
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="Japanese" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="318" y="129"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="Home" id="3" localization="8" tooltip="Robot will go to the position Home&#x0A;Position description : " x="178" y="227"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1"><Key frame="20" value="-3.86718" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1"><Key frame="20" value="0.351563" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="-1"><Key frame="20" value="-1.49414" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="-1"><Key frame="20" value="-0.79102" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="-1"><Key frame="20" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1"><Key frame="20" value="-30.0586" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1"><Key frame="20" value="-70.5764" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1"><Key frame="20" value="0.594903" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1"><Key frame="20" value="89.5608" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1"><Key frame="20" value="8.17382" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1"><Key frame="20" value="0.788625" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1"><Key frame="20" value="29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1"><Key frame="20" value="70.4005" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1"><Key frame="20" value="0.586116" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1"><Key frame="20" value="89.209" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1"><Key frame="20" value="-7.99803" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1"><Key frame="20" value="-0.793438" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Stop Alife Motion" id="7" localization="8" tooltip="Ver.2.0.0&#x0A;This box is to set ALife&apos;s breathing, Basic Awareness, Expressive Listening and Blinkings to off.&#x0A;[option]&#x0A;● Background Strategy&#x0A;Check to stop Alife breathing and Idle Posture.&#x0A;&#x0A;● Expressive Listening&#x0A;Check to stop Expressive motion when pepper listening.&#x0A;&#x0A;● Basic Awareness&#x0A;Check to stop Basic Awareness.&#x0A;&#x0A;● Autonomous Blinking&#x0A;Check to stop Pepper&apos;s Blinking" x="451" y="116"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        #~ puts code for box initialization here
        try:
            self.awareness = ALProxy("ALBasicAwareness")
        except:
            self.awareness = None
            self.logger.warning("ALBasicAwareness initialization failed.")
        try:
            self.autonomousMoves = ALProxy("ALAutonomousMoves")
        except:
            self.autonomousMoves = None
            self.logger.warning("ALAutonomousMoves initialization failed.")
        try:
            self.blinking = ALProxy("ALAutonomousBlinking")
        except:
            self.blinking = None
            self.logger.warning("ALAutonomousBlinking initialization failed.")

        self.setAutonomousMoves = None
        self.setAwareness = None
        self.setExpressive = None
        self.setBlinking = None
        pass

    def onUnload(self):
        if (self.setAutonomousMoves is not None and self.autonomousMoves):
            self.autonomousMoves.setBackgroundStrategy(self.setAutonomousMoves)
        if (self.setAwareness and self.awareness):
            self.awareness.startAwareness()
        #~ExpressiveListening and Blinking can't be set to default by ALife, need to set manual.
        if (self.setExpressive and self.autonomousMoves):
            self.autonomousMoves.setExpressiveListeningEnabled(self.setExpressive)
        if (self.blinking and self.setBlinking):
            self.blinking.setEnabled(self.setBlinking)
        self.setAutonomousMoves = None
        self.setAwareness = None
        self.setExpressive = None
        self.setBlinking = None
        pass

    def onInput_onStart(self):
        self.awareness.setEngagementMode("FullyEngaged")
        self.awareness.setTrackingMode("Head")
        self.awareness.setStimulusDetectionEnabled("Touch",False)
        self.awareness.setStimulusDetectionEnabled("Sound",True)
        self.awareness.setStimulusDetectionEnabled("Movement",True)
        self.awareness.setStimulusDetectionEnabled("People",True)

        if (self.getParameter('Background Strategy') and self.autonomousMoves):
            self.setAutonomousMoves = self.autonomousMoves.getBackgroundStrategy()
            self.autonomousMoves.setBackgroundStrategy("none")
            #Stop Breathing and Idle Postrue

        if (self.getParameter('Basic Awareness') and self.awareness):
            self.setAwareness = self.awareness.isAwarenessRunning()
            self.awareness.stopAwareness()
            #Stop Basic Awareness

        if (self.getParameter('Expressive Listening') and self.autonomousMoves):
            self.setExpressive = self.autonomousMoves.getExpressiveListeningEnabled()
            self.autonomousMoves.setExpressiveListeningEnabled(False)
            #Stop Expressive Listening

        if (self.getParameter('Autonomous Blinking') and self.blinking):
            self.setBlinking = self.blinking.isEnabled()
            self.blinking.setEnabled(False)
            #Stop Blinking

        self.onStopped()



    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="Background Strategy" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="5" /><Parameter name="Expressive Listening" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="6" /><Parameter name="Basic Awareness" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="7" /><Parameter name="Autonomous Blinking" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="8" /></Box><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="3" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="SQLManager" id="5" localization="8" tooltip="" x="875" y="14"><bitmap>media/images/box/world_representation/world_rep.png</bitmap><script language="4"><content><![CDATA[import os
import sqlite3
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    #---------------------------------- SQLite -------------------------------
    def openConnectionDB(self):
        self.frameManager = ALProxy("ALFrameManager")
        #databasePath = "/home/nao/.local/share/PackageManager/apps/wp-sqlite/"
        #db = os.path.join(databasePath,"WaitingPass.sqlite")
        db = os.path.join(self.frameManager.getBehaviorPath(self.behaviorId), "../DONBURI.sqlite")
        self.conn = sqlite3.connect(db, check_same_thread=False)
        self.conn.text_factory = lambda x: unicode(x, 'utf-8', 'ignore')
        pass

    def onInput_onStart(self, p):
        self.openConnectionDB()
        try:
            dbDict = {}
            dbDict['T_Bumon']              = self.getT_BumonTbl()
            dbDict['T_Shain']              = self.getT_ShainTbl()
            dbDict['T_Question']           = self.getT_QuestionTbl()
            dbDict['T_Answer']             = self.getT_AnswerTbl()
            dbDict['T_Image']              = self.getT_ImageTbl()
            jsonData = json.dumps(dbDict)
            self.logger.info("Dump data" + jsonData)
            self.memory.raiseEvent("OADonburi/SQLManager/GetSQLiteDbDone", str(jsonData.encode("utf-8")))
        except sqlite3.IntegrityError:
            self.logger.info('SQL error !')

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_inputInsertQuestionData(self, p):
        data = {}
        try:
            data = json.loads(p)
        except Exception as e:
            return
        if("Data" not in data):
            return

        if("Question" not in data['Data'] or "Answer" not in data["Data"] or "Image" not in data["Data"]):
            return

        arrQuestion = data["Data"]["Question"]
        arrAnswer   = data["Data"]["Answer"]
        arrImage    = data["Data"]["Image"]

        self.openConnectionDB()
        try:
            with self.conn:
                sqlDeleteQuestion = "DELETE FROM T_Question"
                self.conn.execute(sqlDeleteQuestion)
                sqlDeleteAnswer = "DELETE FROM T_Answer"
                self.conn.execute(sqlDeleteAnswer)
                sqlDeleteImage = "DELETE FROM T_Image"
                self.conn.execute(sqlDeleteImage)

                for question in arrQuestion:
                    questionId = int(question["questionId"])
                    contents   = str(question["contents"].encode("utf-8"))
                    speech     = str(question["speech"].encode("utf-8"))
                    imageId    = int(question["imageId"])
                    motionId   = int(question["motionId"])
                    upateTime  = str(question["updateTime"].encode("utf-8"))
                    self.conn.execute("INSERT INTO T_Question VALUES(?,?,?,?,?,?)",[questionId,contents,speech,imageId,motionId,upateTime])

                for answer in arrAnswer:
                    answerId       = int(answer["answerId"])
                    contents       = str(answer["contents"].encode("utf-8"))
                    questionId     = int(answer["questionId"])
                    nextQuestionId = int(answer["nextQuestionId"])
                    imageId        = int(answer["imageId"])
                    resultContents = str(answer["resultContents"].encode("utf-8"))
                    resultImageId  = int(answer["resultImageId"])
                    upateTime      = str(answer["updateTime"].encode("utf-8"))
                    self.conn.execute("INSERT INTO T_Answer VALUES(?,?,?,?,?,?,?,?)",[answerId,contents,questionId,nextQuestionId,imageId,resultContents,resultImageId,upateTime])

                for image in arrImage:
                    imageId    = int(image["imageId"])
                    url        = str(image["url"].encode("utf-8"))
                    name       = str(image["name"].encode("utf-8"))
                    upateTime  = str(image["updateTime"].encode("utf-8"))
                    self.conn.execute("INSERT INTO T_Image VALUES(?,?,?,?)",[imageId,url,name,upateTime])

                self.conn.commit()
        except sqlite3.IntegrityError:
            self.logger.info('SQL error !')

        self.memory.raiseEvent("OADonburi/SocketListener/CheckStatusOrganization", "")
        self.onStopped()

    def onInput_inputInsertOrganizationData(self, p):
        data = {}
        try:
            data = json.loads(p)
        except Exception as e:
            return
        if("Data" not in data):
            return

        if("Bumon" not in data['Data'] or "Shain" not in data["Data"]):
            return

        arrBumon    = data["Data"]["Bumon"]
        arrShain    = data["Data"]["Shain"]

        self.openConnectionDB()
        try:
            with self.conn:
                sqlDeleteBumon = "DELETE FROM T_Bumon"
                self.conn.execute(sqlDeleteBumon)
                sqlDeleteShain = "DELETE FROM T_Shain"
                self.conn.execute(sqlDeleteShain)

                for bumon in arrBumon:
                    bumonId     = int(bumon["bumonId"])
                    name        = str(bumon["name"].encode("utf-8"))
                    upateTime   = str(bumon["updateTime"].encode("utf-8"))
                    self.conn.execute("INSERT INTO T_Bumon VALUES(?,?,?)",[bumonId,name,upateTime])

                for shain in arrShain:
                    shainId     = int(shain["shainId"])
                    name        = str(shain["name"].encode("utf-8"))
                    yomi        = str(shain["yomi"].encode("utf-8"))
                    bumonId     = int(shain["bumonId"])
                    upateTime   = str(shain["updateTime"].encode("utf-8"))
                    self.conn.execute("INSERT INTO T_Shain VALUES(?,?,?,?,?)",[shainId,name,yomi,bumonId,upateTime])

                self.conn.commit()
        except sqlite3.IntegrityError:
            self.logger.info('SQL error !')

        self.memory.raiseEvent("OADonburi/DataManager/getDataFromIpadDone", "")
        self.onStopped()

    # --------- Get T_Bumon Table Data ---------
    def getT_BumonTbl(self):
        result = ""
        try:
            with self.conn:
                cursor = self.conn.execute("SELECT * FROM T_Bumon")
                results = cursor.fetchall()
                self.logger.info(str(results))
                arrBumon = []
                for row in results:
                    bumon = {}
                    bumon['id'] = row[0]
                    bumon['name'] = row[1]
                    bumon['updateTime'] = row[2]
                    arrBumon.append(bumon)
                self.logger.info("Dump data" + json.dumps(arrBumon))
                result = json.dumps(arrBumon)
        except sqlite3.IntegrityError:
            self.logger.info('SQL get T_Bumon error!')
        return result

    # --------- Get T_Shain Table Data ----------
    def getT_ShainTbl(self):
        result = ""
        try:
            with self.conn:
                cursor = self.conn.execute("SELECT * FROM T_Shain")
                results = cursor.fetchall()
                self.logger.info(str(results))
                arrShain = []
                for row in results:
                    shain = {}
                    shain['id'] = row[0]
                    shain['name'] = row[1]
                    shain['yomi'] = row[2]
                    shain['bumonId'] = row[3]
                    shain['updateTime'] = row[4]
                    arrShain.append(shain)
                self.logger.info("Dump data" + json.dumps(arrShain))
                result = json.dumps(arrShain)
        except sqlite3.IntegrityError:
            self.logger.info('SQL get T_Shain error!')
        return result

    # --------- Get T_Question Table Data ----------
    def getT_QuestionTbl(self):
        result = ""
        try:
            with self.conn:
                cursor = self.conn.execute("SELECT * FROM T_Question")
                results = cursor.fetchall()
                self.logger.info(str(results))
                arrQuestion = []
                for row in results:
                    question = {}
                    question['id'] = row[0]
                    question['contents'] = row[1]
                    question['speech'] = row[2]
                    question['imageId'] = row[3]
                    question['motionId'] = row[4]
                    question['updateTime'] = row[5]
                    arrQuestion.append(question)
                self.logger.info("Dump data" + json.dumps(arrQuestion))
                result = json.dumps(arrQuestion)
        except sqlite3.IntegrityError:
            self.logger.info('SQL get T_Question error!')
        return result

    # --------- Get T_Answer Table Data ----------
    def getT_AnswerTbl(self):
        result = ""
        try:
            with self.conn:
                cursor = self.conn.execute("SELECT * FROM T_Answer")
                results = cursor.fetchall()
                self.logger.info(str(results))
                arrAnswer = []
                for row in results:
                    answer = {}
                    answer['id'] = row[0]
                    answer['contents'] = row[1]
                    answer['questionId'] = row[2]
                    answer['nextQuestionId'] = row[3]
                    answer['imageId'] = row[4]
                    answer['resultContents'] = row[5]
                    answer['resultImageId'] = row[6]
                    answer['updateTime'] = row[7]
                    arrAnswer.append(answer)
                self.logger.info("Dump data" + json.dumps(arrAnswer))
                result = json.dumps(arrAnswer)
        except sqlite3.IntegrityError:
            self.logger.info('SQL get T_Answer error!')
        return result

    # --------- Get T_Image Table Data ----------
    def getT_ImageTbl(self):
        result = ""
        try:
            with self.conn:
                cursor = self.conn.execute("SELECT * FROM T_Image")
                results = cursor.fetchall()
                self.logger.info(str(results))
                arrImage = []
                for row in results:
                    image = {}
                    image['id'] = row[0]
                    image['url'] = row[1]
                    image['name'] = row[2]
                    image['updateTime'] = row[3]
                    arrImage.append(image)
                self.logger.info("Dump data" + json.dumps(arrImage))
                result = json.dumps(arrImage)
        except sqlite3.IntegrityError:
            self.logger.info('SQL get T_Image error!')
        return result
    # -------------------------------------------------------------------------]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="inputInsertQuestionData" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="inputInsertOrganizationData" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="sql_file" inherits_from_parent="0" content_type="4" value="/../DONBURI.sqlite" default_value="../../WaitingPass.sqlite" tooltip="" id="7" /></Box><Box name="PrepareTablet" id="8" localization="8" tooltip="こちらに概要を記入" x="290" y="27"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="initTablet" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="OADonburi/DataManager/getDataFromIpadDone" type="0" type_size="1" nature="4" stm_value_name="OADonburi/DataManager/getDataFromIpadDone" inner="1" tooltip="OADonburi/DataManager/getDataFromIpadDone desc" id="3" /><Input name="OADonburi/SocketListener/CheckStatusSocket" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/CheckStatusSocket" inner="1" tooltip="OADonburi/SocketListener/CheckStatusSocket desc" id="4" /><Input name="OADonburi/SocketManager/GetData" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketManager/GetData" inner="1" tooltip="OADonburi/SocketManager/GetData desc" id="5" /><Output name="getDataForTablet" type="1" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="outputCheckSocketStatus" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="getDataFromIpad" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="8" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="84.0896"><Box name="Show App" id="1" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="402" y="8"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
        self.isRunning = False
        self.frameManager = None
        try:
            # Init listIdTalk and listIdPlay , listIdAnimation
            self.memory.insertData("listIdTalk",[])
            self.memory.insertData("listIdPlay",[])
            self.memory.insertData("listIdAnimation",[])
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)


    def onUnload(self):
        if self.isRunning:
            self.logger.info("hide Webview")
            tabletService = self._getTabletService()
            if tabletService is not None:
                tabletService.hideWebview()
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            if os.path.isdir(behaviorPath):
               behaviorPath = os.path.join(behaviorPath, "")
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                    self.logger.error("appsFolderFragment is not in behaviorPath")
                    return None
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            fragment = fragment.split("/")[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")
            return None

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self._getAppName()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="Setting" id="2" localization="8" tooltip="" x="631" y="154"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")
        pass

    def onUnload(self):
        #put clean-up code here
        self.memory = None
        pass

    def onInput_onStart(self, p):
        #self.onStopped() #activate the output of the box
        self.logger.info(p)
        d = {}
        try:
            d = json.loads(p)
            if("iPadIpAddr" not in d or "iPadPort" not in d):
                return
            iPadIpAddr = self.convertToCorrectType(d['iPadIpAddr'])
            iPadPort   = self.convertToCorrectType(d['iPadPort'])
            if iPadIpAddr == "" or not iPadPort:
                self.logger.info('Not init host ip and posrt')
                self.memory.raiseEvent("OADonburi/Setting/OpenSetting", "")
                self.onStopped()
                return
            self.logger.info(str(iPadIpAddr))
            self.logger.info(iPadPort)
        except RuntimeError,e:
            self.logger.info('Error Parser data')

        try:
            # Init IpAddress and Port
            self.memory.insertData("OADonburi/Setup/IpadIpAddress", iPadIpAddr)
            self.memory.insertData("OADonburi/Setup/IpadPort", iPadPort)
        except RuntimeError,e:
            self.logger.info('Cannot insert data into memory')
        self.onStopped()
        pass


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def convertToCorrectType(self, value):
        try:
            value = float(value)
            intValue = int(value)
            if( value == intValue ):
                value = intValue
        except:
            value = str(value)
        return value]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="SQLite" id="5" localization="8" tooltip="" x="624" y="321"><bitmap>media/images/box/world_representation/world_rep.png</bitmap><script language="4"><content><![CDATA[import os
import sqlite3
import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    #---------------------------------- SQLite -------------------------------
    def openConnectionDB(self):
        self.frameManager = ALProxy("ALFrameManager")
        db = os.path.join(self.frameManager.getBehaviorPath(self.behaviorId), "../DONBURI.sqlite")
        self.conn = sqlite3.connect(db, check_same_thread=False)
        self.conn.text_factory = lambda x: unicode(x, 'utf-8', 'ignore')

    def closeConnectionDB(self):
        self.conn.close()

    def onInput_onStart(self):
        dbDict = {}
        dbDict['T_Setup'] = self.getT_SetupTbl()
        jsonData = json.dumps(dbDict)
        self.logger.info("Dump data" + jsonData)
        self.memory.raiseEvent("OADonburi/SQLManager/GetSetupInfoDone", str(jsonData.encode("utf-8")))
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box


    def getT_SetupTbl(self):
        result = ""
        self.openConnectionDB()
        try:
            with self.conn:
                cursor = self.conn.execute("SELECT * FROM T_SETUP")
                results = cursor.fetchall()
                arrSetup = []
                for row in results:
                    setup = {}
                    setup['key'] = row[0]
                    setup['value'] = row[1]
                    arrSetup.append(setup)
                self.logger.info("Dump data" + json.dumps(arrSetup))
                result = json.dumps(arrSetup)
        except sqlite3.IntegrityError:
            self.logger.info('SQL get T_SETUP error!')
        finally:
            self.closeConnectionDB()
        return result


    def onInput_updateSetupInfo(self, p):
        data = {}
        try:
            data = json.loads(p)
        except Exception as e:
            return
        if("T_Setup" not in data):
            return
        arrSetup = data["T_Setup"]
        self.openConnectionDB()
        try:
            with self.conn:
                for setup in arrSetup:
                    key     = str(setup["key"]).encode("utf-8")
                    value   = str(setup["value"]).encode("utf-8")
                    self.conn.execute("UPDATE T_SETUP SET value = ? WHERE key = ?",[value,key])
                self.conn.commit()
        except sqlite3.IntegrityError:
            self.logger.info('SQL error !')
        finally:
            self.closeConnectionDB()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="updateSetupInfo" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Parameter name="sql_file" inherits_from_parent="0" content_type="4" value="/../DONBURI.sqlite" default_value="../../WaitingPass.sqlite" tooltip="" id="6" /></Box><Box name="_listenGetSetup" id="3" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="390" y="275"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="5" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/SQLManager/GetSetupInfo" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="6" /></Box><Box name="_listenUpdateSetup" id="6" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="389" y="400"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onEvent" type="3" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="5" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/SQLManager/UpdateSetup" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="6" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="8" outputowner="0" indexofoutput="5" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="0" indexofinput="6" outputowner="0" indexofoutput="3" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="5" indexofinput="3" outputowner="6" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Socket" id="7" localization="8" tooltip="" x="622" y="51"><bitmap>media/images/io/output_recurrent.png</bitmap><script language="4"><content><![CDATA[import socket
import sys
import struct
import select
import time

class MyClass(GeneratedClass):
    def __init__(self):
        self.running = 1
        GeneratedClass.__init__(self)


    def onLoad(self):
        #put initialization code here
        self.memory = ALProxy("ALMemory")
        pass

    def onUnload(self):
        #put clean-up code here
        #self.memory = None
        self.running = 0
        pass

    def onInput_onStart(self, p):
        isSetupApi = 0
        data = {}
        try:
            data = json.loads(p)
        except Exception as e:
            return
        if("StatusCode" not in data):
            return
        try:
            sttCode = int(data["StatusCode"])
            if(sttCode == 10 or sttCode == 20 or sttCode == 22 or sttCode == 30 or sttCode == 32):
                isSetupApi = 1
            else:
                isSetupApi = 0
        except socket.gaierror:
            self.logger.info('Paser response data could not be resolved.')
            return

        #self.onStopped() #activate the output of the box

#        self.host = '10.100.2.231'
#        self.port = 4000
        # Get data from ALMemory
        try:
            self.host = self.convertToCorrectType(self.memory.getData("OADonburi/Setup/IpadIpAddress"))
            self.port = self.convertToCorrectType(self.memory.getData("OADonburi/Setup/IpadPort"))
            self.logger.info('====>Input : ' + str(p))
            self.logger.info('HOST : ' + self.host)
            self.logger.info('PORT : ' + str(self.port))
        except RuntimeError,e:
            self.logger.info('Cannot get setup info from memory')
            self.tabletOpentSetting()
            return

        if not self.host or not self.port:
            self.logger.info('Not init host ip and posrt')
            self.tabletOpentSetting()
            return

        self.logger.info('# Creating socket')
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            #s.settimeout(30)
        except socket.error:
            self.logger.info('Failed to create socket')
            self.tabletOpentSetting()
            return

        self.logger.info('# Getting remote IP address')
        try:
            self.logger.info('# -----> start self.host')
            remote_ip = socket.gethostbyname( self.host )
            self.logger.info('# -----> end self.host')
        except socket.gaierror:
            self.logger.info('Hostname could not be resolved. Exiting')
            self.tabletOpentSetting()
            return
        try:
            # Connect to remote server
            self.logger.info("# Connecting to server, " + self.host + " (" + remote_ip + ")")
            s.connect((remote_ip , self.port))
        except socket.error:
            self.logger.info('Connect failed')
            self.tabletOpentSetting()
            return
        # Send data to remote server
        try:
            hasResponse = 0
            timeout = 30
            begin = time.time()
            self.logger.info('-------> sendall : ' + str(p))
            s.sendall(str(p))
            while self.running == 1:
                inputready,outputready,exceptready = select.select ([s],[s],[])
                #self.logger.info('#-------> inputready')
                for input_item in inputready:
                    hasResponse = 1
                    # Handle sockets
                    self.logger.info('# -----Receive data from server')
                    recvData = self.recv_timeout(s)
                    self.logger.info("Reply : " + str(recvData))

                    #data = s.recv(1024)
                    if recvData:
                        self.output(recvData)
                        #print "Them: " + data
                    else:
                        break
                time.sleep(0)

                if isSetupApi==1 and hasResponse==0 and time.time()-begin > timeout:
                    self.logger.info('#-------> overtime 30s ')
                    self.tabletOpentSetting()
                    return
        except socket.error:
            self.logger.info('Send failed')
            self.onStopped()
            return
        # Receive data
        #self.logger.info('# Receive data from server')
        #recvData = self.recv_timeout(s)
        #self.logger.info("Reply : " + str(recvData))
        #self.output(recvData)
        #Close the socket
        self.logger.info('-------> Close the socket ')
        s.close()
        pass

    def recv_timeout(self, the_socket,timeout=2):
        #make socket non blocking
        the_socket.setblocking(0)

        #total data partwise in an array
        total_data=[];
        data='';
        #beginning time
        begin=time.time()
        while 1:
            #if you got some data, then break after timeout
            if total_data and time.time()-begin > timeout:
                break

            #if you got no data at all, wait a little longer, twice the timeout
            elif time.time()-begin > timeout*2:
                break

            #recv something
            try:
                data = the_socket.recv(8192)
                if data:
                    total_data.append(data)
                    #change the beginning time for measurement
                    begin = time.time()
                else:
                    #sleep for sometime to indicate a gap
                    time.sleep(0.1)
            except:
                pass

        #join all parts to make final string
        return ''.join(total_data)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def tabletOpentSetting(self):
        self.memory.raiseEvent("OADonburi/Setting/OpenSetting", "")
        self.memory.raiseEvent("OADonburi/SocketListener/SocketStatus", "NG")
        self.onStopped()

    def convertToCorrectType(self, value):
        try:
            value = float(value)
            intValue = int(value)
            if( value == intValue ):
                value = intValue
        except:
            value = str(value)
        return value]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="output" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="SocketListener" id="3" localization="8" tooltip="" x="465" y="38"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="inputCheckQuestionStatus" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Input name="OADonburi/SocketListener/CheckStatusQuestion" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/CheckStatusQuestion" inner="1" tooltip="OADonburi/SocketListener/CheckStatusQuestion desc" id="5" /><Input name="OADonburi/SocketListener/CheckStatusOrganization" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/CheckStatusOrganization" inner="1" tooltip="OADonburi/SocketListener/CheckStatusOrganization desc" id="6" /><Input name="OADonburi/SocketListener/UpdateQuestionData" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/UpdateQuestionData" inner="1" tooltip="OADonburi/SocketListener/UpdateQuestionData desc" id="7" /><Input name="OADonburi/SocketListener/UpdateOrganizationData" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/UpdateOrganizationData" inner="1" tooltip="OADonburi/SocketListener/UpdateOrganizationData desc" id="8" /><Input name="OADonburi/SocketListener/PepIsWaiting" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/PepIsWaiting" inner="1" tooltip="OADonburi/SocketListener/PepIsWaiting desc" id="9" /><Input name="OADonburi/SocketListener/PepDetectPeople" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/PepDetectPeople" inner="1" tooltip="OADonburi/SocketListener/PepDetectPeople desc" id="10" /><Input name="OADonburi/SocketListener/PepInConsultation" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/PepInConsultation" inner="1" tooltip="OADonburi/SocketListener/PepInConsultation desc" id="11" /><Input name="OADonburi/SocketListener/PepInReception" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/PepInReception" inner="1" tooltip="OADonburi/SocketListener/PepInReception desc" id="12" /><Input name="OADonburi/SocketListener/CallHasAppo" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/CallHasAppo" inner="1" tooltip="OADonburi/SocketListener/CallHasAppo desc" id="13" /><Input name="OADonburi/SocketListener/CallNoAppo" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/CallNoAppo" inner="1" tooltip="OADonburi/SocketListener/CallNoAppo desc" id="14" /><Input name="OADonburi/SocketListener/SendCurrentResult" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/SendCurrentResult" inner="1" tooltip="OADonburi/SocketListener/SendCurrentResult desc" id="15" /><Input name="OADonburi/SocketListener/SendAllResults" type="0" type_size="1" nature="4" stm_value_name="OADonburi/SocketListener/SendAllResults" inner="1" tooltip="OADonburi/SocketListener/SendAllResults desc" id="16" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="17" /><Output name="raiseSocketAPI" type="3" type_size="1" nature="2" inner="0" tooltip="" id="18" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Process" id="7" localization="8" tooltip="" x="483" y="41"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the box

    # コード       項目名
    # 10        ソケット通信をチェック
    def onInput_checkSocketStatus(self):
        request = '{"StatusCode":10}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 20        問診データ更新状況要求
    def onInput_checkQuestionStatus(self, p):
        request = '{"StatusCode":20}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 22        組織データ更新状況要求
    def onInput_checkOrganizationStatus(self, p):
        request = '{"StatusCode":22}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 30        問診データ要求
    def onInput_updateQuestionData(self, p):
        request = '{"StatusCode":30}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 32        組織データ要求
    def onInput_updateOrganizationData(self, p):
        request = '{"StatusCode":32}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 40        Pepper待機中
    def onInput_pepperIsWaiting(self, p):
        request = '{"StatusCode":40}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 41        Pepper人物接近中
    def onInput_pepperDetectPeople(self, p):
        request = '{"StatusCode":41}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 42        Pepper経営相談中
    def onInput_pepperInConsultation(self, p):
        request = '{"StatusCode":42}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 43        Pepper受付中
    def onInput_pepperInReception(self, p):
        request = '{"StatusCode":43}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 50        アポありコール要求
    def onInput_callEmployeeHasAppo(self, p):
        self.onStopped(p)
        pass

    # コード       項目名
    # 51        アポなしコール要求
    def onInput_callEmployeeNoAppo(self, p):
        request = '{"StatusCode":51}'
        self.onStopped(request)
        pass

    # コード       項目名
    # 60        経営相談中の現在問診状況
    def onInput_sendInfoOfConsultation(self, p):
        self.onStopped(p)
        pass

    # コード       項目名
    # 61        経営相談の全部結果を通信
    def onInput_sendAllResults(self, p):
        self.onStopped(p)
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="checkSocketStatus" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="checkQuestionStatus" type="0" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="checkOrganizationStatus" type="0" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="updateQuestionData" type="0" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="updateOrganizationData" type="0" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Input name="pepperIsWaiting" type="0" type_size="1" nature="1" inner="0" tooltip="" id="9" /><Input name="pepperDetectPeople" type="0" type_size="1" nature="1" inner="0" tooltip="" id="10" /><Input name="pepperInConsultation" type="0" type_size="1" nature="1" inner="0" tooltip="" id="11" /><Input name="pepperInReception" type="0" type_size="1" nature="1" inner="0" tooltip="" id="12" /><Input name="callEmployeeHasAppo" type="0" type_size="1" nature="1" inner="0" tooltip="" id="13" /><Input name="callEmployeeNoAppo" type="0" type_size="1" nature="1" inner="0" tooltip="" id="14" /><Input name="sendInfoOfConsultation" type="0" type_size="1" nature="1" inner="0" tooltip="" id="15" /><Input name="sendAllResults" type="0" type_size="1" nature="1" inner="0" tooltip="" id="16" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="17" /></Box><Link inputowner="0" indexofinput="18" outputowner="7" indexofoutput="17" /><Link inputowner="7" indexofinput="5" outputowner="0" indexofoutput="5" /><Link inputowner="7" indexofinput="6" outputowner="0" indexofoutput="6" /><Link inputowner="7" indexofinput="7" outputowner="0" indexofoutput="7" /><Link inputowner="7" indexofinput="8" outputowner="0" indexofoutput="8" /><Link inputowner="7" indexofinput="9" outputowner="0" indexofoutput="9" /><Link inputowner="7" indexofinput="10" outputowner="0" indexofoutput="10" /><Link inputowner="7" indexofinput="11" outputowner="0" indexofoutput="11" /><Link inputowner="7" indexofinput="12" outputowner="0" indexofoutput="12" /><Link inputowner="7" indexofinput="13" outputowner="0" indexofoutput="13" /><Link inputowner="7" indexofinput="14" outputowner="0" indexofoutput="14" /><Link inputowner="7" indexofinput="15" outputowner="0" indexofoutput="15" /><Link inputowner="7" indexofinput="16" outputowner="0" indexofoutput="16" /><Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="5" outputowner="0" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ProcessData" id="9" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="739" y="49"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
        self.audio = ALProxy('ALAudioDevice')

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        data = {}
        try:
            data = json.loads(p)
        except Exception as e:
            return

        if("StatusCode" not in data):
            return
        try:
            statusCode = int(data["StatusCode"])
            if(statusCode == 1): # OK
                self.logger.info('StatusCode : 1')
            elif(statusCode == 2): # NG
                self.logger.info('StatusCode : 2')
                self.memory.raiseEvent("OADonburi/SocketListener/SocketStatus", "NG")
            elif(statusCode == 3): # 存在しないステータス
                self.logger.info('StatusCode : 3')
            elif(statusCode == 4): # 内部処理エラー
                self.logger.info('StatusCode : 4')
            elif(statusCode == 5): # Pepper終了
                self.logger.info('StatusCode : 5')
            elif(statusCode == 6): # Pepper起動
                self.logger.info('StatusCode : 6')
            elif(statusCode == 11): # ソケット通信をチェック応答
                self.logger.info('StatusCode : 11')
                self.memory.raiseEvent("OADonburi/SocketListener/SocketStatus", "OK")
            elif(statusCode == 21): # 問診データ更新状況チェック応答
                self.logger.info('---- StatusCode : 21')
                self.memory.raiseEvent("OADonburi/SocketListener/UpdateQuestionData", "")
            elif(statusCode == 23): # 組織データ更新状況チェック応答
                self.logger.info('----- StatusCode : 23')
                self.memory.raiseEvent("OADonburi/SocketListener/UpdateOrganizationData", "")
            elif(statusCode == 31): # 問診データ送受信応答
                self.outputInsertToSQLiteQuestionData(p)
                self.logger.info('=======> outputInsertToSQLiteQuestionData : 31')
            elif(statusCode == 33): # 組織データ送受信応答
                self.outputInsertToSQLiteOrganizationData(p)
                self.logger.info('=======> outputInsertToSQLiteOrganizationData : 33')
            elif(statusCode == 52): # コール応答
                self.logger.info('StatusCode : 52')
                self.memory.raiseEvent("OADonburi/CmdFromIpad/CallEmployeeDone", "")
            elif(statusCode == 72): # ボリューム
                self.logger.info('StatusCode : 72')
                if("Volume" not in data):
                    return
                volume = int(data["Volume"])
                self.audio.setOutputVolume(volume)
            else:
                self.logger.info('StatusCode : unknow')
        except socket.gaierror:
            self.logger.info('Paser response data could not be resolved.')
            return
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass

    def convertToCorrectType(self, value):
        try:
            value = float(value)
            intValue = int(value)
            if( value == intValue ):
                value = intValue
        except:
            value = str(value)
        return value]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Output name="outputInsertToSQLiteQuestionData" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="outputInsertToSQLiteOrganizationData" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="8" /></Box><Box name="PeopleDetect" id="10" localization="8" tooltip="" x="466" y="157"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="3" /><Input name="EngagementZones/PersonEnteredZone1" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonEnteredZone1" inner="1" tooltip="EngagementZones/PersonEnteredZone1 desc" id="4" /><Input name="EngagementZones/PersonEnteredZone2" type="0" type_size="1" nature="4" stm_value_name="EngagementZones/PersonEnteredZone2" inner="1" tooltip="EngagementZones/PersonEnteredZone2 desc" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Output name="outputCallSocket" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="118.921"><Box name="raiseSocketDetectPeople" id="2" localization="8" tooltip="" x="626" y="74"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        request = '{"StatusCode":41}'
        self.logger.info("====>Detect People: " + request)
        self.outputCallSocket(request) #activate the output of the box
        pass

    def onInput_onStop(self):
        #self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        #self.onStopped() #activate the output of the box
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="outputCallSocket" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="If" id="10" localization="8" tooltip="Test a condition and stimulate the then or else outputs depending on the boolean&#x0A;value of the condition.&#x0A;The condition can be set in parameters." x="323" y="488"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onData(self, p):
        param = self.getParameter("Value to compare")
        try:
            p = float(p)
            param = float(param)
        except:
            p = str(p)
            param = str(param)
        operator = self.getParameter("Condition operator")
        if( operator == "<" ):
            self.outputTrueOrFalse( p < param )
        elif( operator == "< or =" ):
            self.outputTrueOrFalse( p <= param )
        elif( operator == "=" ):
            self.outputTrueOrFalse( p == param )
        elif( operator == "> or =" ):
            self.outputTrueOrFalse( p >= param )
        elif( operator == ">" ):
            self.outputTrueOrFalse( p > param )
        elif( operator == "≠" ):
            self.outputTrueOrFalse( p != param )
        else:
            raise Exception( "Operator not known: " + str(operator) )

    def outputTrueOrFalse(self, condition):
        if( condition ):
            self.output_then()
        else:
            self.output_else()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onData" type="2" type_size="1" nature="1" inner="0" tooltip="The data to test." id="2" /><Output name="output_then" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is true." id="3" /><Output name="output_else" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent if the condition is false." id="4" /><Parameter name="Condition operator" inherits_from_parent="0" content_type="3" value="=" default_value="≠" custom_choice="0" tooltip='Choose the condition operator.&#x0A;&#x0A;For example:&#x0A;If you choose &quot;&gt; or =&quot;, the condition will be: is the input is higher or equal&#x0A;than the parameter?' id="5"><Choice value="&lt;" /><Choice value="&lt; or =" /><Choice value="=" /><Choice value="&gt; or =" /><Choice value="&gt;" /><Choice value="≠" /></Parameter><Parameter name="Value to compare" inherits_from_parent="0" content_type="3" value="1" default_value="0" custom_choice="0" tooltip="This is the value which is compared to the input value." id="6" /></Box><Box name="Get Data" id="12" localization="8" tooltip="Retrieves from NAOqi&apos;s shared memory the given value at the given key." x="155" y="489"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        result = self.memory.getData(self.getParameter("key"))
        self.onStopped(result)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the retrieved value from ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="DONBURI/UserInfo/IsMainVC" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Stand" id="8" localization="8" tooltip="" x="796" y="202"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Timeline" id="57" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="721" y="90"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="60" size="60"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="60" value="-64.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="60" value="-13" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="60" value="0.02" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="60" value="63.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="60" value="20.7" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="60" value="-32.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="60" value="60.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="60" value="27.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="60" value="0.02" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="60" value="68.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="60" value="-19.3" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="60" value="19.7" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Stand Up" id="1" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="365" y="90"><bitmap>media/images/box/movement/stand.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" /><Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" /><Timeline enable="0"><BehaviorLayer name="StandUpBehavior"><BehaviorKeyframe name="DetectRobotPose" index="1"><Diagram><Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" /><Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" /><Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6"><Choice value="Crouch" /><Choice value="LyingBack" /><Choice value="LyingBelly" /><Choice value="Sit" /><Choice value="SitRelax" /><Choice value="StandInit" /><Choice value="Stand" /><Choice value="StandZero" /></Parameter><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" /><Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" /><Resource name="All motors" type="Lock" timeout="0" /><Resource name="Stiffness" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="All motors" type="Lock" timeout="0" /></Box><Link inputowner="0" indexofinput="4" outputowner="57" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="57" indexofinput="2" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Animated Say Text" id="3" localization="8" tooltip="Say the text received on its input and move during its speech." x="625" y="204"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "^start(animations/Stand/Gestures/BowShort_1)　いらっしゃいませー、オオダイラ経営会計事務所へようこそ！当事務所はがんばる経営者に安心と希望をていきょ・・・、あ、長いですね、受付ですか？経営相談ですか？ "
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            self.logger.info("sentence: "+str(p))
            id = self.animSpeech.post.say(str(sentence), configuration)
            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="disabled" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Box name="_設定開く" id="11" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="319" y="156"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Setting/OpenSetting" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_受付開く" id="1" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="322" y="258"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Main/OpenReception" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_経営開く" id="5" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="326" y="359"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Main/OpenManagement" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_ロード中" id="4" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="318" y="51"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Index/Loading" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="10" indexofinput="2" outputowner="12" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="3" /><Link inputowner="2" indexofinput="3" outputowner="10" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="3" /><Link inputowner="3" indexofinput="3" outputowner="10" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="2" indexofinput="3" outputowner="11" indexofoutput="6" /><Link inputowner="3" indexofinput="3" outputowner="11" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="6" /><Link inputowner="3" indexofinput="3" outputowner="1" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="2" indexofinput="3" outputowner="5" indexofoutput="6" /><Link inputowner="3" indexofinput="3" outputowner="5" indexofoutput="6" /><Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="6" /><Link inputowner="3" indexofinput="3" outputowner="4" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Touch Screen" id="14" localization="8" tooltip="" x="994" y="20"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Touch Detection" id="10" localization="8" tooltip="Sends an event when the tablet is touched&#x0A;&#x0A;V1.0.0&#x0A;" x="207" y="141"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False
        self.tabletService = None
        self.connectId = None

    def onUnload(self):
        if self.tabletService:
            self.disconnectListener()
            self.isRunning = False

    def disconnectListener(self):
        if self.connectId:
            try:
                self.tabletService.onTouch.disconnect(self.connectId)
                self.connectId = None
            except Exception as e:
                self.logger.error(e)

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def  onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        self.tabletService = self._getTabletService()
        if self.tabletService:
            try:
                if not self.connectId:
                    if self.getParameter("Action") == "On touch move":
                        self.connectId = self.tabletService.onTouchMove.connect(self.touchCallback)
                    elif self.getParameter("Action") == "On touch down":
                        self.connectId = self.tabletService.onTouchDown.connect(self.touchCallback)
                    elif self.getParameter("Action") == "On touch up":
                        self.connectId = self.tabletService.onTouchUp.connect(self.touchCallback)
            except Exception as err:
                self.logger.warning("Error during subscribe: %s " % err)
        else:
            self.logger.info("No ALTabletService, can't play listen for touch.")

    def touchCallback(self, x, y):
        self.onTouched([x, y])

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onTouched" type="0" type_size="1" nature="2" inner="0" tooltip="Send [x,y] position for one touch" id="4" /><Parameter name="Action" inherits_from_parent="0" content_type="3" value="On touch down" default_value="On touch move" custom_choice="0" tooltip="Type of touch you want on the tablet." id="5"><Choice value="On touch move" /><Choice value="On touch down" /><Choice value="On touch up" /></Parameter></Box><Box name="_説明" id="12" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="724" y="208"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="oa_1003" id="48" localization="8" tooltip="Enter tooltip here" x="425" y="199"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="75" size="75"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="25" /><Key frame="30" value="-25" /><Key frame="45" value="25" /><Key frame="60" value="-25" /><Key frame="65" value="-25" /><Key frame="75" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="75" value="-11.4592" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Wait For Signals" id="4" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="657" y="105"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        #self.memory = ALProxy('ALMemory')

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        # Init listIdTalk and listIdPlay
        #self.memory.insertData("listIdTalk",[])
        #self.memory.insertData("listIdPlay",[])

        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="127" y="117"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="416" y="44"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        p = "あれ？途中だけど終わりかな？"
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /></Box><Link inputowner="4" indexofinput="3" outputowner="48" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="48" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="_１分" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="560" y="207"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="60" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="_説明" id="1" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="728" y="376"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="oa_1004" id="12" localization="8" tooltip="Enter tooltip here" x="325" y="158"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="150" size="150"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="0" /><Key frame="60" value="0" /><Key frame="100" value="0" /><Key frame="130" value="2.93938e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-20" /><Key frame="60" value="-40" /><Key frame="100" value="-40" /><Key frame="130" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="60" value="8" /><Key frame="100" value="8" /><Key frame="130" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="60" value="-0.439401" /><Key frame="100" value="-0.439401" /><Key frame="130" value="0.000129227" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="60" value="-5.19455" /><Key frame="100" value="-5.19455" /><Key frame="130" value="-4.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-47.9614" /><Key frame="60" value="-48.2" /><Key frame="100" value="-48.2" /><Key frame="130" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-81.696" /><Key frame="60" value="-16.3" /><Key frame="100" value="-16.3" /><Key frame="130" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="0.05" /><Key frame="60" value="0.98" /><Key frame="100" value="0.98" /><Key frame="130" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="90.0871" /><Key frame="60" value="-106.7" /><Key frame="100" value="-106.7" /><Key frame="130" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="10.034" /><Key frame="60" value="31.6" /><Key frame="100" value="31.6" /><Key frame="130" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-8.3919" /><Key frame="60" value="-0.8" /><Key frame="100" value="-0.8" /><Key frame="130" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="45.027" /><Key frame="60" value="48.2" /><Key frame="100" value="48.2" /><Key frame="130" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="80.659" /><Key frame="60" value="16.3" /><Key frame="100" value="16.3" /><Key frame="130" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="0.1816" /><Key frame="60" value="0.98" /><Key frame="100" value="0.98" /><Key frame="130" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="93.8625" /><Key frame="60" value="-107.2" /><Key frame="100" value="-107.2" /><Key frame="130" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-11.2153" /><Key frame="60" value="-36.1" /><Key frame="100" value="-36.1" /><Key frame="130" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="1.75551" /><Key frame="60" value="0.8" /><Key frame="100" value="0.8" /><Key frame="130" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="145" y="84"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Wait For Signals" id="4" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="625" y="92"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        #self.memory = ALProxy('ALMemory')

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        # Init listIdTalk and listIdPlay
        #self.memory.insertData("listIdTalk",[])
        #self.memory.insertData("listIdPlay",[])

        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="330" y="14"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        p = "接客終了"
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="4" indexofinput="3" outputowner="12" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="_３分" id="2" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="564" y="375"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="180" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Raise Event" id="5" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="889" y="371"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="OADonburi/Main/ShowWaitingView" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="_待機開く" id="4" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="208" y="313"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Main/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_設定開く" id="7" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="203" y="475"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Setting/OpenSetting" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="6" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="12" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="6" indexofinput="3" outputowner="4" indexofoutput="6" /><Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="6" /><Link inputowner="6" indexofinput="3" outputowner="7" indexofoutput="6" /><Link inputowner="2" indexofinput="3" outputowner="7" indexofoutput="6" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Tablet " id="2" localization="8" tooltip="" x="155" y="206"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="_経営相談" id="9" localization="8" tooltip="Enter description here" x="678" y="574"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_経営相談始まる_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_待機戻る_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_経営相談スタート_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="ｂｔｎBackClick" id="6" localization="8" tooltip="" x="643" y="241"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="145" y="76"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="571" y="175"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "戻る"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ｂｔｎStartClick" id="1" localization="8" tooltip="" x="637" y="360"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="151" y="101"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="509" y="112"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "相談する"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_経営相談スタート" id="8" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="457" y="356"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Management/BtnStartClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_待機戻る" id="2" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="458" y="233"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Management/BtnBackClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文" id="4" localization="8" tooltip="" x="642" y="109"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="617" y="104"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="oa_1012" id="21" localization="8" tooltip="Enter tooltip here" x="394" y="218"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="229" size="229"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-40" /><Key frame="50" value="-10" /><Key frame="68" value="-10" /><Key frame="110" value="-75.7" /><Key frame="122" value="-50" /><Key frame="132" value="-80" /><Key frame="142" value="-50" /><Key frame="152" value="-75.7" /><Key frame="162" value="-50" /><Key frame="172" value="-78.8379" /><Key frame="200" value="-84.639" /><Key frame="205" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="-77.4" /><Key frame="50" value="-98.3484" /><Key frame="68" value="-98.3484" /><Key frame="110" value="-55" /><Key frame="122" value="-70" /><Key frame="132" value="-55" /><Key frame="142" value="-70" /><Key frame="152" value="-55" /><Key frame="162" value="-70" /><Key frame="172" value="-42.0117" /><Key frame="200" value="-6.20706" /><Key frame="205" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0.0976" /><Key frame="50" value="0.996" /><Key frame="68" value="0.996" /><Key frame="110" value="1" /><Key frame="122" value="1" /><Key frame="142" value="1" /><Key frame="152" value="1" /><Key frame="162" value="1" /><Key frame="172" value="0.725835" /><Key frame="200" value="0" /><Key frame="205" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="39.4" /><Key frame="50" value="-10" /><Key frame="68" value="-10" /><Key frame="110" value="-35" /><Key frame="122" value="-25" /><Key frame="132" value="-35" /><Key frame="142" value="-25" /><Key frame="152" value="-35" /><Key frame="162" value="-25" /><Key frame="172" value="29.0039" /><Key frame="200" value="81.285" /><Key frame="205" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="16.2" /><Key frame="50" value="21.9" /><Key frame="68" value="21.9" /><Key frame="110" value="55.2292" /><Key frame="152" value="55.2292" /><Key frame="162" value="55.2292" /><Key frame="172" value="44.8562" /><Key frame="200" value="52" /><Key frame="205" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-9.31412" /><Key frame="50" value="-9.3" /><Key frame="68" value="-9.3" /><Key frame="110" value="17.5" /><Key frame="122" value="16.8303" /><Key frame="142" value="16.8303" /><Key frame="152" value="17.5" /><Key frame="162" value="16.8303" /><Key frame="172" value="-18.8943" /><Key frame="200" value="-88.6801" /><Key frame="205" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="40" /><Key frame="50" value="10" /><Key frame="68" value="10" /><Key frame="110" value="75.7" /><Key frame="122" value="50" /><Key frame="132" value="80" /><Key frame="142" value="50" /><Key frame="152" value="75.7" /><Key frame="162" value="50" /><Key frame="172" value="78.8379" /><Key frame="200" value="84.639" /><Key frame="205" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="77.4" /><Key frame="50" value="98.3484" /><Key frame="68" value="98.3484" /><Key frame="110" value="55" /><Key frame="122" value="70" /><Key frame="132" value="55" /><Key frame="142" value="70" /><Key frame="152" value="55" /><Key frame="162" value="70" /><Key frame="172" value="42.0117" /><Key frame="200" value="6.20706" /><Key frame="205" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="0.0976" /><Key frame="50" value="0.996" /><Key frame="68" value="0.996" /><Key frame="110" value="1" /><Key frame="122" value="1" /><Key frame="142" value="1" /><Key frame="152" value="1" /><Key frame="162" value="1" /><Key frame="172" value="0.725835" /><Key frame="200" value="0" /><Key frame="205" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="39.4" /><Key frame="50" value="-10" /><Key frame="68" value="-10" /><Key frame="110" value="-35" /><Key frame="122" value="-25" /><Key frame="132" value="-35" /><Key frame="142" value="-25" /><Key frame="152" value="-35" /><Key frame="162" value="-25" /><Key frame="172" value="29.0039" /><Key frame="200" value="81.285" /><Key frame="205" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-16.2" /><Key frame="50" value="-21.9" /><Key frame="68" value="-21.9" /><Key frame="110" value="-55.2292" /><Key frame="152" value="-55.2292" /><Key frame="162" value="-55.2292" /><Key frame="172" value="-44.8562" /><Key frame="200" value="-52" /><Key frame="205" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="9.31412" /><Key frame="50" value="9.3" /><Key frame="68" value="9.3" /><Key frame="110" value="-17.5" /><Key frame="122" value="-16.8303" /><Key frame="142" value="-16.8303" /><Key frame="152" value="-17.5" /><Key frame="162" value="-16.8303" /><Key frame="172" value="18.8943" /><Key frame="200" value="88.6801" /><Key frame="205" value="88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="-11.4592" /><Key frame="35" value="2" /><Key frame="50" value="-11.4592" /><Key frame="68" value="-11.4592" /><Key frame="122" value="-5" /><Key frame="142" value="-0.6" /><Key frame="162" value="-1.3" /><Key frame="172" value="-2.5" /><Key frame="205" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="-4.70003e-21" /><Key frame="35" value="-4.70003e-21" /><Key frame="50" value="-4.70003e-21" /><Key frame="68" value="-4.70003e-21" /><Key frame="110" value="-22.3" /><Key frame="122" value="-28.0333" /><Key frame="142" value="-23.7" /><Key frame="162" value="16.1" /><Key frame="172" value="22" /><Key frame="205" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="205" value="-0.215502" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="205" value="1.27266e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="205" value="-4.23162" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="173" y="100"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="393" y="75"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "ペッパーの経営相談始まるよー！・・・はい、開始する場合は相談するボタンを押してください 。開始後、設問が表示され、画面下側に選択が表示されます、当てはまる選択を選んでください。最後に確認後、結果が表示されます。"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="21" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="21" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_経営相談始まる" id="5" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="462" y="106"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Management/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="6" /><Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_受付画面" id="17" localization="8" tooltip="Enter description here" x="676" y="102"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_受付説明_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_待機戻る_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_受付アポあり_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Input name="_受付アポなし_onStart_4" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="ｂｔｎDepartmentClick" id="6" localization="8" tooltip="" x="466" y="290"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay (1)" id="5" localization="8" tooltip="" x="159" y="171"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="9" localization="8" tooltip="Say the text received on its input and move during its speech." x="506" y="183"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "アポアリ"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ｂｔｎCallNoAppotClick" id="1" localization="8" tooltip="" x="469" y="414"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay (1)" id="5" localization="8" tooltip="" x="158" y="89"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="9" localization="8" tooltip="Say the text received on its input and move during its speech." x="488" y="86"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "アポなし"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ｂｔｎBackClick" id="8" localization="8" tooltip="" x="463" y="168"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="181" y="93"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="532" y="125"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "戻る"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_待機戻る" id="2" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="283" y="164"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Reception/BtnBackClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_受付アポあり" id="14" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="288" y="291"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Reception/BtnDepartmentClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_受付アポなし" id="3" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="289" y="410"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Reception/BtnCallNoAppoClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文" id="4" localization="8" tooltip="" x="464" y="40"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="597" y="140"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="oa_1007" id="16" localization="8" tooltip="Enter tooltip here" x="383" y="238"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="159" size="159"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-89.5" /><Key frame="89" value="-89.5" /><Key frame="139" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="2.9" /><Key frame="89" value="2.9" /><Key frame="139" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="89" value="1" /><Key frame="104" value="0.26" /><Key frame="108" value="0.73" /><Key frame="113" value="0.26" /><Key frame="118" value="0.73" /><Key frame="123" value="0.26" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="29.3" /><Key frame="89" value="29.3" /><Key frame="104" value="12" /><Key frame="108" value="12" /><Key frame="113" value="12" /><Key frame="118" value="12" /><Key frame="123" value="12" /><Key frame="139" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="53.2" /><Key frame="89" value="53.2" /><Key frame="104" value="28.1" /><Key frame="108" value="28.1" /><Key frame="113" value="28.1" /><Key frame="118" value="28.1" /><Key frame="123" value="28.1" /><Key frame="139" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-104.5" /><Key frame="89" value="-104.5" /><Key frame="139" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="89.5" /><Key frame="89" value="89.5" /><Key frame="139" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="-2.9" /><Key frame="89" value="-2.9" /><Key frame="139" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="49" value="0.26" /><Key frame="54" value="0.73" /><Key frame="59" value="0.26" /><Key frame="64" value="0.73" /><Key frame="69" value="0.26" /><Key frame="89" value="1" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="29.3" /><Key frame="49" value="12" /><Key frame="54" value="12" /><Key frame="59" value="12" /><Key frame="64" value="12" /><Key frame="69" value="12" /><Key frame="89" value="29.3" /><Key frame="139" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-53.2" /><Key frame="49" value="-28.1" /><Key frame="54" value="-28.1" /><Key frame="59" value="-28.1" /><Key frame="64" value="-28.1" /><Key frame="69" value="-28.1" /><Key frame="89" value="-53.2" /><Key frame="139" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="104.5" /><Key frame="89" value="104.5" /><Key frame="139" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="15" /><Key frame="89" value="15" /><Key frame="139" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="0" /><Key frame="89" value="0" /><Key frame="139" value="2.93938e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="139" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="139" value="0.000129227" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="139" value="-4.2" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay (1)" id="5" localization="8" tooltip="" x="176" y="214"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="7" localization="8" tooltip="Say the text received on its input." x="374" y="94"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "アポイントはありますか。\pau=1000\ ある方はアポあり、無い方はアポなし、を選んでタッチしてくださーい"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="16" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_受付説明" id="5" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="284" y="36"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Reception/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="6" /><Link inputowner="6" indexofinput="2" outputowner="14" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="6" /><Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_部署選択画面" id="16" localization="8" tooltip="Enter description here" x="773" y="176"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_部署選択説明_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_受付戻る_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_部署選択_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Input name="_部署選択次へ_onStart_4" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="5" /><Input name="_部署選択前へ_onStart_5" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="ｂｔｎBackClick" id="6" localization="8" tooltip="" x="498" y="122"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="139" y="93"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="317" y="91"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "戻る"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="DepartmentSelected" id="2" localization="8" tooltip="" x="495" y="240"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="169" y="69"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="492" y="104"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_受付戻る" id="3" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="285" y="121"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Department/BtnBackClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文" id="5" localization="8" tooltip="" x="491" y="16"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="639" y="157"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="oa_1008" id="17" localization="8" tooltip="Enter tooltip here" x="397" y="260"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="109" size="109"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-89.5" /><Key frame="40" value="-89.5" /><Key frame="55" value="-89.5" /><Key frame="70" value="-89.5" /><Key frame="90" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="2.9" /><Key frame="40" value="2.9" /><Key frame="55" value="2.9" /><Key frame="70" value="2.9" /><Key frame="90" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="1" /><Key frame="40" value="0.2" /><Key frame="55" value="1" /><Key frame="70" value="0.2" /><Key frame="90" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="29.3" /><Key frame="40" value="14" /><Key frame="55" value="29.3" /><Key frame="70" value="14" /><Key frame="90" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="53.2" /><Key frame="40" value="46.9" /><Key frame="55" value="53.2" /><Key frame="70" value="46.9" /><Key frame="90" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-104.5" /><Key frame="40" value="-104.5" /><Key frame="55" value="-104.5" /><Key frame="70" value="-104.5" /><Key frame="90" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="89.5" /><Key frame="40" value="89.5" /><Key frame="55" value="89.5" /><Key frame="70" value="89.5" /><Key frame="90" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="-2.9" /><Key frame="40" value="-2.9" /><Key frame="55" value="-2.9" /><Key frame="70" value="-2.9" /><Key frame="90" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="1" /><Key frame="40" value="0.2" /><Key frame="55" value="1" /><Key frame="70" value="0.2" /><Key frame="90" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="29.3" /><Key frame="40" value="14" /><Key frame="55" value="29.3" /><Key frame="70" value="14" /><Key frame="90" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-53.2" /><Key frame="40" value="-46.9" /><Key frame="55" value="-53.2" /><Key frame="70" value="-46.9" /><Key frame="90" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="104.5" /><Key frame="40" value="104.5" /><Key frame="55" value="104.5" /><Key frame="70" value="104.5" /><Key frame="90" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="15" /><Key frame="40" value="15" /><Key frame="55" value="15" /><Key frame="70" value="15" /><Key frame="90" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="0" /><Key frame="40" value="0" /><Key frame="55" value="0" /><Key frame="70" value="0" /><Key frame="90" value="2.93938e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="90" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="90" value="0.000129227" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="90" value="-4.2" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="126" y="155"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text " id="11" localization="8" tooltip="Say the text received on its input." x="397" y="95"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "お呼び出しする担当者の部署を選択してください。"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="17" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="17" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_部署選択説明" id="14" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="289" y="16"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Department/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_社員選択" id="23" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="283" y="246"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Department/DepartmentSelectedEvent" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="6" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="23" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="23" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_社員選択画面" id="4" localization="8" tooltip="Enter description here" x="870" y="281"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_社員選択説明_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_部署戻る_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_社員前へ_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Input name="_社員次へ_onStart_4" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="5" /><Input name="_社員選択_onStart_5" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="ｂｔｎBackClick" id="6" localization="8" tooltip="" x="693" y="166"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="165" y="62"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="379" y="82"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "戻る"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="EmployeeSelected" id="2" localization="8" tooltip="" x="700" y="293"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay (1)" id="5" localization="8" tooltip="" x="208" y="63"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="2" localization="8" tooltip="Say the text received on its input and move during its speech." x="565" y="76"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_部署戻る" id="19" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="518" y="161"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Employee/BtnBackClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_社員選択" id="23" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="520" y="290"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Employee/EmployeeSelectedEvent" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文" id="5" localization="8" tooltip="" x="689" y="56"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="678" y="168"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="oa_1008" id="17" localization="8" tooltip="Enter tooltip here" x="450" y="270"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="109" size="109"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-89.5" /><Key frame="40" value="-89.5" /><Key frame="55" value="-89.5" /><Key frame="70" value="-89.5" /><Key frame="90" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="2.9" /><Key frame="40" value="2.9" /><Key frame="55" value="2.9" /><Key frame="70" value="2.9" /><Key frame="90" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="1" /><Key frame="40" value="0.2" /><Key frame="55" value="1" /><Key frame="70" value="0.2" /><Key frame="90" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="29.3" /><Key frame="40" value="14" /><Key frame="55" value="29.3" /><Key frame="70" value="14" /><Key frame="90" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="53.2" /><Key frame="40" value="46.9" /><Key frame="55" value="53.2" /><Key frame="70" value="46.9" /><Key frame="90" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-104.5" /><Key frame="40" value="-104.5" /><Key frame="55" value="-104.5" /><Key frame="70" value="-104.5" /><Key frame="90" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="89.5" /><Key frame="40" value="89.5" /><Key frame="55" value="89.5" /><Key frame="70" value="89.5" /><Key frame="90" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="-2.9" /><Key frame="40" value="-2.9" /><Key frame="55" value="-2.9" /><Key frame="70" value="-2.9" /><Key frame="90" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="1" /><Key frame="40" value="0.2" /><Key frame="55" value="1" /><Key frame="70" value="0.2" /><Key frame="90" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="29.3" /><Key frame="40" value="14" /><Key frame="55" value="29.3" /><Key frame="70" value="14" /><Key frame="90" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-53.2" /><Key frame="40" value="-46.9" /><Key frame="55" value="-53.2" /><Key frame="70" value="-46.9" /><Key frame="90" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="104.5" /><Key frame="40" value="104.5" /><Key frame="55" value="104.5" /><Key frame="70" value="104.5" /><Key frame="90" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="15" /><Key frame="40" value="15" /><Key frame="55" value="15" /><Key frame="70" value="15" /><Key frame="90" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="0" /><Key frame="40" value="0" /><Key frame="55" value="0" /><Key frame="70" value="0" /><Key frame="90" value="2.93938e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="90" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="90" value="0.000129227" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="90" value="-4.2" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="135" y="164"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text " id="11" localization="8" tooltip="Say the text received on its input." x="448" y="118"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "お呼び出しする社員を選択してください。"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="17" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="17" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_社員選択説明" id="14" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="517" y="47"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Employee/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="6" indexofinput="2" outputowner="19" indexofoutput="6" /><Link inputowner="2" indexofinput="2" outputowner="23" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="6" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="23" indexofinput="2" outputowner="0" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_アポなしコール準備" id="2" localization="8" tooltip="Enter description here" x="766" y="445"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_アポなし呼びます_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_アポなしキャンセル_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="ｂｔｎCancelClick" id="6" localization="8" tooltip="" x="485" y="172"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="185" y="95"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="571" y="145"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "キャンセル"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_アポなしキャンセル" id="1" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="329" y="174"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/CallNoAppoPre/BtnCancelClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_アポなし呼びます" id="14" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="327" y="64"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/CallNoAppoPre/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文" id="5" localization="8" tooltip="" x="480" y="66"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="624" y="149"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="oa_1010" id="19" localization="8" tooltip="Enter tooltip here" x="381" y="260"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="157" size="157"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-68.8" /><Key frame="27" value="-53.3" /><Key frame="37" value="-42.8906" /><Key frame="44" value="-55.8" /><Key frame="53" value="-52.9" /><Key frame="57" value="-52.9" /><Key frame="61" value="-52.9" /><Key frame="65" value="-52.9" /><Key frame="69" value="-52.9" /><Key frame="73" value="-52.9" /><Key frame="77" value="-52.9" /><Key frame="81" value="-52.9" /><Key frame="85" value="-52.9" /><Key frame="89" value="-52.9" /><Key frame="93" value="-52.9" /><Key frame="97" value="-52.9" /><Key frame="101" value="-52.9" /><Key frame="105" value="-52.9" /><Key frame="109" value="-52.9" /><Key frame="113" value="-52.9" /><Key frame="117" value="-52.9" /><Key frame="121" value="-52.9" /><Key frame="132" value="-42.7" /><Key frame="146" value="-89.5" /><Key frame="155" value="-89.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="-1.9" /><Key frame="27" value="-12.4" /><Key frame="37" value="-28.0371" /><Key frame="44" value="-19.8" /><Key frame="53" value="-19.1" /><Key frame="57" value="-19.1" /><Key frame="61" value="-19.1" /><Key frame="65" value="-19.1" /><Key frame="69" value="-19.1" /><Key frame="73" value="-19.1" /><Key frame="77" value="-19.1" /><Key frame="81" value="-19.1" /><Key frame="85" value="-19.1" /><Key frame="89" value="-19.1" /><Key frame="93" value="-19.1" /><Key frame="97" value="-19.1" /><Key frame="101" value="-19.1" /><Key frame="105" value="-19.1" /><Key frame="109" value="-19.1" /><Key frame="113" value="-19.1" /><Key frame="117" value="-19.1" /><Key frame="121" value="-19.1" /><Key frame="132" value="-19.1" /><Key frame="146" value="12.9" /><Key frame="155" value="12.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0.56" /><Key frame="27" value="0.68" /><Key frame="37" value="0.891916" /><Key frame="44" value="0.73" /><Key frame="53" value="0.95" /><Key frame="57" value="0.95" /><Key frame="61" value="0.95" /><Key frame="65" value="0.95" /><Key frame="69" value="0.95" /><Key frame="73" value="0.95" /><Key frame="77" value="0.95" /><Key frame="81" value="0.95" /><Key frame="85" value="0.95" /><Key frame="89" value="0.95" /><Key frame="93" value="0.95" /><Key frame="97" value="0.95" /><Key frame="101" value="0.95" /><Key frame="105" value="0.95" /><Key frame="109" value="0.95" /><Key frame="113" value="0.95" /><Key frame="117" value="0.95" /><Key frame="121" value="0.95" /><Key frame="132" value="0.39" /><Key frame="146" value="0.32" /><Key frame="155" value="0.32" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="84.8" /><Key frame="27" value="42.5" /><Key frame="37" value="22.4121" /><Key frame="44" value="19.1" /><Key frame="53" value="8.1" /><Key frame="57" value="8.1" /><Key frame="61" value="8.1" /><Key frame="65" value="8.1" /><Key frame="69" value="8.1" /><Key frame="73" value="8.1" /><Key frame="77" value="8.1" /><Key frame="81" value="8.1" /><Key frame="85" value="8.1" /><Key frame="89" value="8.1" /><Key frame="93" value="8.1" /><Key frame="97" value="8.1" /><Key frame="101" value="8.1" /><Key frame="105" value="8.1" /><Key frame="109" value="8.1" /><Key frame="113" value="8.1" /><Key frame="117" value="8.1" /><Key frame="121" value="8.1" /><Key frame="132" value="2.7" /><Key frame="146" value="-108" /><Key frame="155" value="-108" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="45.2" /><Key frame="27" value="32.5" /><Key frame="37" value="17.8431" /><Key frame="44" value="17.7" /><Key frame="53" value="6.1" /><Key frame="57" value="6.1" /><Key frame="61" value="6.1" /><Key frame="65" value="6.1" /><Key frame="69" value="6.1" /><Key frame="73" value="6.1" /><Key frame="77" value="6.1" /><Key frame="81" value="6.1" /><Key frame="85" value="6.1" /><Key frame="89" value="6.1" /><Key frame="93" value="6.1" /><Key frame="97" value="6.1" /><Key frame="101" value="6.1" /><Key frame="105" value="6.1" /><Key frame="109" value="6.1" /><Key frame="113" value="6.1" /><Key frame="117" value="6.1" /><Key frame="121" value="6.1" /><Key frame="132" value="19.7" /><Key frame="146" value="32.9" /><Key frame="155" value="32.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-104.5" /><Key frame="27" value="-104.5" /><Key frame="37" value="-101.693" /><Key frame="44" value="-104.5" /><Key frame="53" value="-104.5" /><Key frame="57" value="-104.5" /><Key frame="61" value="-104.5" /><Key frame="65" value="-104.5" /><Key frame="69" value="-104.5" /><Key frame="73" value="-104.5" /><Key frame="77" value="-104.5" /><Key frame="81" value="-104.5" /><Key frame="85" value="-104.5" /><Key frame="89" value="-104.5" /><Key frame="93" value="-104.5" /><Key frame="97" value="-104.5" /><Key frame="101" value="-104.5" /><Key frame="105" value="-104.5" /><Key frame="109" value="-104.5" /><Key frame="113" value="-104.5" /><Key frame="117" value="-104.5" /><Key frame="121" value="-104.5" /><Key frame="132" value="-104.5" /><Key frame="146" value="-104.5" /><Key frame="155" value="-104.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="78.8379" /><Key frame="27" value="78.8379" /><Key frame="44" value="71.1" /><Key frame="53" value="85.2" /><Key frame="57" value="85.2" /><Key frame="61" value="85.2" /><Key frame="65" value="85.2" /><Key frame="69" value="85.2" /><Key frame="73" value="85.2" /><Key frame="77" value="85.2" /><Key frame="81" value="85.2" /><Key frame="85" value="85.2" /><Key frame="89" value="85.2" /><Key frame="93" value="85.2" /><Key frame="97" value="85.2" /><Key frame="101" value="85.2" /><Key frame="105" value="85.2" /><Key frame="109" value="85.2" /><Key frame="113" value="85.2" /><Key frame="117" value="85.2" /><Key frame="121" value="85.2" /><Key frame="132" value="72.3" /><Key frame="146" value="48.7" /><Key frame="155" value="48.7" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="42.0117" /><Key frame="27" value="42.0117" /><Key frame="44" value="50.4" /><Key frame="53" value="40.8" /><Key frame="57" value="35.2" /><Key frame="61" value="40.8" /><Key frame="65" value="35.2" /><Key frame="69" value="40.8" /><Key frame="73" value="35.2" /><Key frame="77" value="40.8" /><Key frame="81" value="35.2" /><Key frame="85" value="40.8" /><Key frame="89" value="35.2" /><Key frame="93" value="40.8" /><Key frame="97" value="35.2" /><Key frame="101" value="40.8" /><Key frame="105" value="35.2" /><Key frame="109" value="40.8" /><Key frame="113" value="35.2" /><Key frame="117" value="40.8" /><Key frame="121" value="35.2" /><Key frame="132" value="38.7" /><Key frame="146" value="53.9" /><Key frame="155" value="53.9" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="0.725835" /><Key frame="27" value="0.725835" /><Key frame="44" value="0.64" /><Key frame="53" value="0.78" /><Key frame="57" value="0.64" /><Key frame="61" value="0.78" /><Key frame="65" value="0.64" /><Key frame="69" value="0.78" /><Key frame="73" value="0.64" /><Key frame="77" value="0.78" /><Key frame="81" value="0.64" /><Key frame="85" value="0.78" /><Key frame="89" value="0.64" /><Key frame="93" value="0.78" /><Key frame="97" value="0.64" /><Key frame="101" value="0.78" /><Key frame="105" value="0.64" /><Key frame="109" value="0.78" /><Key frame="113" value="0.64" /><Key frame="117" value="0.78" /><Key frame="121" value="0.64" /><Key frame="132" value="0.66" /><Key frame="146" value="0.88" /><Key frame="155" value="0.88" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="29.0039" /><Key frame="27" value="29.0039" /><Key frame="44" value="21" /><Key frame="53" value="16.9" /><Key frame="57" value="16.9" /><Key frame="61" value="16.9" /><Key frame="65" value="16.9" /><Key frame="69" value="16.9" /><Key frame="73" value="16.9" /><Key frame="77" value="16.9" /><Key frame="81" value="16.9" /><Key frame="85" value="16.9" /><Key frame="89" value="16.9" /><Key frame="93" value="16.9" /><Key frame="97" value="16.9" /><Key frame="101" value="16.9" /><Key frame="105" value="16.9" /><Key frame="109" value="16.9" /><Key frame="113" value="16.9" /><Key frame="117" value="16.9" /><Key frame="121" value="16.9" /><Key frame="132" value="40.8" /><Key frame="146" value="72" /><Key frame="155" value="72" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-44.8562" /><Key frame="27" value="-44.8562" /><Key frame="44" value="-20.1" /><Key frame="53" value="-12.7" /><Key frame="57" value="-12.7" /><Key frame="61" value="-12.7" /><Key frame="65" value="-12.7" /><Key frame="69" value="-12.7" /><Key frame="73" value="-12.7" /><Key frame="77" value="-12.7" /><Key frame="81" value="-12.7" /><Key frame="85" value="-12.7" /><Key frame="89" value="-12.7" /><Key frame="93" value="-12.7" /><Key frame="97" value="-12.7" /><Key frame="101" value="-12.7" /><Key frame="105" value="-12.7" /><Key frame="109" value="-12.7" /><Key frame="113" value="-12.7" /><Key frame="117" value="-12.7" /><Key frame="121" value="-12.7" /><Key frame="132" value="-33.2" /><Key frame="146" value="-5.6" /><Key frame="155" value="-5.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="18.8943" /><Key frame="27" value="18.8943" /><Key frame="44" value="-9.5" /><Key frame="53" value="-27.6" /><Key frame="57" value="-27.6" /><Key frame="61" value="-27.6" /><Key frame="65" value="-27.6" /><Key frame="69" value="-27.6" /><Key frame="73" value="-27.6" /><Key frame="77" value="-27.6" /><Key frame="81" value="-27.6" /><Key frame="85" value="-27.6" /><Key frame="89" value="-27.6" /><Key frame="93" value="-27.6" /><Key frame="97" value="-27.6" /><Key frame="101" value="-27.6" /><Key frame="105" value="-27.6" /><Key frame="109" value="-27.6" /><Key frame="113" value="-27.6" /><Key frame="117" value="-27.6" /><Key frame="121" value="-27.6" /><Key frame="132" value="-27.6" /><Key frame="146" value="21.6" /><Key frame="155" value="21.6" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="7.9" /><Key frame="27" value="27" /><Key frame="53" value="9.4" /><Key frame="57" value="9.4" /><Key frame="61" value="9.4" /><Key frame="65" value="9.4" /><Key frame="69" value="9.4" /><Key frame="73" value="9.4" /><Key frame="77" value="9.4" /><Key frame="81" value="9.4" /><Key frame="85" value="9.4" /><Key frame="89" value="9.4" /><Key frame="93" value="9.4" /><Key frame="97" value="9.4" /><Key frame="101" value="9.4" /><Key frame="105" value="9.4" /><Key frame="109" value="9.4" /><Key frame="113" value="9.4" /><Key frame="117" value="9.4" /><Key frame="121" value="9.4" /><Key frame="132" value="-5.5" /><Key frame="146" value="-18.2" /><Key frame="155" value="-18.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="14.2" /><Key frame="27" value="23" /><Key frame="37" value="16.9" /><Key frame="44" value="5.2" /><Key frame="53" value="4.7" /><Key frame="57" value="4.7" /><Key frame="61" value="4.7" /><Key frame="65" value="4.7" /><Key frame="69" value="4.7" /><Key frame="73" value="4.7" /><Key frame="77" value="4.7" /><Key frame="81" value="4.7" /><Key frame="85" value="4.7" /><Key frame="89" value="4.7" /><Key frame="93" value="4.7" /><Key frame="97" value="4.7" /><Key frame="101" value="4.7" /><Key frame="105" value="4.7" /><Key frame="109" value="4.7" /><Key frame="113" value="4.7" /><Key frame="117" value="4.7" /><Key frame="121" value="4.7" /><Key frame="132" value="8.7" /><Key frame="146" value="21.1" /><Key frame="155" value="21.1" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="170" y="163"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="411" y="112"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "はい、今呼び出しますね。\pau=500\ えーと、内線番号は、\pau=500\　あ、これかな"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="19" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="19" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Raise Event" id="10" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="672" y="69"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="OADonburi/CallNoAppoPre/PrepareDone" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="6" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="6" /><Link inputowner="10" indexofinput="2" outputowner="5" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_問診画面" id="22" localization="8" tooltip="Enter description here" x="773" y="646"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_問診開始_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_経営相談戻る_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_問診前へ_onStart_4" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Input name="_問診次へ_onStart_5" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="5" /><Input name="_答え選択_onStart_6" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="ｂｔｎNavBackClick" id="6" localization="8" tooltip="" x="703" y="155"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="152" y="64"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="456" y="89"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "戻る"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ｂｔｎPreClick" id="1" localization="8" tooltip="" x="704" y="263"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Say" id="1" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="399" y="52"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " 前へ ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 ",
			"MandarinTaiwan" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]></content></script><pluginContent><arabic><![CDATA[مرحبا]]></arabic><czech><![CDATA[Ahoj]]></czech><danish><![CDATA[Hej]]></danish><german><![CDATA[Hallo]]></german><greek><![CDATA[]]></greek><english><![CDATA[Hello]]></english><spanish><![CDATA[Hola]]></spanish><finnish><![CDATA[Hei]]></finnish><french><![CDATA[Bonjour]]></french><italian><![CDATA[Ciao]]></italian><japanese><![CDATA[前へ]]></japanese><korean><![CDATA[안녕하세요]]></korean><dutch><![CDATA[Hallo]]></dutch><norwegian><![CDATA[]]></norwegian><polish><![CDATA[Cześć]]></polish><brazilian><![CDATA[Olá]]></brazilian><portuguese><![CDATA[Olá]]></portuguese><russian><![CDATA[Привет]]></russian><swedish><![CDATA[Hallå]]></swedish><turkish><![CDATA[Merhaba]]></turkish><chinese><![CDATA[你好]]></chinese><mandarintaiwan><![CDATA[]]></mandarintaiwan><language>10</language></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" /></Box><Box name="Animated Say Text (1)" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="650" y="130"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="135" y="45"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ｂｔｎNextClick" id="19" localization="8" tooltip="" x="701" y="367"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Say" id="1" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="400" y="66"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " 次へ ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : " 你好 ",
			"MandarinTaiwan" : "  "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]></content></script><pluginContent><arabic><![CDATA[مرحبا]]></arabic><czech><![CDATA[Ahoj]]></czech><danish><![CDATA[Hej]]></danish><german><![CDATA[Hallo]]></german><greek><![CDATA[]]></greek><english><![CDATA[Hello]]></english><spanish><![CDATA[Hola]]></spanish><finnish><![CDATA[Hei]]></finnish><french><![CDATA[Bonjour]]></french><italian><![CDATA[Ciao]]></italian><japanese><![CDATA[次へ]]></japanese><korean><![CDATA[안녕하세요]]></korean><dutch><![CDATA[Hallo]]></dutch><norwegian><![CDATA[]]></norwegian><polish><![CDATA[Cześć]]></polish><brazilian><![CDATA[Olá]]></brazilian><portuguese><![CDATA[Olá]]></portuguese><russian><![CDATA[Привет]]></russian><swedish><![CDATA[Hallå]]></swedish><turkish><![CDATA[Merhaba]]></turkish><chinese><![CDATA[你好]]></chinese><mandarintaiwan><![CDATA[]]></mandarintaiwan><language>10</language></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" /></Box><Box name="Animated Say Text (1)" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="665" y="117"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="151" y="65"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="answerSelectedEvent" id="3" localization="8" tooltip="" x="700" y="482"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="171" y="97"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="500" y="94"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "そうですか、分かりました。"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_経営相談戻る" id="8" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="483" y="153"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Interview/BtnNavBackClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_問診前へ" id="21" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="482" y="258"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Interview/BtnPreClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_問診次へ" id="23" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="483" y="362"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Interview/BtnNextClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_答え選択" id="25" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="492" y="478"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Interview/AnswerSelectedEvent" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="Raise Event" id="10" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="873" y="485"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="OADonburi/Interview/TalkAnswerFinished" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="_説明文開始" id="13" localization="8" tooltip="" x="699" y="28"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Switch Case" id="3" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="367" y="125"><bitmap>media/images/box/interaction/choice.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		elif(p == self.typeConversion(3)):
			self.output_4(p)
		elif(p == self.typeConversion(4)):
			self.output_5(p)
		elif(p == self.typeConversion(5)):
			self.output_6(p)
		elif(p == self.typeConversion(6)):
			self.output_7(p)
		elif(p == self.typeConversion(7)):
			self.output_8(p)
		elif(p == self.typeConversion(8)):
			self.output_9(p)
		elif(p == self.typeConversion(9)):
			self.output_10(p)
		elif(p == self.typeConversion(10)):
			self.output_11(p)
		elif(p == self.typeConversion(11)):
			self.output_12(p)
		elif(p == self.typeConversion(12)):
			self.output_13(p)
		elif(p == self.typeConversion(13)):
			self.output_14(p)
		elif(p == self.typeConversion(14)):
			self.output_15(p)
		elif(p == self.typeConversion(15)):
			self.output_16(p)
		elif(p == self.typeConversion(16)):
			self.output_17(p)
		elif(p == self.typeConversion(17)):
			self.output_18(p)
		elif(p == self.typeConversion(18)):
			self.output_19(p)
		elif(p == self.typeConversion(19)):
			self.output_20(p)
		elif(p == self.typeConversion(20)):
			self.output_21(p)
		elif(p == self.typeConversion(21)):
			self.output_22(p)
		elif(p == self.typeConversion(22)):
			self.output_23(p)
		elif(p == self.typeConversion(23)):
			self.output_24(p)
		elif(p == self.typeConversion(24)):
			self.output_25(p)
		elif(p == self.typeConversion(25)):
			self.output_26(p)
		elif(p == self.typeConversion(26)):
			self.output_27(p)
		elif(p == self.typeConversion(27)):
			self.output_28(p)
		elif(p == self.typeConversion(28)):
			self.output_29(p)
		elif(p == self.typeConversion(29)):
			self.output_30(p)
		elif(p == self.typeConversion(30)):
			self.output_31(p)
		elif(p == self.typeConversion(31)):
			self.output_32(p)
		elif(p == self.typeConversion(32)):
			self.output_33(p)
		elif(p == self.typeConversion(33)):
			self.output_34(p)
		elif(p == self.typeConversion(34)):
			self.output_35(p)
		elif(p == self.typeConversion(35)):
			self.output_36(p)
		elif(p == self.typeConversion(36)):
			self.output_37(p)
		elif(p == self.typeConversion(37)):
			self.output_38(p)
		elif(p == self.typeConversion(38)):
			self.output_39(p)
		elif(p == self.typeConversion(39)):
			self.output_40(p)
		elif(p == self.typeConversion(40)):
			self.output_41(p)
		elif(p == self.typeConversion(41)):
			self.output_42(p)
		elif(p == self.typeConversion(42)):
			self.output_43(p)
		elif(p == self.typeConversion(43)):
			self.output_44(p)
		elif(p == self.typeConversion(44)):
			self.output_45(p)
		elif(p == self.typeConversion(45)):
			self.output_46(p)
		elif(p == self.typeConversion(46)):
			self.output_47(p)
		elif(p == self.typeConversion(47)):
			self.output_48(p)
		elif(p == self.typeConversion(48)):
			self.output_49(p)
		elif(p == self.typeConversion(49)):
			self.output_50(p)
		elif(p == self.typeConversion(50)):
			self.output_51(p)
		elif(p == self.typeConversion(51)):
			self.output_52(p)
		elif(p == self.typeConversion(52)):
			self.output_53(p)
		elif(p == self.typeConversion(53)):
			self.output_54(p)
		elif(p == self.typeConversion(54)):
			self.output_55(p)
		elif(p == self.typeConversion(55)):
			self.output_56(p)
		elif(p == self.typeConversion(56)):
			self.output_57(p)
		elif(p == self.typeConversion(57)):
			self.output_58(p)
		elif(p == self.typeConversion(58)):
			self.output_59(p)
		elif(p == self.typeConversion(59)):
			self.output_60(p)
		elif(p == self.typeConversion(60)):
			self.output_61(p)
		elif(p == self.typeConversion(61)):
			self.output_62(p)
		elif(p == self.typeConversion(62)):
			self.output_63(p)
		elif(p == self.typeConversion(63)):
			self.output_64(p)
		elif(p == self.typeConversion(64)):
			self.output_65(p)
		elif(p == self.typeConversion(65)):
			self.output_66(p)
		elif(p == self.typeConversion(66)):
			self.output_67(p)
		elif(p == self.typeConversion(67)):
			self.output_68(p)
		elif(p == self.typeConversion(68)):
			self.output_69(p)
		elif(p == self.typeConversion(69)):
			self.output_70(p)
		elif(p == self.typeConversion(70)):
			self.output_71(p)
		elif(p == self.typeConversion(71)):
			self.output_72(p)
		elif(p == self.typeConversion(72)):
			self.output_73(p)
		elif(p == self.typeConversion(73)):
			self.output_74(p)
		elif(p == self.typeConversion(74)):
			self.output_75(p)
		elif(p == self.typeConversion(75)):
			self.output_76(p)
		elif(p == self.typeConversion(76)):
			self.output_77(p)
		elif(p == self.typeConversion(77)):
			self.output_78(p)
		elif(p == self.typeConversion(78)):
			self.output_79(p)
		elif(p == self.typeConversion(79)):
			self.output_80(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]></content></script><pluginContent><keywords><keyword>0</keyword><keyword>1</keyword><keyword>2</keyword><keyword>3</keyword><keyword>4</keyword><keyword>5</keyword><keyword>6</keyword><keyword>7</keyword><keyword>8</keyword><keyword>9</keyword><keyword>10</keyword><keyword>11</keyword><keyword>12</keyword><keyword>13</keyword><keyword>14</keyword><keyword>15</keyword><keyword>16</keyword><keyword>17</keyword><keyword>18</keyword><keyword>19</keyword><keyword>20</keyword><keyword>21</keyword><keyword>22</keyword><keyword>23</keyword><keyword>24</keyword><keyword>25</keyword><keyword>26</keyword><keyword>27</keyword><keyword>28</keyword><keyword>29</keyword><keyword>30</keyword><keyword>31</keyword><keyword>32</keyword><keyword>33</keyword><keyword>34</keyword><keyword>35</keyword><keyword>36</keyword><keyword>37</keyword><keyword>38</keyword><keyword>39</keyword><keyword>40</keyword><keyword>41</keyword><keyword>42</keyword><keyword>43</keyword><keyword>44</keyword><keyword>45</keyword><keyword>46</keyword><keyword>47</keyword><keyword>48</keyword><keyword>49</keyword><keyword>50</keyword><keyword>51</keyword><keyword>52</keyword><keyword>53</keyword><keyword>54</keyword><keyword>55</keyword><keyword>56</keyword><keyword>57</keyword><keyword>58</keyword><keyword>59</keyword><keyword>60</keyword><keyword>61</keyword><keyword>62</keyword><keyword>63</keyword><keyword>64</keyword><keyword>65</keyword><keyword>66</keyword><keyword>67</keyword><keyword>68</keyword><keyword>69</keyword><keyword>70</keyword><keyword>71</keyword><keyword>72</keyword><keyword>73</keyword><keyword>74</keyword><keyword>75</keyword><keyword>76</keyword><keyword>77</keyword><keyword>78</keyword><keyword>79</keyword><keyword></keyword></keywords></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" /><Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" /><Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" /><Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" /><Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" /><Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" /><Output name="output_5" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" /><Output name="output_6" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="9" /><Output name="output_7" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="10" /><Output name="output_8" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="11" /><Output name="output_9" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="12" /><Output name="output_10" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="13" /><Output name="output_11" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="14" /><Output name="output_12" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="15" /><Output name="output_13" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="16" /><Output name="output_14" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="17" /><Output name="output_15" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="18" /><Output name="output_16" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="19" /><Output name="output_17" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="20" /><Output name="output_18" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="21" /><Output name="output_19" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="22" /><Output name="output_20" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="23" /><Output name="output_21" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="24" /><Output name="output_22" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="25" /><Output name="output_23" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="26" /><Output name="output_24" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="27" /><Output name="output_25" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="28" /><Output name="output_26" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="29" /><Output name="output_27" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="30" /><Output name="output_28" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="31" /><Output name="output_29" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="32" /><Output name="output_30" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="33" /><Output name="output_31" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="34" /><Output name="output_32" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="35" /><Output name="output_33" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="36" /><Output name="output_34" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="37" /><Output name="output_35" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="38" /><Output name="output_36" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="39" /><Output name="output_37" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="40" /><Output name="output_38" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="41" /><Output name="output_39" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="42" /><Output name="output_40" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="43" /><Output name="output_41" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="44" /><Output name="output_42" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="45" /><Output name="output_43" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="46" /><Output name="output_44" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="47" /><Output name="output_45" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="48" /><Output name="output_46" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="49" /><Output name="output_47" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="50" /><Output name="output_48" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="51" /><Output name="output_49" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="52" /><Output name="output_50" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="53" /><Output name="output_51" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="54" /><Output name="output_52" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="55" /><Output name="output_53" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="56" /><Output name="output_54" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="57" /><Output name="output_55" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="58" /><Output name="output_56" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="59" /><Output name="output_57" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="60" /><Output name="output_58" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="61" /><Output name="output_59" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="62" /><Output name="output_60" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="63" /><Output name="output_61" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="64" /><Output name="output_62" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="65" /><Output name="output_63" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="66" /><Output name="output_64" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="67" /><Output name="output_65" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="68" /><Output name="output_66" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="69" /><Output name="output_67" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="70" /><Output name="output_68" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="71" /><Output name="output_69" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="72" /><Output name="output_70" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="73" /><Output name="output_71" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="74" /><Output name="output_72" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="75" /><Output name="output_73" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="76" /><Output name="output_74" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="77" /><Output name="output_75" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="78" /><Output name="output_76" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="79" /><Output name="output_77" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="80" /><Output name="output_78" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="81" /><Output name="output_79" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="82" /><Output name="output_80" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="83" /></Box><Box name="n_基本姿勢" id="4" localization="8" tooltip="Enter tooltip here" x="601" y="105"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="25" size="25"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="2.93938e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="25" value="0.000129227" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="25" value="-4.2" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_歩く" id="5" localization="8" tooltip="Enter tooltip here" x="743" y="100"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="127" size="127"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="-11.4592" /><Key frame="18" value="-11.4592" /><Key frame="27" value="-11.4592" /><Key frame="36" value="-20" /><Key frame="45" value="-11.4592" /><Key frame="54" value="-20" /><Key frame="63" value="-11.4592" /><Key frame="72" value="-20" /><Key frame="81" value="-11.4592" /><Key frame="84" value="-11.4592" /><Key frame="101" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="4.70003e-21" /><Key frame="18" value="4.70003e-21" /><Key frame="27" value="-4.70003e-21" /><Key frame="36" value="0" /><Key frame="45" value="4.70003e-21" /><Key frame="54" value="-4.69307e-22" /><Key frame="63" value="-4.70003e-21" /><Key frame="72" value="-3.27401e-21" /><Key frame="81" value="4.70003e-21" /><Key frame="84" value="4.70003e-21" /><Key frame="101" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-51.8" /><Key frame="18" value="-51.8" /><Key frame="27" value="-43.2752" /><Key frame="36" value="-47.9614" /><Key frame="45" value="-51.8" /><Key frame="54" value="-47.0998" /><Key frame="63" value="-43.2752" /><Key frame="72" value="-47.9632" /><Key frame="81" value="-51.8" /><Key frame="84" value="-51.8" /><Key frame="101" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-81.936" /><Key frame="18" value="-81.936" /><Key frame="27" value="-79.5356" /><Key frame="36" value="-81.696" /><Key frame="45" value="-81.936" /><Key frame="54" value="-80.6388" /><Key frame="63" value="-79.5356" /><Key frame="72" value="-80.8556" /><Key frame="81" value="-81.936" /><Key frame="84" value="-81.936" /><Key frame="101" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.05" /><Key frame="18" value="0.05" /><Key frame="27" value="0.05" /><Key frame="36" value="0.05" /><Key frame="45" value="0.05" /><Key frame="54" value="0.05" /><Key frame="63" value="0.05" /><Key frame="72" value="0.05" /><Key frame="81" value="0.05" /><Key frame="84" value="0.05" /><Key frame="101" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="73.0686" /><Key frame="18" value="73.0686" /><Key frame="27" value="110.9" /><Key frame="36" value="90.0871" /><Key frame="45" value="73.0686" /><Key frame="54" value="93.8326" /><Key frame="63" value="110.9" /><Key frame="72" value="90.0956" /><Key frame="81" value="73.0686" /><Key frame="84" value="73.0686" /><Key frame="101" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="9.8" /><Key frame="18" value="9.8" /><Key frame="27" value="11.9" /><Key frame="36" value="10.034" /><Key frame="45" value="9.8" /><Key frame="54" value="11.0775" /><Key frame="63" value="11.9" /><Key frame="72" value="10.7452" /><Key frame="81" value="9.8" /><Key frame="84" value="9.8" /><Key frame="101" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-17.488" /><Key frame="18" value="-17.488" /><Key frame="27" value="2.72224" /><Key frame="36" value="-8.3919" /><Key frame="45" value="-17.488" /><Key frame="54" value="-6.37386" /><Key frame="63" value="2.72224" /><Key frame="72" value="-8.3919" /><Key frame="81" value="-17.488" /><Key frame="84" value="-17.488" /><Key frame="101" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="43.2162" /><Key frame="18" value="43.2162" /><Key frame="27" value="51.8" /><Key frame="36" value="45.027" /><Key frame="45" value="43.2162" /><Key frame="54" value="47.9367" /><Key frame="63" value="51.8" /><Key frame="72" value="47.0712" /><Key frame="81" value="43.2162" /><Key frame="84" value="43.2162" /><Key frame="101" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="79.598" /><Key frame="18" value="79.598" /><Key frame="27" value="81.936" /><Key frame="36" value="80.659" /><Key frame="45" value="79.598" /><Key frame="54" value="80.8837" /><Key frame="63" value="81.936" /><Key frame="72" value="80.666" /><Key frame="81" value="79.598" /><Key frame="84" value="79.598" /><Key frame="101" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.1816" /><Key frame="18" value="0.1816" /><Key frame="27" value="0.1816" /><Key frame="36" value="0.1816" /><Key frame="45" value="0.1816" /><Key frame="54" value="0.1816" /><Key frame="63" value="0.1816" /><Key frame="72" value="0.1816" /><Key frame="81" value="0.1816" /><Key frame="84" value="0.1816" /><Key frame="101" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="110.909" /><Key frame="18" value="110.909" /><Key frame="27" value="73.0686" /><Key frame="36" value="93.8625" /><Key frame="45" value="110.909" /><Key frame="54" value="90.0998" /><Key frame="63" value="73.0686" /><Key frame="72" value="93.8504" /><Key frame="81" value="110.909" /><Key frame="84" value="110.909" /><Key frame="101" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-12.2847" /><Key frame="18" value="-12.2847" /><Key frame="27" value="-9.8" /><Key frame="36" value="-11.2153" /><Key frame="45" value="-12.2847" /><Key frame="54" value="-10.9183" /><Key frame="63" value="-9.8" /><Key frame="72" value="-11.2505" /><Key frame="81" value="-12.2847" /><Key frame="84" value="-12.2847" /><Key frame="101" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="-2.72224" /><Key frame="18" value="-2.72224" /><Key frame="27" value="17.488" /><Key frame="36" value="1.75551" /><Key frame="45" value="-2.72224" /><Key frame="54" value="8.3919" /><Key frame="63" value="17.488" /><Key frame="72" value="6.37386" /><Key frame="81" value="-2.72224" /><Key frame="84" value="-2.72224" /><Key frame="101" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_両手ウッス腰へ" id="14" localization="8" tooltip="Enter tooltip here" x="891" y="102"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="59" size="59"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-84.73" /><Key frame="27" value="-84.6388" /><Key frame="50" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="-8.96255" /><Key frame="27" value="-6.20701" /><Key frame="50" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0.1552" /><Key frame="27" value="0" /><Key frame="50" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="75.9409" /><Key frame="27" value="81.2851" /><Key frame="50" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="68.9" /><Key frame="27" value="52" /><Key frame="50" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-87.8893" /><Key frame="27" value="-88.6804" /><Key frame="50" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="84.73" /><Key frame="27" value="84.6388" /><Key frame="50" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="8.96255" /><Key frame="27" value="6.20701" /><Key frame="50" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="0.1552" /><Key frame="27" value="0" /><Key frame="50" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="75.9409" /><Key frame="27" value="81.2851" /><Key frame="50" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-68.9" /><Key frame="27" value="-52" /><Key frame="50" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="87.8893" /><Key frame="27" value="88.6804" /><Key frame="50" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_お辞儀" id="12" localization="8" tooltip="Enter tooltip here" x="1025" y="102"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="70" size="70"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="20" /><Key frame="30" value="20" /><Key frame="55" value="-11.5137" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="0" /><Key frame="30" value="0" /><Key frame="55" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-10" /><Key frame="30" value="-10" /><Key frame="55" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="55" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="55" value="-4.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-23.3816" /><Key frame="30" value="-23.3816" /><Key frame="55" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-69.4321" /><Key frame="30" value="-69.4321" /><Key frame="55" value="-6.32813" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="0.2984" /><Key frame="30" value="0.2984" /><Key frame="55" value="0.0650264" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="99.0564" /><Key frame="30" value="99.0564" /><Key frame="55" value="81.6504" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="12.8346" /><Key frame="30" value="12.8346" /><Key frame="55" value="51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-5.18321" /><Key frame="30" value="-5.18321" /><Key frame="55" value="-86.8394" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="23.3816" /><Key frame="30" value="23.3816" /><Key frame="55" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="69.4321" /><Key frame="30" value="69.4321" /><Key frame="55" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0.2984" /><Key frame="30" value="0.2984" /><Key frame="55" value="0.0659051" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="99.0564" /><Key frame="30" value="99.0564" /><Key frame="55" value="81.2988" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-12.8346" /><Key frame="30" value="-12.8346" /><Key frame="55" value="-52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="5.18321" /><Key frame="30" value="5.18321" /><Key frame="55" value="87.0983" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="parserData" id="6" localization="8" tooltip="" x="218" y="28"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        #self.onStopped() #activate the output of the box
        self.logger.info("-----> onStart : " + str(p))
        data = {}
        try:
            data = json.loads(p)
        except Exception as e:
            self.logger.info('-----> Error')
            return

        self.logger.info("onInput_onStart : " + str(p))

        if("MotionId" not in data or "Speech" not in data):
            return

        motionId = int(data["MotionId"])
        speech = str(data["Speech"].encode("utf-8"))

        self.logger.info("MotionId : " + str(motionId))
        self.logger.info("MotionId : " + str(speech))

        self.playMotion(motionId)
        self.playSpeech(speech)

        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box


    def convertToCorrectType(self, value):
        try:
            value = float(value)
            intValue = int(value)
            if( value == intValue ):
                value = intValue
        except:
            value = str(value)
        return value]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="playSpeech" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="playMotion" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="n_見渡す" id="22" localization="8" tooltip="Enter tooltip here" x="1186" y="103"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="134" size="134"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-21.5" /><Key frame="35" value="-21.5" /><Key frame="90" value="-21.5" /><Key frame="115" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="-4.70003e-21" /><Key frame="35" value="-4.70003e-21" /><Key frame="50" value="35" /><Key frame="80" value="-35" /><Key frame="90" value="-35" /><Key frame="115" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-10" /><Key frame="35" value="-10" /><Key frame="90" value="-10" /><Key frame="115" value="-0.215502" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="115" value="1.27266e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="115" value="-4.23162" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_眺める" id="54" localization="8" tooltip="Enter tooltip here" x="1319" y="102"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="131" size="131"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-25" /><Key frame="40" value="-25" /><Key frame="48" value="-11" /><Key frame="56" value="-25" /><Key frame="66" value="-25" /><Key frame="100" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="0" /><Key frame="40" value="0" /><Key frame="48" value="0" /><Key frame="56" value="0" /><Key frame="66" value="0" /><Key frame="100" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="88.5" /><Key frame="66" value="88.5" /><Key frame="100" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="9.13833" /><Key frame="66" value="9.13833" /><Key frame="100" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="66" value="1" /><Key frame="100" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="-66.5" /><Key frame="66" value="-66.5" /><Key frame="100" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-51.9586" /><Key frame="66" value="-51.9586" /><Key frame="82" value="-59.3712" /><Key frame="100" value="-52" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-6.25104" ordinateParam="-3.86921" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="87.4499" /><Key frame="66" value="87.4499" /><Key frame="100" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_胸に手(開く）" id="2" localization="8" tooltip="Enter tooltip here" x="1480" y="103"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="80" size="80"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="16" value="68.9" /><Key frame="27" value="76.7" /><Key frame="50" value="76.7" /><Key frame="64" value="79.4531" /><Key frame="80" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="16" value="39.2" /><Key frame="27" value="12.4029" /><Key frame="50" value="12.4029" /><Key frame="64" value="9.58008" /><Key frame="80" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="16" value="0" /><Key frame="27" value="0.9" /><Key frame="50" value="0.9" /><Key frame="64" value="0.033392" /><Key frame="80" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="16" value="33.6" /><Key frame="27" value="-6.4" /><Key frame="50" value="-6.4" /><Key frame="64" value="33.0469" /><Key frame="80" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="16" value="-37.5" /><Key frame="27" value="-9.1734" /><Key frame="50" value="-9.1734" /><Key frame="64" value="-48.7793" /><Key frame="80" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="27" value="87.0104" /><Key frame="50" value="87.0104" /><Key frame="64" value="87.7135" /><Key frame="80" value="88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="64" value="-29.8828" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="64" value="-70.3125" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="64" value="0.589631" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="64" value="89.2969" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="64" value="8.08593" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="64" value="-0.529749" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_拍手" id="67" localization="8" tooltip="Enter tooltip here" x="1636" y="101"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="148" size="148"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="17" value="-50.7129" /><Key frame="22" value="-42.8906" /><Key frame="28" value="-38.9" /><Key frame="34" value="-54.6" /><Key frame="40" value="-38.9" /><Key frame="43" value="-54.6" /><Key frame="46" value="-38.9" /><Key frame="49" value="-54.6" /><Key frame="52" value="-38.9" /><Key frame="55" value="-54.6" /><Key frame="58" value="-38.9" /><Key frame="61" value="-54.6" /><Key frame="64" value="-38.9" /><Key frame="67" value="-54.6" /><Key frame="70" value="-38.9" /><Key frame="73" value="-54.6" /><Key frame="76" value="-38.9" /><Key frame="79" value="-54.6" /><Key frame="82" value="-38.9" /><Key frame="85" value="-54.6" /><Key frame="88" value="-38.9" /><Key frame="91" value="-54.6" /><Key frame="94" value="-38.9" /><Key frame="97" value="-54.6" /><Key frame="100" value="-38.9" /><Key frame="103" value="-54.6" /><Key frame="106" value="-38.9" /><Key frame="109" value="-54.6" /><Key frame="112" value="-38.9" /><Key frame="115" value="-54.6" /><Key frame="116" value="-54.6" /><Key frame="128" value="-67.0605" /><Key frame="143" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="17" value="-22.5879" /><Key frame="22" value="-28.0371" /><Key frame="28" value="-33.5" /><Key frame="34" value="-35.4" /><Key frame="40" value="-33.5" /><Key frame="43" value="-35.4" /><Key frame="46" value="-33.5" /><Key frame="49" value="-35.4" /><Key frame="52" value="-33.5" /><Key frame="55" value="-35.4" /><Key frame="58" value="-33.5" /><Key frame="61" value="-35.4" /><Key frame="64" value="-33.5" /><Key frame="67" value="-35.4" /><Key frame="70" value="-33.5" /><Key frame="73" value="-35.4" /><Key frame="76" value="-33.5" /><Key frame="79" value="-35.4" /><Key frame="82" value="-33.5" /><Key frame="85" value="-35.4" /><Key frame="88" value="-33.5" /><Key frame="91" value="-35.4" /><Key frame="94" value="-33.5" /><Key frame="97" value="-35.4" /><Key frame="100" value="-33.5" /><Key frame="103" value="-35.4" /><Key frame="106" value="-33.5" /><Key frame="109" value="-35.4" /><Key frame="112" value="-33.5" /><Key frame="115" value="-35.4" /><Key frame="116" value="-35.4" /><Key frame="128" value="-23.291" /><Key frame="143" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="17" value="0.72935" /><Key frame="22" value="0.891916" /><Key frame="28" value="1" /><Key frame="34" value="1" /><Key frame="40" value="1" /><Key frame="43" value="1" /><Key frame="46" value="1" /><Key frame="49" value="1" /><Key frame="52" value="1" /><Key frame="55" value="1" /><Key frame="58" value="1" /><Key frame="61" value="1" /><Key frame="64" value="1" /><Key frame="67" value="1" /><Key frame="70" value="1" /><Key frame="73" value="1" /><Key frame="76" value="1" /><Key frame="79" value="1" /><Key frame="82" value="1" /><Key frame="85" value="1" /><Key frame="88" value="1" /><Key frame="91" value="1" /><Key frame="94" value="1" /><Key frame="97" value="1" /><Key frame="100" value="1" /><Key frame="103" value="1" /><Key frame="106" value="1" /><Key frame="109" value="1" /><Key frame="112" value="1" /><Key frame="115" value="1" /><Key frame="116" value="1" /><Key frame="128" value="0.580844" /><Key frame="143" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="17" value="35.4199" /><Key frame="22" value="22.4121" /><Key frame="28" value="12.2" /><Key frame="34" value="10.7" /><Key frame="40" value="12.2" /><Key frame="43" value="10.7" /><Key frame="46" value="12.2" /><Key frame="49" value="10.7" /><Key frame="52" value="12.2" /><Key frame="55" value="10.7" /><Key frame="58" value="12.2" /><Key frame="61" value="10.7" /><Key frame="64" value="12.2" /><Key frame="67" value="10.7" /><Key frame="70" value="12.2" /><Key frame="73" value="10.7" /><Key frame="76" value="12.2" /><Key frame="79" value="10.7" /><Key frame="82" value="12.2" /><Key frame="85" value="10.7" /><Key frame="88" value="12.2" /><Key frame="91" value="10.7" /><Key frame="94" value="12.2" /><Key frame="97" value="10.7" /><Key frame="100" value="12.2" /><Key frame="103" value="10.7" /><Key frame="106" value="12.2" /><Key frame="109" value="10.7" /><Key frame="112" value="12.2" /><Key frame="115" value="10.7" /><Key frame="116" value="10.7" /><Key frame="128" value="40.0781" /><Key frame="143" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="17" value="29.3555" /><Key frame="22" value="17.8431" /><Key frame="28" value="0.5" /><Key frame="34" value="0.5" /><Key frame="40" value="0.5" /><Key frame="43" value="0.5" /><Key frame="46" value="0.5" /><Key frame="49" value="0.5" /><Key frame="52" value="0.5" /><Key frame="55" value="0.5" /><Key frame="58" value="0.5" /><Key frame="61" value="0.5" /><Key frame="64" value="0.5" /><Key frame="67" value="0.5" /><Key frame="70" value="0.5" /><Key frame="73" value="0.5" /><Key frame="76" value="0.5" /><Key frame="79" value="0.5" /><Key frame="82" value="0.5" /><Key frame="85" value="0.5" /><Key frame="88" value="0.5" /><Key frame="91" value="0.5" /><Key frame="94" value="0.5" /><Key frame="97" value="0.5" /><Key frame="100" value="0.5" /><Key frame="103" value="0.5" /><Key frame="106" value="0.5" /><Key frame="109" value="0.5" /><Key frame="112" value="0.5" /><Key frame="115" value="0.5" /><Key frame="116" value="0.5" /><Key frame="128" value="36.246" /><Key frame="143" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="17" value="-100.463" /><Key frame="22" value="-101.693" /><Key frame="28" value="-104.5" /><Key frame="34" value="-104.5" /><Key frame="40" value="-104.5" /><Key frame="43" value="-104.5" /><Key frame="46" value="-104.5" /><Key frame="49" value="-104.5" /><Key frame="52" value="-104.5" /><Key frame="55" value="-104.5" /><Key frame="58" value="-104.5" /><Key frame="61" value="-104.5" /><Key frame="64" value="-104.5" /><Key frame="67" value="-104.5" /><Key frame="70" value="-104.5" /><Key frame="73" value="-104.5" /><Key frame="76" value="-104.5" /><Key frame="79" value="-104.5" /><Key frame="82" value="-104.5" /><Key frame="85" value="-104.5" /><Key frame="88" value="-104.5" /><Key frame="91" value="-104.5" /><Key frame="94" value="-104.5" /><Key frame="97" value="-104.5" /><Key frame="100" value="-104.5" /><Key frame="103" value="-104.5" /><Key frame="106" value="-104.5" /><Key frame="109" value="-104.5" /><Key frame="112" value="-104.5" /><Key frame="115" value="-104.5" /><Key frame="116" value="-104.5" /><Key frame="128" value="-100.814" /><Key frame="143" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="17" value="78.8379" /><Key frame="28" value="73.1" /><Key frame="34" value="63.2" /><Key frame="40" value="73.1" /><Key frame="43" value="63.2" /><Key frame="46" value="73.1" /><Key frame="49" value="63.2" /><Key frame="52" value="73.1" /><Key frame="55" value="63.2" /><Key frame="58" value="73.1" /><Key frame="61" value="63.2" /><Key frame="64" value="73.1" /><Key frame="67" value="63.2" /><Key frame="70" value="73.1" /><Key frame="73" value="63.2" /><Key frame="76" value="73.1" /><Key frame="79" value="63.2" /><Key frame="82" value="73.1" /><Key frame="85" value="63.2" /><Key frame="88" value="73.1" /><Key frame="91" value="63.2" /><Key frame="94" value="73.1" /><Key frame="97" value="63.2" /><Key frame="100" value="73.1" /><Key frame="103" value="63.2" /><Key frame="106" value="73.1" /><Key frame="109" value="63.2" /><Key frame="112" value="73.1" /><Key frame="115" value="63.2" /><Key frame="116" value="63.2" /><Key frame="128" value="71.2793" /><Key frame="143" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="17" value="42.0117" /><Key frame="28" value="54.5" /><Key frame="34" value="48.8" /><Key frame="40" value="54.5" /><Key frame="43" value="48.8" /><Key frame="46" value="54.5" /><Key frame="49" value="48.8" /><Key frame="52" value="54.5" /><Key frame="55" value="48.8" /><Key frame="58" value="54.5" /><Key frame="61" value="48.8" /><Key frame="64" value="54.5" /><Key frame="67" value="48.8" /><Key frame="70" value="54.5" /><Key frame="73" value="48.8" /><Key frame="76" value="54.5" /><Key frame="79" value="48.8" /><Key frame="82" value="54.5" /><Key frame="85" value="48.8" /><Key frame="88" value="54.5" /><Key frame="91" value="48.8" /><Key frame="94" value="54.5" /><Key frame="97" value="48.8" /><Key frame="100" value="54.5" /><Key frame="103" value="48.8" /><Key frame="106" value="54.5" /><Key frame="109" value="48.8" /><Key frame="112" value="54.5" /><Key frame="115" value="48.8" /><Key frame="116" value="48.8" /><Key frame="128" value="31.4649" /><Key frame="143" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="17" value="0.725835" /><Key frame="28" value="1" /><Key frame="34" value="1" /><Key frame="40" value="1" /><Key frame="43" value="1" /><Key frame="46" value="1" /><Key frame="49" value="1" /><Key frame="52" value="1" /><Key frame="55" value="1" /><Key frame="58" value="1" /><Key frame="61" value="1" /><Key frame="64" value="1" /><Key frame="67" value="1" /><Key frame="70" value="1" /><Key frame="73" value="1" /><Key frame="76" value="1" /><Key frame="79" value="1" /><Key frame="82" value="1" /><Key frame="85" value="1" /><Key frame="88" value="1" /><Key frame="91" value="1" /><Key frame="94" value="1" /><Key frame="97" value="1" /><Key frame="100" value="1" /><Key frame="103" value="1" /><Key frame="106" value="1" /><Key frame="109" value="1" /><Key frame="112" value="1" /><Key frame="115" value="1" /><Key frame="116" value="1" /><Key frame="128" value="0.574692" /><Key frame="143" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="17" value="29.0039" /><Key frame="28" value="10.7" /><Key frame="34" value="13.6" /><Key frame="40" value="10.7" /><Key frame="43" value="13.6" /><Key frame="46" value="10.7" /><Key frame="49" value="13.6" /><Key frame="52" value="10.7" /><Key frame="55" value="13.6" /><Key frame="58" value="10.7" /><Key frame="61" value="13.6" /><Key frame="64" value="10.7" /><Key frame="67" value="13.6" /><Key frame="70" value="10.7" /><Key frame="73" value="13.6" /><Key frame="76" value="10.7" /><Key frame="79" value="13.6" /><Key frame="82" value="10.7" /><Key frame="85" value="13.6" /><Key frame="88" value="10.7" /><Key frame="91" value="13.6" /><Key frame="94" value="10.7" /><Key frame="97" value="13.6" /><Key frame="100" value="10.7" /><Key frame="103" value="13.6" /><Key frame="106" value="10.7" /><Key frame="109" value="13.6" /><Key frame="112" value="10.7" /><Key frame="115" value="13.6" /><Key frame="116" value="13.6" /><Key frame="128" value="41.3965" /><Key frame="143" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="17" value="-44.8562" /><Key frame="28" value="-7.60004" /><Key frame="34" value="-0.5" /><Key frame="40" value="-7.60004" /><Key frame="43" value="-0.5" /><Key frame="46" value="-7.60004" /><Key frame="49" value="-0.5" /><Key frame="52" value="-7.60004" /><Key frame="55" value="-0.5" /><Key frame="58" value="-7.60004" /><Key frame="61" value="-0.5" /><Key frame="64" value="-7.60004" /><Key frame="67" value="-0.5" /><Key frame="70" value="-7.60004" /><Key frame="73" value="-0.5" /><Key frame="76" value="-7.60004" /><Key frame="79" value="-0.5" /><Key frame="82" value="-7.60004" /><Key frame="85" value="-0.5" /><Key frame="88" value="-7.60004" /><Key frame="91" value="-0.5" /><Key frame="94" value="-7.60004" /><Key frame="97" value="-0.5" /><Key frame="100" value="-7.60004" /><Key frame="103" value="-0.5" /><Key frame="106" value="-7.60004" /><Key frame="109" value="-0.5" /><Key frame="112" value="-7.60004" /><Key frame="115" value="-0.5" /><Key frame="116" value="-0.5" /><Key frame="128" value="-38.3685" /><Key frame="143" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="17" value="18.8943" /><Key frame="28" value="-22.6" /><Key frame="34" value="-27.6" /><Key frame="40" value="-22.6" /><Key frame="43" value="-27.6" /><Key frame="46" value="-22.6" /><Key frame="49" value="-27.6" /><Key frame="52" value="-22.6" /><Key frame="55" value="-27.6" /><Key frame="58" value="-22.6" /><Key frame="61" value="-27.6" /><Key frame="64" value="-22.6" /><Key frame="67" value="-27.6" /><Key frame="70" value="-22.6" /><Key frame="73" value="-27.6" /><Key frame="76" value="-22.6" /><Key frame="79" value="-27.6" /><Key frame="82" value="-22.6" /><Key frame="85" value="-27.6" /><Key frame="88" value="-22.6" /><Key frame="91" value="-27.6" /><Key frame="94" value="-22.6" /><Key frame="97" value="-27.6" /><Key frame="100" value="-22.6" /><Key frame="103" value="-27.6" /><Key frame="106" value="-22.6" /><Key frame="109" value="-27.6" /><Key frame="112" value="-22.6" /><Key frame="115" value="-27.6" /><Key frame="116" value="-27.6" /><Key frame="128" value="18.4549" /><Key frame="143" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_店員さ～ん！" id="207" localization="8" tooltip="Enter tooltip here" x="1768" y="100"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="97" size="97"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-25" /><Key frame="67" value="-25" /><Key frame="97" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="90" /><Key frame="67" value="90" /><Key frame="97" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="82" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="82" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="82" value="0.0325131" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="82" value="81.2988" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="82" value="51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="82" value="-87.2789" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="60.8" /><Key frame="27" value="71.2" /><Key frame="40" value="71.2" /><Key frame="48" value="71.2" /><Key frame="56" value="71.2" /><Key frame="67" value="71.2" /><Key frame="97" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="14" value="85.1647" /><Key frame="27" value="102.3" /><Key frame="40" value="102.3" /><Key frame="48" value="102.3" /><Key frame="56" value="102.3" /><Key frame="67" value="102.3" /><Key frame="97" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="14" value="0.65" /><Key frame="27" value="1" /><Key frame="40" value="1" /><Key frame="48" value="1" /><Key frame="56" value="1" /><Key frame="67" value="1" /><Key frame="97" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="54.4074" /><Key frame="27" value="2.1" /><Key frame="40" value="2.1" /><Key frame="48" value="2.1" /><Key frame="56" value="2.1" /><Key frame="67" value="2.1" /><Key frame="97" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="14" value="-3.8" /><Key frame="27" value="-15.8" /><Key frame="40" value="-15.8" /><Key frame="48" value="-15.8" /><Key frame="56" value="-15.8" /><Key frame="67" value="-15.8" /><Key frame="82" value="-53.9795" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-5.22552" ordinateParam="4.44082" /><Tangent side="right" interpType="bezier" abscissaParam="5.22552" ordinateParam="-4.44082" /></Key><Key frame="97" value="-52" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-5" ordinateParam="-2.39121" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="14" value="4.74374" /><Key frame="27" value="5.09532" /><Key frame="40" value="5.09532" /><Key frame="48" value="5.09532" /><Key frame="56" value="5.09532" /><Key frame="67" value="5.09532" /><Key frame="97" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_オッス！" id="81" localization="8" tooltip="Enter tooltip here" x="1925" y="104"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="83"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="36" value="8.8" /><Key frame="41" value="-10.3" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="41" value="-0.188581" /><Key frame="53" value="-0.188581" /><Key frame="83" value="-3.4377" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="41" value="0" /><Key frame="53" value="0" /><Key frame="83" value="0.000171328" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="41" value="-4.20201" /><Key frame="53" value="-4.20201" /><Key frame="83" value="-2.86475" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="31" value="-82.9674" /><Key frame="36" value="-82.9674" /><Key frame="41" value="-82.9513" /><Key frame="53" value="-82.9513" /><Key frame="83" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="31" value="-7.64898" /><Key frame="36" value="-7.64898" /><Key frame="41" value="-7.51743" /><Key frame="53" value="-7.51743" /><Key frame="83" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="31" value="0.0364" /><Key frame="36" value="0.0364" /><Key frame="41" value="0.0372" /><Key frame="53" value="0.0372" /><Key frame="83" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="31" value="80.4185" /><Key frame="36" value="80.4185" /><Key frame="41" value="81.1619" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="31" value="51.5022" /><Key frame="36" value="51.5022" /><Key frame="41" value="50.0955" /><Key frame="53" value="50.0955" /><Key frame="83" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="31" value="-87.4547" /><Key frame="36" value="-87.4547" /><Key frame="41" value="-87.2769" /><Key frame="53" value="-87.2769" /><Key frame="83" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="31" value="88.5" /><Key frame="36" value="88.5" /><Key frame="41" value="44.2765" /><Key frame="53" value="44.2765" /><Key frame="83" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="31" value="54.5" /><Key frame="36" value="54.5" /><Key frame="41" value="67.432" /><Key frame="53" value="67.432" /><Key frame="83" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="31" value="1" /><Key frame="36" value="1" /><Key frame="41" value="1" /><Key frame="53" value="1" /><Key frame="83" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="31" value="-5" /><Key frame="36" value="-5" /><Key frame="41" value="-23.6058" /><Key frame="53" value="-23.6058" /><Key frame="83" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="14" value="-57.8504" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-5.67244" ordinateParam="-0.687065" /><Tangent side="right" interpType="bezier" abscissaParam="6.88797" ordinateParam="0.834293" /></Key><Key frame="31" value="-21.1" /><Key frame="36" value="-21.1" /><Key frame="41" value="-15.8875" /><Key frame="53" value="-15.8875" /><Key frame="68" value="-47.0791" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-4.77787" ordinateParam="9.05355" /><Tangent side="right" interpType="bezier" abscissaParam="4.77787" ordinateParam="-9.05355" /></Key><Key frame="83" value="-52" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-5.55533" ordinateParam="-3.41415" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="31" value="-12.5" /><Key frame="36" value="-12.5" /><Key frame="41" value="-5.89877" /><Key frame="53" value="-5.89877" /><Key frame="83" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_あせってフリック" id="104" localization="8" tooltip="Enter tooltip here" x="2054" y="106"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="148" size="148"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="15" /><Key frame="29" value="15" /><Key frame="115" value="15" /><Key frame="146" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="0" /><Key frame="29" value="0" /><Key frame="115" value="0" /><Key frame="146" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="115" value="-6.29451e-05" /><Key frame="146" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="115" value="0" /><Key frame="146" value="0.000112737" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="115" value="-3.99988" /><Key frame="146" value="-4" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-89.5" /><Key frame="29" value="-89.5" /><Key frame="46" value="-80" /><Key frame="50" value="-89.5" /><Key frame="54" value="-80" /><Key frame="58" value="-89.5" /><Key frame="62" value="-80" /><Key frame="66" value="-89.5" /><Key frame="70" value="-80" /><Key frame="74" value="-89.5" /><Key frame="78" value="-80" /><Key frame="82" value="-89.5" /><Key frame="86" value="-80" /><Key frame="90" value="-89.5" /><Key frame="94" value="-80" /><Key frame="98" value="-89.5" /><Key frame="102" value="-80" /><Key frame="106" value="-89.5" /><Key frame="115" value="-89.5" /><Key frame="146" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="2.9" /><Key frame="29" value="2.9" /><Key frame="46" value="-5.53478" /><Key frame="50" value="-5.53478" /><Key frame="54" value="-5.53478" /><Key frame="58" value="-5.53478" /><Key frame="62" value="-5.53478" /><Key frame="66" value="-5.53478" /><Key frame="70" value="-5.53478" /><Key frame="74" value="-5.53478" /><Key frame="78" value="-5.53478" /><Key frame="82" value="-5.53478" /><Key frame="86" value="-5.53478" /><Key frame="90" value="-5.53478" /><Key frame="94" value="-5.53478" /><Key frame="98" value="-5.53478" /><Key frame="102" value="-5.53478" /><Key frame="106" value="-5.53478" /><Key frame="115" value="-5.53478" /><Key frame="146" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="1" /><Key frame="29" value="1" /><Key frame="46" value="0.9" /><Key frame="50" value="0.1512" /><Key frame="54" value="0.9" /><Key frame="58" value="0.1512" /><Key frame="62" value="0.9" /><Key frame="66" value="0.1512" /><Key frame="70" value="0.9" /><Key frame="74" value="0.1512" /><Key frame="78" value="0.9" /><Key frame="82" value="0.1512" /><Key frame="86" value="0.9" /><Key frame="90" value="0.1512" /><Key frame="94" value="0.9" /><Key frame="98" value="0.1512" /><Key frame="102" value="0.9" /><Key frame="106" value="0.1512" /><Key frame="115" value="0.1512" /><Key frame="146" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="29.3" /><Key frame="29" value="29.3" /><Key frame="46" value="-80.9" /><Key frame="50" value="-80.9" /><Key frame="54" value="-80.9" /><Key frame="58" value="-80.9" /><Key frame="62" value="-80.9" /><Key frame="66" value="-80.9" /><Key frame="70" value="-80.9" /><Key frame="74" value="-80.9" /><Key frame="78" value="-80.9" /><Key frame="82" value="-80.9" /><Key frame="86" value="-80.9" /><Key frame="90" value="-80.9" /><Key frame="94" value="-80.9" /><Key frame="98" value="-80.9" /><Key frame="102" value="-80.9" /><Key frame="106" value="-80.9" /><Key frame="115" value="-80.9" /><Key frame="146" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="53.2" /><Key frame="29" value="53.2" /><Key frame="46" value="47.0125" /><Key frame="50" value="47.0125" /><Key frame="54" value="47.0125" /><Key frame="58" value="47.0125" /><Key frame="62" value="47.0125" /><Key frame="66" value="47.0125" /><Key frame="70" value="47.0125" /><Key frame="74" value="47.0125" /><Key frame="78" value="47.0125" /><Key frame="82" value="47.0125" /><Key frame="86" value="47.0125" /><Key frame="90" value="47.0125" /><Key frame="94" value="47.0125" /><Key frame="98" value="47.0125" /><Key frame="102" value="47.0125" /><Key frame="106" value="47.0125" /><Key frame="115" value="47.0125" /><Key frame="146" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-104.5" /><Key frame="29" value="-104.5" /><Key frame="46" value="-88.6804" /><Key frame="50" value="-88.6804" /><Key frame="54" value="-88.6804" /><Key frame="58" value="-88.6804" /><Key frame="62" value="-88.6804" /><Key frame="66" value="-88.6804" /><Key frame="70" value="-88.6804" /><Key frame="74" value="-88.6804" /><Key frame="78" value="-88.6804" /><Key frame="82" value="-88.6804" /><Key frame="86" value="-88.6804" /><Key frame="90" value="-88.6804" /><Key frame="94" value="-88.6804" /><Key frame="98" value="-88.6804" /><Key frame="102" value="-88.6804" /><Key frame="106" value="-88.6804" /><Key frame="115" value="-88.6804" /><Key frame="146" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="89.5" /><Key frame="29" value="89.5" /><Key frame="46" value="89.5" /><Key frame="50" value="89.209" /><Key frame="54" value="89.5" /><Key frame="58" value="89.209" /><Key frame="62" value="89.5" /><Key frame="66" value="89.209" /><Key frame="70" value="89.5" /><Key frame="74" value="89.209" /><Key frame="78" value="89.5" /><Key frame="82" value="89.209" /><Key frame="86" value="89.5" /><Key frame="90" value="89.209" /><Key frame="94" value="89.5" /><Key frame="98" value="89.209" /><Key frame="102" value="89.5" /><Key frame="106" value="89.209" /><Key frame="115" value="89.209" /><Key frame="128" value="80.2" /><Key frame="146" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="-2.9" /><Key frame="29" value="-2.9" /><Key frame="46" value="8.6" /><Key frame="50" value="16.4356" /><Key frame="54" value="8.6" /><Key frame="58" value="16.4356" /><Key frame="62" value="8.6" /><Key frame="66" value="16.4356" /><Key frame="70" value="8.6" /><Key frame="74" value="16.4356" /><Key frame="78" value="8.6" /><Key frame="82" value="16.4356" /><Key frame="86" value="8.6" /><Key frame="90" value="16.4356" /><Key frame="94" value="8.6" /><Key frame="98" value="16.4356" /><Key frame="102" value="8.6" /><Key frame="106" value="16.4356" /><Key frame="115" value="16.4356" /><Key frame="146" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="1" /><Key frame="29" value="1" /><Key frame="46" value="1" /><Key frame="50" value="0.0527241" /><Key frame="54" value="1" /><Key frame="58" value="0.0527241" /><Key frame="62" value="1" /><Key frame="66" value="0.0527241" /><Key frame="70" value="1" /><Key frame="74" value="0.0527241" /><Key frame="78" value="1" /><Key frame="82" value="0.0527241" /><Key frame="86" value="1" /><Key frame="90" value="0.0527241" /><Key frame="94" value="1" /><Key frame="98" value="0.0527241" /><Key frame="102" value="1" /><Key frame="106" value="0.0527241" /><Key frame="115" value="0.0527241" /><Key frame="146" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="29.3" /><Key frame="29" value="29.3" /><Key frame="40" value="-0.7" /><Key frame="46" value="5" /><Key frame="50" value="11.25" /><Key frame="54" value="5" /><Key frame="58" value="11.25" /><Key frame="62" value="5" /><Key frame="66" value="11.25" /><Key frame="70" value="5" /><Key frame="74" value="11.25" /><Key frame="78" value="5" /><Key frame="82" value="11.25" /><Key frame="86" value="5" /><Key frame="90" value="11.25" /><Key frame="94" value="5" /><Key frame="98" value="11.25" /><Key frame="102" value="5" /><Key frame="106" value="11.25" /><Key frame="115" value="11.25" /><Key frame="146" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-53.2" /><Key frame="29" value="-53.2" /><Key frame="40" value="-37.4" /><Key frame="46" value="-31.8" /><Key frame="50" value="-43.418" /><Key frame="54" value="-31.8" /><Key frame="58" value="-43.418" /><Key frame="62" value="-31.8" /><Key frame="66" value="-43.418" /><Key frame="70" value="-31.8" /><Key frame="74" value="-43.418" /><Key frame="78" value="-31.8" /><Key frame="82" value="-43.418" /><Key frame="86" value="-31.8" /><Key frame="90" value="-43.418" /><Key frame="94" value="-31.8" /><Key frame="98" value="-43.418" /><Key frame="102" value="-31.8" /><Key frame="106" value="-43.418" /><Key frame="115" value="-43.418" /><Key frame="146" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="104.5" /><Key frame="29" value="104.5" /><Key frame="46" value="66" /><Key frame="50" value="71.6294" /><Key frame="54" value="66" /><Key frame="58" value="71.6294" /><Key frame="62" value="66" /><Key frame="66" value="71.6294" /><Key frame="70" value="66" /><Key frame="74" value="71.6294" /><Key frame="78" value="66" /><Key frame="82" value="71.6294" /><Key frame="86" value="66" /><Key frame="90" value="71.6294" /><Key frame="94" value="66" /><Key frame="98" value="71.6294" /><Key frame="102" value="66" /><Key frame="106" value="71.6294" /><Key frame="115" value="71.6294" /><Key frame="146" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_顔さし" id="25" localization="8" tooltip="Enter tooltip here" x="609" y="310"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="106" size="106"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="38" value="-89.5" /><Key frame="63" value="-89.5" /><Key frame="82" value="-81.7" /><Key frame="103" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="38" value="1" /><Key frame="63" value="1" /><Key frame="103" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="38" value="1" /><Key frame="63" value="1" /><Key frame="103" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="38" value="-65.1" /><Key frame="63" value="-65.1" /><Key frame="103" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="38" value="47.5" /><Key frame="63" value="47.5" /><Key frame="103" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="38" value="-32.6" /><Key frame="63" value="-32.6" /><Key frame="103" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="38" value="89.5" /><Key frame="63" value="89.5" /><Key frame="82" value="81.7" /><Key frame="103" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="38" value="-1" /><Key frame="63" value="-1" /><Key frame="103" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="38" value="1" /><Key frame="63" value="1" /><Key frame="103" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="38" value="-65.1" /><Key frame="63" value="-65.1" /><Key frame="103" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="38" value="-47.5" /><Key frame="63" value="-47.5" /><Key frame="103" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="38" value="32.6" /><Key frame="63" value="32.6" /><Key frame="103" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_わかりましたね？" id="8" localization="8" tooltip="Enter tooltip here" x="755" y="308"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="125" size="125"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="38" value="-11.5" /><Key frame="46" value="-11.5" /><Key frame="53" value="2.00005" /><Key frame="60" value="-11.5" /><Key frame="67" value="2.00005" /><Key frame="75" value="-11.5" /><Key frame="86" value="10" /><Key frame="96" value="10" /><Key frame="125" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="38" value="-4.16139e-05" /><Key frame="46" value="-4.16139e-05" /><Key frame="53" value="-4.16139e-05" /><Key frame="60" value="-4.16139e-05" /><Key frame="67" value="-4.16139e-05" /><Key frame="75" value="-4.16139e-05" /><Key frame="86" value="-4.16139e-05" /><Key frame="96" value="-4.16139e-05" /><Key frame="125" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-79.1016" /><Key frame="29" value="-71.2" /><Key frame="30" value="-71.2" /><Key frame="37" value="-40" /><Key frame="38" value="-40" /><Key frame="45" value="-71.2" /><Key frame="52" value="-40" /><Key frame="59" value="-71.2" /><Key frame="66" value="-40" /><Key frame="74" value="-85.2" /><Key frame="85" value="-15.5" /><Key frame="95" value="-15.5" /><Key frame="125" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="-75.9375" /><Key frame="29" value="-102.3" /><Key frame="30" value="-102.3" /><Key frame="37" value="-102.3" /><Key frame="38" value="-102.3" /><Key frame="45" value="-102.3" /><Key frame="52" value="-102.3" /><Key frame="59" value="-102.3" /><Key frame="66" value="-102.3" /><Key frame="74" value="-102.3" /><Key frame="85" value="-102.3" /><Key frame="95" value="-102.3" /><Key frame="125" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0.033392" /><Key frame="29" value="0" /><Key frame="30" value="0" /><Key frame="37" value="1" /><Key frame="38" value="1" /><Key frame="45" value="1" /><Key frame="52" value="1" /><Key frame="59" value="1" /><Key frame="66" value="1" /><Key frame="74" value="1" /><Key frame="85" value="1" /><Key frame="95" value="1" /><Key frame="125" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="23.8184" /><Key frame="29" value="2.10004" /><Key frame="30" value="2.10004" /><Key frame="37" value="2.10004" /><Key frame="38" value="2.10004" /><Key frame="45" value="2.10004" /><Key frame="52" value="2.10004" /><Key frame="59" value="2.10004" /><Key frame="66" value="2.10004" /><Key frame="74" value="20.8" /><Key frame="85" value="2.10004" /><Key frame="95" value="2.10004" /><Key frame="125" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="25.5762" /><Key frame="29" value="15.8" /><Key frame="30" value="15.8" /><Key frame="37" value="15.8" /><Key frame="38" value="15.8" /><Key frame="45" value="15.8" /><Key frame="52" value="15.8" /><Key frame="59" value="15.8" /><Key frame="66" value="15.8" /><Key frame="74" value="15.8" /><Key frame="85" value="15.8" /><Key frame="95" value="15.8" /><Key frame="125" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-27.1609" /><Key frame="29" value="-5.09536" /><Key frame="30" value="-5.09536" /><Key frame="37" value="-5.09536" /><Key frame="38" value="-5.09536" /><Key frame="45" value="-5.09536" /><Key frame="52" value="-5.09536" /><Key frame="59" value="-5.09536" /><Key frame="66" value="-5.09536" /><Key frame="74" value="-5.09536" /><Key frame="85" value="-5.09536" /><Key frame="95" value="-5.09536" /><Key frame="125" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="79.541" /><Key frame="29" value="71.2" /><Key frame="30" value="71.2" /><Key frame="37" value="40" /><Key frame="38" value="40" /><Key frame="45" value="71.2" /><Key frame="52" value="40" /><Key frame="59" value="71.2" /><Key frame="66" value="40" /><Key frame="74" value="85.2" /><Key frame="85" value="15.5" /><Key frame="95" value="15.5" /><Key frame="125" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="75.9375" /><Key frame="29" value="102.3" /><Key frame="30" value="102.3" /><Key frame="37" value="102.3" /><Key frame="38" value="102.3" /><Key frame="45" value="102.3" /><Key frame="52" value="102.3" /><Key frame="59" value="102.3" /><Key frame="66" value="102.3" /><Key frame="74" value="102.3" /><Key frame="85" value="102.3" /><Key frame="95" value="102.3" /><Key frame="125" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="0.033392" /><Key frame="29" value="0" /><Key frame="30" value="0" /><Key frame="37" value="1" /><Key frame="38" value="1" /><Key frame="45" value="1" /><Key frame="52" value="1" /><Key frame="59" value="1" /><Key frame="66" value="1" /><Key frame="74" value="1" /><Key frame="85" value="1" /><Key frame="95" value="1" /><Key frame="125" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="23.8184" /><Key frame="29" value="2.10004" /><Key frame="30" value="2.10004" /><Key frame="37" value="2.10004" /><Key frame="38" value="2.10004" /><Key frame="45" value="2.10004" /><Key frame="52" value="2.10004" /><Key frame="59" value="2.10004" /><Key frame="66" value="2.10004" /><Key frame="74" value="20.8" /><Key frame="85" value="2.10004" /><Key frame="95" value="2.10004" /><Key frame="125" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-25.6641" /><Key frame="29" value="-15.8" /><Key frame="30" value="-15.8" /><Key frame="37" value="-15.8" /><Key frame="38" value="-15.8" /><Key frame="45" value="-15.8" /><Key frame="52" value="-15.8" /><Key frame="59" value="-15.8" /><Key frame="66" value="-15.8" /><Key frame="74" value="-15.8" /><Key frame="85" value="-15.8" /><Key frame="95" value="-15.8" /><Key frame="125" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="26.8046" /><Key frame="29" value="5.09536" /><Key frame="30" value="5.09536" /><Key frame="37" value="5.09536" /><Key frame="38" value="5.09536" /><Key frame="45" value="5.09536" /><Key frame="52" value="5.09536" /><Key frame="59" value="5.09536" /><Key frame="66" value="5.09536" /><Key frame="74" value="5.09536" /><Key frame="85" value="5.09536" /><Key frame="95" value="5.09536" /><Key frame="125" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_右も左も" id="163" localization="8" tooltip="Enter tooltip here" x="898" y="308"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="30" start_frame="1" end_frame="166" size="166"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="36" value="-11.8652" /><Key frame="68" value="-11.8652" /><Key frame="87" value="-11.8652" /><Key frame="105" value="-11.8652" /><Key frame="138" value="-11.8652" /><Key frame="146" value="-11" /><Key frame="156" value="2" /><Key frame="166" value="-11" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="36" value="-25" /><Key frame="68" value="0" /><Key frame="87" value="0" /><Key frame="105" value="25" /><Key frame="138" value="0" /><Key frame="146" value="0" /><Key frame="156" value="0" /><Key frame="166" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="69" value="-84.6388" /><Key frame="87" value="-83.8" /><Key frame="105" value="-0.5" /><Key frame="138" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="69" value="-6.20701" /><Key frame="87" value="-28.8281" /><Key frame="105" value="-48.8" /><Key frame="138" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="69" value="0" /><Key frame="87" value="0" /><Key frame="105" value="1" /><Key frame="138" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="69" value="81.2851" /><Key frame="87" value="15" /><Key frame="105" value="-26.5" /><Key frame="138" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="69" value="52" /><Key frame="87" value="52" /><Key frame="105" value="33.3" /><Key frame="138" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="69" value="-88.6804" /><Key frame="87" value="-88.0651" /><Key frame="105" value="-88.6804" /><Key frame="138" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="18" value="83.8" /><Key frame="36" value="0.5" /><Key frame="68" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="28.8281" /><Key frame="36" value="48.8" /><Key frame="68" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="18" value="0" /><Key frame="36" value="1" /><Key frame="68" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="18" value="15" /><Key frame="36" value="-26.5" /><Key frame="68" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="18" value="-52" /><Key frame="36" value="-48.9" /><Key frame="68" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="88.0651" /><Key frame="36" value="88.6804" /><Key frame="68" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_説得" id="160" localization="8" tooltip="Enter tooltip here" x="1039" y="302"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="110" size="110"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="51" value="-11.5" /><Key frame="58" value="-16" /><Key frame="66" value="10" /><Key frame="78" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="51" value="-4.16139e-05" /><Key frame="58" value="-4.16139e-05" /><Key frame="66" value="0" /><Key frame="78" value="-2.95486e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="13" value="-68.1" /><Key frame="30" value="-71.2" /><Key frame="38" value="-45" /><Key frame="44" value="-71.2" /><Key frame="51" value="-45" /><Key frame="58" value="-76" /><Key frame="66" value="-40" /><Key frame="78" value="-71.2" /><Key frame="97" value="-74.5" /><Key frame="110" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-102.3" /><Key frame="38" value="-102.3" /><Key frame="44" value="-102.3" /><Key frame="51" value="-102.3" /><Key frame="58" value="-102.3" /><Key frame="66" value="-102.3" /><Key frame="78" value="-102.3" /><Key frame="110" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="38" value="1" /><Key frame="44" value="1" /><Key frame="51" value="1" /><Key frame="58" value="1" /><Key frame="66" value="1" /><Key frame="78" value="1" /><Key frame="110" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="2.10004" /><Key frame="38" value="2.10008" /><Key frame="44" value="2.10004" /><Key frame="51" value="2.10008" /><Key frame="58" value="-4" /><Key frame="66" value="13.4" /><Key frame="78" value="2.10004" /><Key frame="97" value="58" /><Key frame="110" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="15.8" /><Key frame="38" value="15.8" /><Key frame="44" value="15.8" /><Key frame="51" value="15.8" /><Key frame="58" value="15.8" /><Key frame="66" value="15.8" /><Key frame="78" value="15.8" /><Key frame="110" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-5.09536" /><Key frame="38" value="-5.09539" /><Key frame="44" value="-5.09536" /><Key frame="51" value="-5.09539" /><Key frame="58" value="-5.09536" /><Key frame="66" value="-5.09536" /><Key frame="78" value="-5.09536" /><Key frame="110" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="13" value="63.9" /><Key frame="30" value="71.2" /><Key frame="38" value="45" /><Key frame="44" value="71.2" /><Key frame="51" value="45" /><Key frame="58" value="76" /><Key frame="66" value="40" /><Key frame="78" value="71.2" /><Key frame="97" value="74.5" /><Key frame="110" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="102.3" /><Key frame="38" value="102.3" /><Key frame="44" value="102.3" /><Key frame="51" value="102.3" /><Key frame="58" value="102.3" /><Key frame="66" value="102.3" /><Key frame="78" value="102.3" /><Key frame="110" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="38" value="1" /><Key frame="44" value="1" /><Key frame="51" value="1" /><Key frame="58" value="1" /><Key frame="66" value="1" /><Key frame="78" value="1" /><Key frame="110" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="2.1" /><Key frame="38" value="2.10004" /><Key frame="44" value="2.1" /><Key frame="51" value="2.10004" /><Key frame="58" value="-4" /><Key frame="66" value="13.4" /><Key frame="78" value="2.10004" /><Key frame="97" value="58" /><Key frame="110" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-15.8" /><Key frame="38" value="-15.8" /><Key frame="44" value="-15.8" /><Key frame="51" value="-15.8" /><Key frame="58" value="-15.8" /><Key frame="66" value="-15.8" /><Key frame="78" value="-15.8" /><Key frame="110" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="5.0954" /><Key frame="38" value="5.09539" /><Key frame="44" value="5.0954" /><Key frame="51" value="5.09539" /><Key frame="58" value="5.09536" /><Key frame="66" value="5.09536" /><Key frame="78" value="5.09536" /><Key frame="110" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_左側のみなさん" id="143" localization="8" tooltip="Enter tooltip here" x="1187" y="303"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="88" size="88"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-11.5" /><Key frame="25" value="-11.5" /><Key frame="41" value="-25" /><Key frame="48" value="-11.5" /><Key frame="62" value="-11.5" /><Key frame="85" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="35" /><Key frame="25" value="35" /><Key frame="41" value="35" /><Key frame="48" value="35" /><Key frame="62" value="35" /><Key frame="85" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-84.6388" /><Key frame="41" value="-77.4" /><Key frame="47" value="-30.5692" /><Key frame="62" value="-30.5692" /><Key frame="85" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="-6.20701" /><Key frame="41" value="-97.9969" /><Key frame="47" value="-85.2" /><Key frame="62" value="-85.2" /><Key frame="85" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0" /><Key frame="41" value="0.02" /><Key frame="47" value="1" /><Key frame="62" value="1" /><Key frame="85" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="81.2851" /><Key frame="41" value="26.282" /><Key frame="47" value="-0.7" /><Key frame="62" value="-0.7" /><Key frame="85" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="52" /><Key frame="41" value="23.3" /><Key frame="47" value="29.7" /><Key frame="62" value="29.7" /><Key frame="85" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-88.6804" /><Key frame="41" value="-25.3104" /><Key frame="47" value="-41" /><Key frame="62" value="-41" /><Key frame="85" value="-88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_右側のみなさん" id="144" localization="8" tooltip="Enter tooltip here" x="1333" y="302"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="98" size="98"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-11.4592" /><Key frame="25" value="-11.5" /><Key frame="35" value="-11.5" /><Key frame="51" value="-25" /><Key frame="58" value="-11.5" /><Key frame="72" value="-11.5" /><Key frame="95" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="-4.70003e-21" /><Key frame="25" value="-35" /><Key frame="35" value="-35" /><Key frame="51" value="-35" /><Key frame="58" value="-35" /><Key frame="72" value="-35" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="84.6388" /><Key frame="51" value="77.4" /><Key frame="57" value="30.5692" /><Key frame="72" value="30.5692" /><Key frame="95" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="6.20701" /><Key frame="51" value="97.9969" /><Key frame="57" value="85.2" /><Key frame="72" value="85.2" /><Key frame="95" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="0" /><Key frame="51" value="0.02" /><Key frame="57" value="1" /><Key frame="72" value="1" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="81.2851" /><Key frame="51" value="26.282" /><Key frame="57" value="-0.7" /><Key frame="72" value="-0.7" /><Key frame="95" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-52" /><Key frame="51" value="-23.3" /><Key frame="57" value="-29.7" /><Key frame="72" value="-29.7" /><Key frame="95" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="88.6804" /><Key frame="51" value="25.3104" /><Key frame="57" value="41" /><Key frame="72" value="41" /><Key frame="95" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_右向き手招き" id="74" localization="8" tooltip="Enter tooltip here" x="1488" y="305"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="88" size="88"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-9.75839" /><Key frame="57" value="-9.75839" /><Key frame="85" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="-29.3582" /><Key frame="57" value="-29.3582" /><Key frame="85" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="85" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="85" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="85" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="85" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="85" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="85" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="81" /><Key frame="25" value="89.5" /><Key frame="32" value="71" /><Key frame="39" value="88.5" /><Key frame="46" value="71" /><Key frame="50" value="71.5463" /><Key frame="57" value="71.5463" /><Key frame="85" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="100.4" /><Key frame="39" value="100.4" /><Key frame="50" value="99.5789" /><Key frame="57" value="99.5789" /><Key frame="85" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0.99" /><Key frame="32" value="0.3" /><Key frame="39" value="0.99" /><Key frame="46" value="0.3" /><Key frame="50" value="0.3028" /><Key frame="57" value="0.3028" /><Key frame="85" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="16.5" /><Key frame="32" value="16.5" /><Key frame="39" value="16.5" /><Key frame="46" value="16.5" /><Key frame="50" value="19.3386" /><Key frame="57" value="19.3386" /><Key frame="85" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-40.4" /><Key frame="39" value="-40.4" /><Key frame="50" value="-39.7295" /><Key frame="57" value="-39.7295" /><Key frame="85" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="-64.4" /><Key frame="39" value="-64.4" /><Key frame="50" value="-61.8782" /><Key frame="57" value="-61.8782" /><Key frame="85" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_右向き頼む" id="75" localization="8" tooltip="Enter tooltip here" x="1638" y="304"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="105" size="105"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="27" value="-11.5" /><Key frame="35" value="-11.5" /><Key frame="46" value="2" /><Key frame="54" value="-11.5" /><Key frame="72" value="-11.5" /><Key frame="102" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="27" value="-30" /><Key frame="35" value="-30" /><Key frame="46" value="-30" /><Key frame="72" value="-30" /><Key frame="102" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="11" value="74.5" /><Key frame="27" value="85.9" /><Key frame="30" value="85.9" /><Key frame="46" value="0.500077" /><Key frame="52" value="14.7" /><Key frame="72" value="14.7" /><Key frame="102" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="27" value="83.2" /><Key frame="30" value="83.2" /><Key frame="46" value="100.4" /><Key frame="52" value="100.4" /><Key frame="72" value="100.4" /><Key frame="102" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="27" value="0.16" /><Key frame="30" value="0.16" /><Key frame="46" value="1" /><Key frame="52" value="1" /><Key frame="72" value="1" /><Key frame="102" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="-16.5" /><Key frame="30" value="-16.5" /><Key frame="46" value="16.5" /><Key frame="52" value="16.5" /><Key frame="72" value="16.5" /><Key frame="102" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="27" value="-40.4" /><Key frame="30" value="-40.4" /><Key frame="46" value="-40.4" /><Key frame="52" value="-40.4" /><Key frame="72" value="-40.4" /><Key frame="102" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="27" value="52.7" /><Key frame="30" value="52.7" /><Key frame="46" value="70" /><Key frame="52" value="70" /><Key frame="72" value="70" /><Key frame="102" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_やや右！" id="121" localization="8" tooltip="Enter tooltip here" x="1778" y="306"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="73" size="73"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="-20" /><Key frame="40" value="-20" /><Key frame="70" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-26.8" /><Key frame="40" value="-26.8" /><Key frame="70" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-20.1" /><Key frame="40" value="-20.1" /><Key frame="70" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="40" value="1" /><Key frame="70" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="15" /><Key frame="40" value="15" /><Key frame="70" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="17" value="23.5" /><Key frame="30" value="0.5" /><Key frame="40" value="0.5" /><Key frame="70" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-69.4" /><Key frame="40" value="-69.4" /><Key frame="70" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="0.5" /><Key frame="40" value="0.5" /><Key frame="70" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="-25" /><Key frame="40" value="-25" /><Key frame="70" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-14.7" /><Key frame="40" value="-14.7" /><Key frame="70" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="-15.9" /><Key frame="40" value="-15.9" /><Key frame="70" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="70" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="70" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="17" value="0.58" /><Key frame="30" value="1" /><Key frame="40" value="1" /><Key frame="70" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_いいですか？" id="71" localization="8" tooltip="Enter tooltip here" x="1925" y="304"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="116"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="35" value="-11.4592" /><Key frame="49" value="-11.5" /><Key frame="74" value="-11.5" /><Key frame="81" value="-11.5" /><Key frame="116" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="35" value="-1.30797e-07" /><Key frame="49" value="-30" /><Key frame="74" value="30" /><Key frame="81" value="30" /><Key frame="116" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="12" value="-71.7" /><Key frame="30" value="-71.2" /><Key frame="35" value="-71.2" /><Key frame="42" value="-50" /><Key frame="49" value="-71.2" /><Key frame="56" value="-50" /><Key frame="63" value="-71.2" /><Key frame="70" value="-50" /><Key frame="80" value="-50" /><Key frame="96" value="-68.1" /><Key frame="116" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-102.3" /><Key frame="35" value="-102.3" /><Key frame="49" value="-102.3" /><Key frame="63" value="-102.3" /><Key frame="70" value="-102.3" /><Key frame="80" value="-102.3" /><Key frame="116" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="0.02" /><Key frame="35" value="0.02" /><Key frame="42" value="1" /><Key frame="49" value="1" /><Key frame="63" value="1" /><Key frame="70" value="1" /><Key frame="80" value="1" /><Key frame="116" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="2.10004" /><Key frame="35" value="2.10004" /><Key frame="49" value="2.10004" /><Key frame="63" value="2.10004" /><Key frame="70" value="2.10004" /><Key frame="80" value="2.10004" /><Key frame="116" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="15.8" /><Key frame="35" value="15.8" /><Key frame="49" value="15.8" /><Key frame="63" value="15.8" /><Key frame="70" value="15.8" /><Key frame="80" value="15.8" /><Key frame="116" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-5.09536" /><Key frame="35" value="-5.09536" /><Key frame="49" value="-5.09536" /><Key frame="63" value="-5.09536" /><Key frame="70" value="-5.09536" /><Key frame="80" value="-5.09536" /><Key frame="116" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="71.7" /><Key frame="30" value="71.2" /><Key frame="35" value="71.2" /><Key frame="42" value="50" /><Key frame="49" value="71.2" /><Key frame="56" value="50" /><Key frame="63" value="71.2" /><Key frame="70" value="50" /><Key frame="80" value="50" /><Key frame="96" value="68.1" /><Key frame="116" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="102.3" /><Key frame="35" value="102.3" /><Key frame="49" value="102.3" /><Key frame="63" value="102.3" /><Key frame="70" value="102.3" /><Key frame="80" value="102.3" /><Key frame="116" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="0.02" /><Key frame="35" value="0.02" /><Key frame="42" value="1" /><Key frame="49" value="1" /><Key frame="63" value="1" /><Key frame="70" value="1" /><Key frame="80" value="1" /><Key frame="116" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="2.10004" /><Key frame="35" value="2.10004" /><Key frame="49" value="2.10004" /><Key frame="63" value="2.10004" /><Key frame="70" value="2.10004" /><Key frame="80" value="2.10004" /><Key frame="116" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-15.8" /><Key frame="35" value="-15.8" /><Key frame="49" value="-15.8" /><Key frame="63" value="-15.8" /><Key frame="70" value="-15.8" /><Key frame="80" value="-15.8" /><Key frame="116" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="5.09536" /><Key frame="35" value="5.09536" /><Key frame="49" value="5.09536" /><Key frame="63" value="5.09536" /><Key frame="70" value="5.09536" /><Key frame="80" value="5.09536" /><Key frame="116" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_うなずき" id="9" localization="8" tooltip="Enter tooltip here" x="2075" y="300"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="17" size="17"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="9" value="2" /><Key frame="17" value="-11.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="9" value="0" /><Key frame="17" value="-2.95486e-05" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_がっかり" id="10" localization="8" tooltip="Enter tooltip here" x="611" y="503"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="121" size="121"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="11.3" /><Key frame="57" value="11.3" /><Key frame="71" value="36.5" /><Key frame="96" value="36.5" /><Key frame="121" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="0" /><Key frame="57" value="0" /><Key frame="71" value="9.1" /><Key frame="96" value="9.1" /><Key frame="121" value="-2.95486e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-15.4688" /><Key frame="71" value="-15.4688" /><Key frame="96" value="-15.4688" /><Key frame="121" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-70.3125" /><Key frame="71" value="-70.3125" /><Key frame="96" value="-70.3125" /><Key frame="121" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="0" /><Key frame="71" value="0" /><Key frame="96" value="0" /><Key frame="121" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="94.3066" /><Key frame="71" value="94.3066" /><Key frame="96" value="94.3066" /><Key frame="121" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="9.22851" /><Key frame="71" value="9.22851" /><Key frame="96" value="9.22851" /><Key frame="121" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-3.0738" /><Key frame="71" value="-3.0738" /><Key frame="96" value="-3.0738" /><Key frame="121" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="15.4688" /><Key frame="71" value="15.4688" /><Key frame="96" value="15.4688" /><Key frame="121" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="70.3125" /><Key frame="71" value="70.3125" /><Key frame="96" value="70.3125" /><Key frame="121" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0" /><Key frame="71" value="0" /><Key frame="96" value="0" /><Key frame="121" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="94.3066" /><Key frame="71" value="94.3066" /><Key frame="96" value="94.3066" /><Key frame="121" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-9.22851" /><Key frame="71" value="-9.22851" /><Key frame="96" value="-9.22851" /><Key frame="121" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="3.0738" /><Key frame="71" value="3.0738" /><Key frame="96" value="3.0738" /><Key frame="121" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_これです" id="159" localization="8" tooltip="Enter tooltip here" x="760" y="501"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="86" size="86"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="9" value="66.7" /><Key frame="23" value="71.2" /><Key frame="31" value="45.4" /><Key frame="39" value="71.2" /><Key frame="47" value="45.4" /><Key frame="58" value="46.1215" /><Key frame="83" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="102.3" /><Key frame="39" value="102.3" /><Key frame="58" value="102.3" /><Key frame="83" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.7" /><Key frame="31" value="1" /><Key frame="39" value="0.7" /><Key frame="47" value="1" /><Key frame="58" value="0.991611" /><Key frame="83" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="27.9" /><Key frame="39" value="27.9" /><Key frame="58" value="27.9" /><Key frame="83" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-15.8" /><Key frame="39" value="-15.8" /><Key frame="58" value="-15.8" /><Key frame="83" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="79.4" /><Key frame="39" value="79.4" /><Key frame="58" value="79.4" /><Key frame="83" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_どうです皆さん" id="89" localization="8" tooltip="Enter tooltip here" x="904" y="498"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="111" size="111"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="28" value="-11.4592" /><Key frame="33" value="-11.4592" /><Key frame="58" value="-11.4592" /><Key frame="83" value="-11.4592" /><Key frame="108" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="28" value="20" /><Key frame="33" value="20" /><Key frame="58" value="-20" /><Key frame="83" value="-20" /><Key frame="108" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="28" value="61" /><Key frame="33" value="61" /><Key frame="58" value="49.6" /><Key frame="83" value="49.6582" /><Key frame="108" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="28" value="33.5" /><Key frame="33" value="33.5" /><Key frame="58" value="104.2" /><Key frame="83" value="104.326" /><Key frame="108" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="28" value="1" /><Key frame="33" value="1" /><Key frame="58" value="1" /><Key frame="83" value="0.975395" /><Key frame="108" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="28" value="15" /><Key frame="33" value="15" /><Key frame="58" value="27.9" /><Key frame="83" value="27.8613" /><Key frame="108" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="19" value="-27.6" /><Key frame="28" value="-6.99996" /><Key frame="33" value="-6.99996" /><Key frame="58" value="-35" /><Key frame="83" value="-35.0684" /><Key frame="108" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="28" value="104.5" /><Key frame="33" value="104.5" /><Key frame="58" value="82.8" /><Key frame="83" value="82.6158" /><Key frame="108" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_もっとがっかり" id="15" localization="8" tooltip="Enter tooltip here" x="1044" y="499"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="106" size="106"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="24" value="-28.4" /><Key frame="41" value="32.2" /><Key frame="81" value="32.2" /><Key frame="106" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="24" value="0" /><Key frame="41" value="11.6" /><Key frame="81" value="11.6" /><Key frame="106" value="-4.03576e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="24" value="-2.5" /><Key frame="41" value="-18.9" /><Key frame="81" value="-18.9" /><Key frame="106" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="24" value="3.40445e-15" /><Key frame="41" value="9.7" /><Key frame="81" value="9.7" /><Key frame="106" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="24" value="-3.99982" /><Key frame="41" value="-3.99982" /><Key frame="81" value="-3.99982" /><Key frame="106" value="-4.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="24" value="-0.5" /><Key frame="41" value="-0.5" /><Key frame="81" value="-0.5" /><Key frame="106" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="24" value="-70.2246" /><Key frame="41" value="-70.2246" /><Key frame="81" value="-70.2246" /><Key frame="106" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="24" value="0.23" /><Key frame="41" value="0.7" /><Key frame="81" value="0.7" /><Key frame="106" value="0.0342706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="24" value="75.1" /><Key frame="41" value="66.5" /><Key frame="81" value="66.5" /><Key frame="106" value="81.2988" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="24" value="9.05273" /><Key frame="41" value="14" /><Key frame="81" value="14" /><Key frame="106" value="52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="24" value="0.0902951" /><Key frame="41" value="0.0902951" /><Key frame="81" value="0.0902951" /><Key frame="106" value="-87.362" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="24" value="0.5" /><Key frame="41" value="0.5" /><Key frame="81" value="0.5" /><Key frame="106" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="24" value="70.2246" /><Key frame="41" value="70.2246" /><Key frame="81" value="70.2246" /><Key frame="106" value="6.32813" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="24" value="0.24" /><Key frame="41" value="0.7" /><Key frame="81" value="0.7" /><Key frame="106" value="0.0360281" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="24" value="75.1" /><Key frame="41" value="62.3" /><Key frame="81" value="62.3" /><Key frame="106" value="81.2109" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="24" value="-9.05273" /><Key frame="41" value="-0.5" /><Key frame="81" value="-0.5" /><Key frame="106" value="-51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="24" value="-0.0902951" /><Key frame="41" value="-0.0902951" /><Key frame="81" value="-0.0902951" /><Key frame="106" value="88.1578" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_タブレットに注目" id="11" localization="8" tooltip="Enter tooltip here" x="1192" y="495"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="92" size="92"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-11.4591" /><Key frame="37" value="15" /><Key frame="65" value="15" /><Key frame="89" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="4.93669e-06" /><Key frame="37" value="-2.95486e-05" /><Key frame="65" value="-2.95486e-05" /><Key frame="89" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-49.1" /><Key frame="35" value="-89.5" /><Key frame="65" value="-89.5" /><Key frame="89" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="35.9501" /><Key frame="35" value="2.9" /><Key frame="65" value="2.9" /><Key frame="89" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="0.9988" /><Key frame="35" value="1" /><Key frame="65" value="1" /><Key frame="89" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="-22.2" /><Key frame="35" value="29.3" /><Key frame="65" value="29.3" /><Key frame="89" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="40.081" /><Key frame="35" value="53.2" /><Key frame="65" value="53.2" /><Key frame="89" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-102.743" /><Key frame="35" value="-104.5" /><Key frame="65" value="-104.5" /><Key frame="89" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="49.1" /><Key frame="35" value="89.5" /><Key frame="65" value="89.5" /><Key frame="89" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="-35.9501" /><Key frame="35" value="-2.9" /><Key frame="65" value="-2.9" /><Key frame="89" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0.9988" /><Key frame="35" value="1" /><Key frame="65" value="1" /><Key frame="89" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="-22.2" /><Key frame="35" value="29.3" /><Key frame="65" value="29.3" /><Key frame="89" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-40.081" /><Key frame="35" value="-53.2" /><Key frame="65" value="-53.2" /><Key frame="89" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="102.743" /><Key frame="35" value="104.5" /><Key frame="65" value="104.5" /><Key frame="89" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_タブレットを読む" id="158" localization="8" tooltip="Enter tooltip here" x="1346" y="493"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="404" size="404"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="-11.4592" /><Key frame="40" value="15" /><Key frame="72" value="15" /><Key frame="84" value="15" /><Key frame="108" value="15" /><Key frame="120" value="17" /><Key frame="148" value="17" /><Key frame="159" value="19" /><Key frame="180" value="19" /><Key frame="190" value="19" /><Key frame="201" value="21" /><Key frame="236" value="21" /><Key frame="248" value="23" /><Key frame="272" value="23" /><Key frame="287" value="23" /><Key frame="314" value="-11.5" /><Key frame="327" value="-11.5" /><Key frame="347" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="-4.70003e-21" /><Key frame="40" value="0" /><Key frame="72" value="0" /><Key frame="84" value="-9" /><Key frame="108" value="5" /><Key frame="120" value="-9" /><Key frame="148" value="9" /><Key frame="159" value="-9" /><Key frame="180" value="5" /><Key frame="190" value="5" /><Key frame="201" value="-9" /><Key frame="236" value="9" /><Key frame="248" value="-9" /><Key frame="272" value="7" /><Key frame="287" value="7" /><Key frame="314" value="0" /><Key frame="327" value="0" /><Key frame="347" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="327" value="84.6388" /><Key frame="347" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="327" value="6.20701" /><Key frame="347" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="327" value="0" /><Key frame="347" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="327" value="81.2851" /><Key frame="347" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="327" value="-52" /><Key frame="347" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="327" value="88.6804" /><Key frame="347" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_両手でしゅーりょー！" id="76" localization="8" tooltip="Enter tooltip here" x="1507" y="496"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="150" size="150"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="42" value="-40" /><Key frame="52" value="-40" /><Key frame="62" value="-40" /><Key frame="72" value="-40" /><Key frame="82" value="-40" /><Key frame="92" value="-40" /><Key frame="102" value="-40" /><Key frame="150" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="42" value="0" /><Key frame="52" value="0" /><Key frame="62" value="0" /><Key frame="72" value="0" /><Key frame="82" value="0" /><Key frame="92" value="0" /><Key frame="102" value="0" /><Key frame="150" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="42" value="-0.799284" /><Key frame="52" value="-0.799284" /><Key frame="62" value="-0.799284" /><Key frame="72" value="-0.799284" /><Key frame="82" value="-0.799284" /><Key frame="92" value="-0.799284" /><Key frame="102" value="-0.799284" /><Key frame="150" value="-0.215502" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="42" value="-0.439401" /><Key frame="52" value="-0.439401" /><Key frame="62" value="-0.439401" /><Key frame="72" value="-0.439401" /><Key frame="82" value="-0.439401" /><Key frame="92" value="-0.439401" /><Key frame="102" value="-0.439401" /><Key frame="150" value="1.27266e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="42" value="-5.19455" /><Key frame="52" value="-5.19455" /><Key frame="62" value="-5.19455" /><Key frame="72" value="-5.19455" /><Key frame="82" value="-5.19455" /><Key frame="92" value="-5.19455" /><Key frame="102" value="-5.19455" /><Key frame="150" value="-4.23162" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="35" value="-0.5" /><Key frame="52" value="-48.2" /><Key frame="62" value="-0.5" /><Key frame="72" value="-48.2" /><Key frame="82" value="-0.5" /><Key frame="92" value="-48.2" /><Key frame="102" value="-48.2" /><Key frame="150" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="35" value="-16.3" /><Key frame="52" value="-16.3" /><Key frame="62" value="-16.3" /><Key frame="72" value="-16.3" /><Key frame="82" value="-16.3" /><Key frame="92" value="-16.3" /><Key frame="102" value="-16.3" /><Key frame="150" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="35" value="1" /><Key frame="52" value="1" /><Key frame="62" value="1" /><Key frame="72" value="1" /><Key frame="82" value="1" /><Key frame="92" value="1" /><Key frame="102" value="1" /><Key frame="150" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="35" value="-78" /><Key frame="52" value="-78" /><Key frame="62" value="-78" /><Key frame="72" value="-78" /><Key frame="82" value="-78" /><Key frame="92" value="-78" /><Key frame="102" value="-78" /><Key frame="150" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="35" value="31.6" /><Key frame="52" value="31.6" /><Key frame="62" value="31.6" /><Key frame="72" value="31.6" /><Key frame="82" value="31.6" /><Key frame="92" value="31.6" /><Key frame="102" value="31.6" /><Key frame="150" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="35" value="-0.8" /><Key frame="52" value="-0.8" /><Key frame="62" value="-0.8" /><Key frame="72" value="-0.8" /><Key frame="82" value="-0.8" /><Key frame="92" value="-0.8" /><Key frame="102" value="-0.8" /><Key frame="150" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="35" value="0.5" /><Key frame="52" value="48.2" /><Key frame="62" value="0.5" /><Key frame="72" value="48.2" /><Key frame="82" value="0.5" /><Key frame="92" value="48.2" /><Key frame="102" value="48.2" /><Key frame="150" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="35" value="16.3" /><Key frame="52" value="16.3" /><Key frame="62" value="16.3" /><Key frame="72" value="16.3" /><Key frame="82" value="16.3" /><Key frame="92" value="16.3" /><Key frame="102" value="16.3" /><Key frame="150" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="35" value="1" /><Key frame="52" value="1" /><Key frame="62" value="1" /><Key frame="72" value="1" /><Key frame="82" value="1" /><Key frame="92" value="1" /><Key frame="102" value="1" /><Key frame="150" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="35" value="-78" /><Key frame="52" value="-78" /><Key frame="62" value="-78" /><Key frame="72" value="-78" /><Key frame="82" value="-78" /><Key frame="92" value="-78" /><Key frame="102" value="-78" /><Key frame="150" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="35" value="-31.6" /><Key frame="52" value="-31.6" /><Key frame="62" value="-31.6" /><Key frame="72" value="-31.6" /><Key frame="82" value="-31.6" /><Key frame="92" value="-31.6" /><Key frame="102" value="-31.6" /><Key frame="150" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="35" value="0.8" /><Key frame="52" value="0.8" /><Key frame="62" value="0.8" /><Key frame="72" value="0.8" /><Key frame="82" value="0.8" /><Key frame="92" value="0.8" /><Key frame="102" value="0.8" /><Key frame="150" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_両手で煽りもっと" id="87" localization="8" tooltip="Enter tooltip here" x="1645" y="498"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="98" size="98"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="27" value="-20.5" /><Key frame="39" value="-20.5" /><Key frame="48" value="-7" /><Key frame="57" value="-20.5" /><Key frame="62" value="-20.5" /><Key frame="95" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="27" value="-4.16139e-05" /><Key frame="39" value="-4.16139e-05" /><Key frame="48" value="-4.16139e-05" /><Key frame="57" value="-4.16139e-05" /><Key frame="62" value="-4.16139e-05" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="27" value="-39.3731" /><Key frame="34" value="-38.9672" /><Key frame="39" value="-38.9672" /><Key frame="48" value="-71.2936" /><Key frame="57" value="-40" /><Key frame="62" value="-40" /><Key frame="95" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="27" value="-101.605" /><Key frame="34" value="-101.873" /><Key frame="39" value="-101.873" /><Key frame="48" value="-102.328" /><Key frame="57" value="-102.3" /><Key frame="62" value="-102.3" /><Key frame="95" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="27" value="0.9984" /><Key frame="34" value="0.9984" /><Key frame="39" value="0.9984" /><Key frame="48" value="0.9984" /><Key frame="57" value="0.9984" /><Key frame="62" value="0.9984" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="27" value="5.79845" /><Key frame="34" value="5.73064" /><Key frame="39" value="20.8" /><Key frame="48" value="2.07305" /><Key frame="57" value="2.10004" /><Key frame="62" value="2.10004" /><Key frame="95" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="27" value="14.0603" /><Key frame="34" value="14.7323" /><Key frame="39" value="14.7323" /><Key frame="48" value="15.9002" /><Key frame="57" value="15.8" /><Key frame="62" value="15.8" /><Key frame="95" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="27" value="-66.3" /><Key frame="34" value="-66.3003" /><Key frame="39" value="-66.3003" /><Key frame="48" value="-66.3003" /><Key frame="57" value="-66.3" /><Key frame="62" value="-66.3" /><Key frame="95" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="27" value="38.9384" /><Key frame="34" value="38.9672" /><Key frame="39" value="38.9672" /><Key frame="48" value="71.2936" /><Key frame="57" value="40" /><Key frame="62" value="40" /><Key frame="95" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="27" value="101.864" /><Key frame="34" value="101.873" /><Key frame="39" value="101.873" /><Key frame="48" value="102.328" /><Key frame="57" value="102.3" /><Key frame="62" value="102.3" /><Key frame="95" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="27" value="0.9984" /><Key frame="34" value="0.9984" /><Key frame="39" value="0.9984" /><Key frame="48" value="1" /><Key frame="57" value="1" /><Key frame="62" value="1" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="5.71537" /><Key frame="34" value="5.73064" /><Key frame="39" value="20.8" /><Key frame="48" value="2.07294" /><Key frame="57" value="2.10004" /><Key frame="62" value="2.10004" /><Key frame="95" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="27" value="-14.6803" /><Key frame="34" value="-14.7323" /><Key frame="39" value="-14.7323" /><Key frame="48" value="-15.9002" /><Key frame="57" value="-15.8" /><Key frame="62" value="-15.8" /><Key frame="95" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="27" value="66.3" /><Key frame="34" value="66.3003" /><Key frame="39" value="66.3003" /><Key frame="48" value="66.3003" /><Key frame="57" value="66.3" /><Key frame="62" value="66.3" /><Key frame="95" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_両手で胸おさえ" id="32" localization="8" tooltip="Enter tooltip here" x="1796" y="492"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="88" size="88"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="27" value="15" /><Key frame="60" value="15" /><Key frame="87" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="87" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="27" value="-2.97277e-06" /><Key frame="60" value="-2.97277e-06" /><Key frame="87" value="-0.215502" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="27" value="-3.40445e-15" /><Key frame="60" value="-3.40445e-15" /><Key frame="87" value="1.27266e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="27" value="-3.99982" /><Key frame="60" value="-3.99982" /><Key frame="87" value="-4.23162" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="27" value="-86" /><Key frame="60" value="-86" /><Key frame="78" value="-74.5" /><Key frame="87" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="27" value="-15" /><Key frame="60" value="-15" /><Key frame="87" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="27" value="1" /><Key frame="60" value="1" /><Key frame="87" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="27" value="5.1" /><Key frame="60" value="5.1" /><Key frame="78" value="58" /><Key frame="87" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="17" value="52.9966" /><Key frame="27" value="30.3" /><Key frame="60" value="30.3" /><Key frame="87" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="27" value="-80" /><Key frame="60" value="-80" /><Key frame="87" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="27" value="86" /><Key frame="60" value="86" /><Key frame="78" value="74.5" /><Key frame="87" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="27" value="15" /><Key frame="60" value="15" /><Key frame="87" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="27" value="1" /><Key frame="60" value="1" /><Key frame="87" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="5" /><Key frame="60" value="5" /><Key frame="78" value="58" /><Key frame="87" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="17" value="-51.3194" /><Key frame="27" value="-30" /><Key frame="60" value="-30" /><Key frame="87" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="27" value="80" /><Key frame="60" value="80" /><Key frame="87" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_両手ひろげ" id="13" localization="8" tooltip="Enter tooltip here" x="1943" y="497"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="72" size="72"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-74.5" /><Key frame="18" value="-83.939" /><Key frame="27" value="-62.3176" /><Key frame="45" value="-62.3176" /><Key frame="72" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="18" value="-77.4" /><Key frame="27" value="-98.3484" /><Key frame="45" value="-98.3484" /><Key frame="72" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="18" value="0.0976" /><Key frame="27" value="0.996" /><Key frame="45" value="0.996" /><Key frame="72" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="58" /><Key frame="18" value="39.4" /><Key frame="27" value="23.2058" /><Key frame="45" value="23.2058" /><Key frame="72" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="18" value="20.4" /><Key frame="27" value="21.9" /><Key frame="45" value="21.9" /><Key frame="72" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="18" value="-42.6" /><Key frame="27" value="-72.0688" /><Key frame="45" value="-72.0688" /><Key frame="72" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="74.5" /><Key frame="18" value="83.939" /><Key frame="27" value="62.3176" /><Key frame="45" value="62.3176" /><Key frame="72" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="77.4" /><Key frame="27" value="98.3484" /><Key frame="45" value="98.3484" /><Key frame="72" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="18" value="0.0976" /><Key frame="27" value="0.996" /><Key frame="45" value="0.996" /><Key frame="72" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="58" /><Key frame="18" value="39.4" /><Key frame="27" value="23.2058" /><Key frame="45" value="23.2058" /><Key frame="72" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="18" value="-20.4" /><Key frame="27" value="-21.9" /><Key frame="45" value="-21.9" /><Key frame="72" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="42.6" /><Key frame="27" value="72.0688" /><Key frame="45" value="72.0688" /><Key frame="72" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_両手ひろげ後上げ下げなんてこった" id="214" localization="8" tooltip="Enter tooltip here" x="2081" y="489"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="185" size="185"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="14" value="-11.4592" /><Key frame="23" value="2" /><Key frame="32" value="-11.4592" /><Key frame="125" value="-11.4592" /><Key frame="135" value="-25" /><Key frame="155" value="-11.5137" /><Key frame="185" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="14" value="-4.70003e-21" /><Key frame="23" value="-4.70003e-21" /><Key frame="32" value="-4.70003e-21" /><Key frame="125" value="0" /><Key frame="155" value="0.175782" /><Key frame="185" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="14" value="-40" /><Key frame="32" value="-10" /><Key frame="100" value="-10" /><Key frame="120" value="-89.5" /><Key frame="125" value="-89.5" /><Key frame="135" value="-89.5" /><Key frame="155" value="-89.5" /><Key frame="160" value="-89.5" /><Key frame="185" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="14" value="-77.4" /><Key frame="32" value="-98.3484" /><Key frame="100" value="-98.3484" /><Key frame="120" value="-119.5" /><Key frame="125" value="-119.5" /><Key frame="135" value="-119.5" /><Key frame="155" value="-119.5" /><Key frame="160" value="-119.5" /><Key frame="185" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="14" value="0.0316" /><Key frame="32" value="1" /><Key frame="100" value="1" /><Key frame="120" value="0.996" /><Key frame="125" value="0.996" /><Key frame="135" value="0.996" /><Key frame="155" value="0.996" /><Key frame="160" value="0.996" /><Key frame="172" value="0.529877" /><Key frame="185" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="14" value="39.4" /><Key frame="32" value="-10" /><Key frame="100" value="-10" /><Key frame="120" value="60" /><Key frame="125" value="60" /><Key frame="135" value="60" /><Key frame="155" value="60" /><Key frame="160" value="60" /><Key frame="185" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="14" value="16.2" /><Key frame="32" value="21.9" /><Key frame="100" value="21.9" /><Key frame="120" value="0.5" /><Key frame="125" value="0.5" /><Key frame="135" value="25" /><Key frame="155" value="0.5" /><Key frame="160" value="0.5" /><Key frame="172" value="45.773" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-4" ordinateParam="-5.74799" /><Tangent side="right" interpType="bezier" abscissaParam="4.33333" ordinateParam="6.22699" /></Key><Key frame="185" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="14" value="-9.31412" /><Key frame="32" value="-9.3" /><Key frame="100" value="-9.3" /><Key frame="120" value="-65" /><Key frame="125" value="-65" /><Key frame="135" value="-65" /><Key frame="155" value="-65" /><Key frame="160" value="-65" /><Key frame="185" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="14" value="40" /><Key frame="32" value="10" /><Key frame="100" value="10" /><Key frame="120" value="89.5" /><Key frame="125" value="89.5" /><Key frame="135" value="89.5" /><Key frame="155" value="89.5" /><Key frame="160" value="89.5" /><Key frame="185" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="14" value="77.4" /><Key frame="32" value="98.3484" /><Key frame="100" value="98.3484" /><Key frame="120" value="119.5" /><Key frame="125" value="119.5" /><Key frame="135" value="119.5" /><Key frame="155" value="119.5" /><Key frame="160" value="118.88" /><Key frame="185" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="14" value="0.0976" /><Key frame="32" value="0.996" /><Key frame="100" value="0.996" /><Key frame="120" value="0.996" /><Key frame="125" value="0.996" /><Key frame="135" value="0.996" /><Key frame="155" value="0.996" /><Key frame="160" value="0.996" /><Key frame="172" value="0.527241" /><Key frame="185" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="14" value="39.4" /><Key frame="32" value="-10" /><Key frame="100" value="-10" /><Key frame="120" value="60" /><Key frame="125" value="60" /><Key frame="135" value="60" /><Key frame="155" value="60" /><Key frame="160" value="60" /><Key frame="185" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="14" value="-16.2" /><Key frame="32" value="-21.9" /><Key frame="100" value="-21.9" /><Key frame="120" value="-0.5" /><Key frame="125" value="-0.5" /><Key frame="135" value="-25" /><Key frame="155" value="-0.5" /><Key frame="160" value="-0.5" /><Key frame="172" value="-44.8483" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-5.63872" ordinateParam="10.0404" /><Tangent side="right" interpType="bezier" abscissaParam="6.10861" ordinateParam="-10.8771" /></Key><Key frame="185" value="-52" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-4.33333" ordinateParam="-1.71942" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="14" value="9.31412" /><Key frame="32" value="9.3" /><Key frame="100" value="9.3" /><Key frame="120" value="65" /><Key frame="125" value="65" /><Key frame="135" value="65" /><Key frame="155" value="65" /><Key frame="160" value="65" /><Key frame="185" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_両手肩位置でバイバイ" id="199" localization="8" tooltip="Enter tooltip here" x="626" y="711"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="110" size="110"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="35" value="-80" /><Key frame="45" value="-50" /><Key frame="55" value="-80" /><Key frame="65" value="-50" /><Key frame="75" value="-80" /><Key frame="85" value="-50" /><Key frame="110" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="35" value="-55" /><Key frame="45" value="-70" /><Key frame="55" value="-55" /><Key frame="65" value="-70" /><Key frame="75" value="-55" /><Key frame="85" value="-70" /><Key frame="110" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="35" value="1" /><Key frame="45" value="1" /><Key frame="65" value="1" /><Key frame="75" value="1" /><Key frame="85" value="1" /><Key frame="110" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="35" value="-35" /><Key frame="45" value="-25" /><Key frame="55" value="-35" /><Key frame="65" value="-25" /><Key frame="75" value="-35" /><Key frame="85" value="-25" /><Key frame="110" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="35" value="55.2292" /><Key frame="75" value="55.2292" /><Key frame="85" value="55.2292" /><Key frame="110" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="35" value="17.5" /><Key frame="45" value="16.8303" /><Key frame="65" value="16.8303" /><Key frame="75" value="17.5" /><Key frame="85" value="16.8303" /><Key frame="110" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="35" value="75.7" /><Key frame="45" value="50" /><Key frame="55" value="80" /><Key frame="65" value="50" /><Key frame="75" value="75.7" /><Key frame="85" value="50" /><Key frame="110" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="35" value="55" /><Key frame="45" value="70" /><Key frame="55" value="55" /><Key frame="65" value="70" /><Key frame="75" value="55" /><Key frame="85" value="70" /><Key frame="110" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="35" value="1" /><Key frame="45" value="1" /><Key frame="65" value="1" /><Key frame="75" value="1" /><Key frame="85" value="1" /><Key frame="110" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="35" value="-35" /><Key frame="45" value="-25" /><Key frame="55" value="-35" /><Key frame="65" value="-25" /><Key frame="75" value="-35" /><Key frame="85" value="-25" /><Key frame="110" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="35" value="-55.2292" /><Key frame="75" value="-55.2292" /><Key frame="85" value="-55.2292" /><Key frame="110" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="35" value="-17.5" /><Key frame="45" value="-16.8303" /><Key frame="65" value="-16.8303" /><Key frame="75" value="-17.5" /><Key frame="85" value="-16.8303" /><Key frame="110" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_口でカメラ撮影" id="17" localization="8" tooltip="Enter tooltip here" x="774" y="712"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="118" size="118"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-11.4592" /><Key frame="50" value="-40" /><Key frame="75" value="-40" /><Key frame="115" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="-4.70003e-21" /><Key frame="115" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-4.2" /><Key frame="50" value="15" /><Key frame="75" value="15" /><Key frame="115" value="-4.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="25" value="0.000112737" /><Key frame="115" value="0.000112737" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="25" value="-0.200101" /><Key frame="50" value="-10" /><Key frame="75" value="-10" /><Key frame="115" value="-0.200101" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-62.3176" /><Key frame="50" value="-88.1" /><Key frame="75" value="-88.1" /><Key frame="91" value="-75.3" /><Key frame="115" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-98.3484" /><Key frame="50" value="-25.8" /><Key frame="75" value="-25.8" /><Key frame="115" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="1" /><Key frame="50" value="1" /><Key frame="75" value="1" /><Key frame="115" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="23.2058" /><Key frame="50" value="-33.6" /><Key frame="75" value="-33.6" /><Key frame="115" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="21.9" /><Key frame="50" value="42.5" /><Key frame="75" value="42.5" /><Key frame="115" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-72.0688" /><Key frame="50" value="-29.3" /><Key frame="75" value="-29.3" /><Key frame="115" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="62.3176" /><Key frame="50" value="88.1" /><Key frame="75" value="88.1" /><Key frame="91" value="75.3" /><Key frame="115" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="98.3484" /><Key frame="50" value="25.8" /><Key frame="75" value="25.8" /><Key frame="115" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0.996" /><Key frame="50" value="1" /><Key frame="75" value="1" /><Key frame="115" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="23.2058" /><Key frame="50" value="-33.6" /><Key frame="75" value="-33.6" /><Key frame="115" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-21.9" /><Key frame="50" value="-42.5" /><Key frame="75" value="-42.5" /><Key frame="115" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="72.0688" /><Key frame="50" value="29.3" /><Key frame="75" value="29.3" /><Key frame="115" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_右手ひろげ" id="16" localization="8" tooltip="Enter tooltip here" x="919" y="712"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="72" size="72"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="74.5" /><Key frame="18" value="83.939" /><Key frame="27" value="62.3176" /><Key frame="45" value="62.3176" /><Key frame="72" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="77.4" /><Key frame="27" value="98.3484" /><Key frame="45" value="98.3484" /><Key frame="72" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="18" value="0.0976" /><Key frame="27" value="0.996" /><Key frame="45" value="0.996" /><Key frame="72" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="58" /><Key frame="18" value="39.4" /><Key frame="27" value="23.2058" /><Key frame="45" value="23.2058" /><Key frame="72" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="18" value="-20.4" /><Key frame="27" value="-21.9" /><Key frame="45" value="-21.9" /><Key frame="72" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="42.6" /><Key frame="27" value="72.0688" /><Key frame="45" value="72.0688" /><Key frame="72" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_右手肩からバイバイロング" id="142" localization="8" tooltip="Enter tooltip here" x="1064" y="707"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="213" size="213"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="35" value="75.7" /><Key frame="45" value="50" /><Key frame="55" value="80" /><Key frame="65" value="50" /><Key frame="75" value="80" /><Key frame="85" value="50" /><Key frame="95" value="80" /><Key frame="105" value="50" /><Key frame="115" value="80" /><Key frame="125" value="50" /><Key frame="135" value="80" /><Key frame="145" value="50" /><Key frame="155" value="80" /><Key frame="165" value="50" /><Key frame="175" value="80" /><Key frame="210" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="35" value="55" /><Key frame="45" value="70" /><Key frame="55" value="55" /><Key frame="65" value="70" /><Key frame="75" value="55" /><Key frame="85" value="70" /><Key frame="95" value="55" /><Key frame="105" value="70" /><Key frame="115" value="55" /><Key frame="125" value="70" /><Key frame="135" value="55" /><Key frame="145" value="70" /><Key frame="155" value="55" /><Key frame="165" value="70" /><Key frame="175" value="55" /><Key frame="210" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="35" value="0.7" /><Key frame="45" value="1" /><Key frame="65" value="1" /><Key frame="85" value="1" /><Key frame="175" value="1" /><Key frame="210" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="35" value="-35" /><Key frame="45" value="-25" /><Key frame="55" value="-35" /><Key frame="65" value="-25" /><Key frame="75" value="-35" /><Key frame="85" value="-25" /><Key frame="95" value="-35" /><Key frame="105" value="-25" /><Key frame="115" value="-35" /><Key frame="125" value="-25" /><Key frame="135" value="-35" /><Key frame="145" value="-25" /><Key frame="155" value="-35" /><Key frame="165" value="-25" /><Key frame="175" value="-35" /><Key frame="210" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="35" value="-55.2292" /><Key frame="45" value="-55.2292" /><Key frame="55" value="-55.2292" /><Key frame="65" value="-55.2292" /><Key frame="75" value="-55.2292" /><Key frame="85" value="-55.2292" /><Key frame="95" value="-55.2292" /><Key frame="105" value="-55.2292" /><Key frame="115" value="-55.2292" /><Key frame="125" value="-55.2292" /><Key frame="135" value="-55.2292" /><Key frame="145" value="-55.2292" /><Key frame="155" value="-55.2292" /><Key frame="165" value="-55.2292" /><Key frame="175" value="-55.2292" /><Key frame="210" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="35" value="-17.5" /><Key frame="45" value="-17.5" /><Key frame="175" value="-17.5" /><Key frame="210" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_右手肩位置でバイバイ" id="102" localization="8" tooltip="Enter tooltip here" x="1205" y="707"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="120" size="120"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="35" value="75.7" /><Key frame="45" value="50" /><Key frame="55" value="75.7" /><Key frame="65" value="50" /><Key frame="75" value="75.7" /><Key frame="85" value="50" /><Key frame="120" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="35" value="55" /><Key frame="45" value="70" /><Key frame="55" value="55" /><Key frame="65" value="70" /><Key frame="75" value="55" /><Key frame="85" value="70" /><Key frame="120" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="35" value="1" /><Key frame="45" value="1" /><Key frame="55" value="1" /><Key frame="65" value="1" /><Key frame="75" value="1" /><Key frame="85" value="1" /><Key frame="120" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="35" value="-35" /><Key frame="45" value="-25" /><Key frame="55" value="-35" /><Key frame="65" value="-25" /><Key frame="75" value="-35" /><Key frame="85" value="-25" /><Key frame="120" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="35" value="-55.2292" /><Key frame="55" value="-55.2292" /><Key frame="75" value="-55.2292" /><Key frame="85" value="-55.2292" /><Key frame="120" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="35" value="-17.5" /><Key frame="45" value="-16.8303" /><Key frame="55" value="-17.5" /><Key frame="65" value="-16.8303" /><Key frame="75" value="-17.5" /><Key frame="85" value="-16.8303" /><Key frame="120" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_天を仰ぐ" id="69" localization="8" tooltip="Enter tooltip here" x="1376" y="705"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="112" size="112"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="47" value="-40" /><Key frame="72" value="-40" /><Key frame="112" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="31" value="-78" /><Key frame="47" value="-40" /><Key frame="72" value="-40" /><Key frame="112" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="31" value="-63.5" /><Key frame="47" value="-90" /><Key frame="72" value="-90" /><Key frame="112" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="47" value="1" /><Key frame="72" value="1" /><Key frame="112" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="47" value="0" /><Key frame="72" value="0" /><Key frame="112" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="47" value="70" /><Key frame="72" value="70" /><Key frame="112" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="47" value="-70" /><Key frame="72" value="-70" /><Key frame="112" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="31" value="83.8" /><Key frame="47" value="40" /><Key frame="72" value="40" /><Key frame="112" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="31" value="63.5" /><Key frame="47" value="90" /><Key frame="72" value="90" /><Key frame="112" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="47" value="1" /><Key frame="72" value="1" /><Key frame="112" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="47" value="0" /><Key frame="72" value="0" /><Key frame="112" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="47" value="-70.2" /><Key frame="72" value="-70" /><Key frame="112" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="47" value="70" /><Key frame="72" value="70" /><Key frame="112" value="88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="112" value="2.39632e-05" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_左右どちら？" id="171" localization="8" tooltip="Enter tooltip here" x="1528" y="707"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="30" start_frame="1" end_frame="167" size="167"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="33" value="-11" /><Key frame="58" value="-11" /><Key frame="85" value="-11" /><Key frame="98" value="-11" /><Key frame="130" value="-11" /><Key frame="167" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="33" value="-30" /><Key frame="58" value="-30" /><Key frame="85" value="30" /><Key frame="98" value="30" /><Key frame="130" value="30" /><Key frame="167" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="58" value="-84.6388" /><Key frame="85" value="-71.7" /><Key frame="98" value="-71.7" /><Key frame="130" value="-71.7" /><Key frame="150" value="-66.7" /><Key frame="167" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="58" value="-6.20701" /><Key frame="85" value="-92.7" /><Key frame="98" value="-92.7" /><Key frame="130" value="-92.7" /><Key frame="167" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="58" value="0" /><Key frame="85" value="0.955185" /><Key frame="98" value="0.955185" /><Key frame="130" value="0.955185" /><Key frame="167" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="58" value="81.2851" /><Key frame="85" value="-2.10938" /><Key frame="98" value="-2.10938" /><Key frame="130" value="-2.10938" /><Key frame="167" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="58" value="52" /><Key frame="85" value="24" /><Key frame="98" value="24" /><Key frame="130" value="24" /><Key frame="167" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="58" value="-88.6804" /><Key frame="85" value="-26.2772" /><Key frame="98" value="-26.2772" /><Key frame="130" value="-26.2772" /><Key frame="167" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="13" value="71" /><Key frame="33" value="71.7" /><Key frame="58" value="71.7" /><Key frame="98" value="71.7" /><Key frame="130" value="71.7" /><Key frame="150" value="66.7" /><Key frame="167" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="33" value="92.7" /><Key frame="58" value="92.7" /><Key frame="98" value="92.7" /><Key frame="130" value="92.7" /><Key frame="167" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="33" value="0.955185" /><Key frame="58" value="0.955185" /><Key frame="98" value="0.955185" /><Key frame="130" value="0.955185" /><Key frame="167" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="33" value="-2.10938" /><Key frame="58" value="-2.10938" /><Key frame="98" value="-2.10938" /><Key frame="130" value="-2.10938" /><Key frame="167" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="33" value="-24" /><Key frame="58" value="-24" /><Key frame="98" value="-24" /><Key frame="130" value="-24" /><Key frame="167" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="33" value="26.2772" /><Key frame="58" value="26.2772" /><Key frame="98" value="26.2772" /><Key frame="130" value="26.2772" /><Key frame="167" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_左手ひろげ" id="18" localization="8" tooltip="Enter tooltip here" x="1679" y="709"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="72" size="72"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-74.5" /><Key frame="18" value="-83.939" /><Key frame="27" value="-62.3176" /><Key frame="45" value="-62.3176" /><Key frame="72" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="18" value="-77.4" /><Key frame="27" value="-98.3484" /><Key frame="45" value="-98.3484" /><Key frame="72" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="18" value="0.0976" /><Key frame="27" value="0.996" /><Key frame="45" value="0.996" /><Key frame="72" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="58" /><Key frame="18" value="39.4" /><Key frame="27" value="23.2058" /><Key frame="45" value="23.2058" /><Key frame="72" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="18" value="20.4" /><Key frame="27" value="21.9" /><Key frame="45" value="21.9" /><Key frame="72" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="18" value="-42.6" /><Key frame="27" value="-72.0688" /><Key frame="45" value="-72.0688" /><Key frame="72" value="-88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_左手ひろげで、ですか？" id="29" localization="8" tooltip="Enter tooltip here" x="1814" y="709"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="90" size="90"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="24" value="-76.7285" /><Key frame="35" value="-34.7" /><Key frame="59" value="-34.7" /><Key frame="89" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="24" value="-69.9609" /><Key frame="35" value="-69.9609" /><Key frame="59" value="-69.9609" /><Key frame="89" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="24" value="0.0316344" /><Key frame="35" value="1" /><Key frame="59" value="1" /><Key frame="89" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="24" value="2.37305" /><Key frame="35" value="2.37305" /><Key frame="59" value="2.37305" /><Key frame="89" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="24" value="30" /><Key frame="35" value="30" /><Key frame="59" value="30" /><Key frame="89" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="24" value="-74.6177" /><Key frame="35" value="-104.5" /><Key frame="59" value="-104.5" /><Key frame="89" value="-88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_手をポン、そうか" id="19" localization="8" tooltip=" &#x0A;" x="1966" y="707"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="93" size="93"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="37" value="-11.5" /><Key frame="43" value="2.00005" /><Key frame="49" value="-11.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="37" value="0" /><Key frame="43" value="0" /><Key frame="49" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="11" value="-75.3223" /><Key frame="30" value="-67.5" /><Key frame="38" value="-67.5" /><Key frame="41" value="-67.5" /><Key frame="49" value="-67.5" /><Key frame="64" value="-67.5" /><Key frame="75" value="-72.6855" smooth="1"><Tangent side="left" interpType="bezier" abscissaParam="-4.47694" ordinateParam="2.91898" /><Tangent side="right" interpType="bezier" abscissaParam="6" ordinateParam="-3.91203" /></Key><Key frame="93" value="-84.639" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-6.81027" ordinateParam="4.13591" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="11" value="-24.082" /><Key frame="30" value="-40" /><Key frame="38" value="-40" /><Key frame="41" value="-40" /><Key frame="49" value="-40" /><Key frame="64" value="-40" /><Key frame="75" value="-29.2676" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-3.59593" ordinateParam="-4.73221" /><Tangent side="right" interpType="bezier" abscissaParam="5.88424" ordinateParam="7.74362" /></Key><Key frame="93" value="-6.20706" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-7.38903" ordinateParam="-9.77579" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="0.8" /><Key frame="64" value="0.8" /><Key frame="93" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="11" value="72.334" /><Key frame="30" value="65" /><Key frame="38" value="65" /><Key frame="41" value="65" /><Key frame="49" value="65" /><Key frame="64" value="65" /><Key frame="75" value="70.3125" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-4.23257" ordinateParam="-2.2888" /><Tangent side="right" interpType="bezier" abscissaParam="6.92602" ordinateParam="3.7453" /></Key><Key frame="93" value="81.285" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-6.2315" ordinateParam="-4.13591" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="11" value="38.8554" /><Key frame="30" value="0.5" /><Key frame="38" value="0.5" /><Key frame="41" value="0.5" /><Key frame="49" value="0.5" /><Key frame="64" value="0.5"><Tangent side="left" interpType="bezier" abscissaParam="-5" ordinateParam="0" /><Tangent side="right" interpType="bezier" abscissaParam="5.7344" ordinateParam="0.4531" /></Key><Key frame="75" value="34.3215" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-2.80788" ordinateParam="-8.86139" /><Tangent side="right" interpType="bezier" abscissaParam="4.59471" ordinateParam="14.5004" /></Key><Key frame="93" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="11" value="-101.693" /><Key frame="30" value="-104.5" /><Key frame="38" value="-104.5" /><Key frame="41" value="-104.5" /><Key frame="49" value="-104.5" /><Key frame="64" value="-104.5" /><Key frame="75" value="-101.693" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-3.66667" ordinateParam="-2.00022" /><Tangent side="right" interpType="bezier" abscissaParam="6" ordinateParam="3.27308" /></Key><Key frame="93" value="-88.6801" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-7.50478" ordinateParam="-6.39186" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="69.6486" /><Key frame="38" value="69.6486" /><Key frame="41" value="67.8215" /><Key frame="49" value="69.6486" /><Key frame="64" value="69.6486" /><Key frame="75" value="69.873" /><Key frame="93" value="84.639" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-7.37654" ordinateParam="-6.70698" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="28.1185" /><Key frame="38" value="28.1185" /><Key frame="41" value="6.07939"><Tangent side="left" interpType="bezier" abscissaParam="-0.909371" ordinateParam="8.7906" /><Tangent side="right" interpType="bezier" abscissaParam="1.88723" ordinateParam="12.5398" /></Key><Key frame="49" value="32.5" /><Key frame="64" value="32.5" /><Key frame="75" value="30.4102" smooth="1"><Tangent side="left" interpType="bezier" abscissaParam="-3.66667" ordinateParam="3.66613" /><Tangent side="right" interpType="bezier" abscissaParam="6.55061" ordinateParam="-6.54966" /></Key><Key frame="93" value="6.20706" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-6.68827" ordinateParam="0.447134" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="93" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="11.0499" /><Key frame="38" value="11.0499" /><Key frame="41" value="10.5503" /><Key frame="49" value="11.0499" /><Key frame="64" value="11.0499" /><Key frame="75" value="14.5898" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-6.11003" ordinateParam="-2.457" /><Tangent side="right" interpType="bezier" abscissaParam="9.99823" ordinateParam="4.02055" /></Key><Key frame="93" value="81.285" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-9.44134" ordinateParam="-13.8611" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="11" value="-41.9091" /><Key frame="30" value="-1.33001" /><Key frame="38" value="-1.33001" /><Key frame="41" value="-5.94708" /><Key frame="49" value="-1.33001" /><Key frame="64" value="-1.33001" /><Key frame="70" value="-7.95149" /><Key frame="79" value="-33.5754" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-3.17698" ordinateParam="9.35849" /><Tangent side="right" interpType="bezier" abscissaParam="4.94198" ordinateParam="-14.5576" /></Key><Key frame="93" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="80" /><Key frame="38" value="80" /><Key frame="41" value="80" /><Key frame="49" value="80" /><Key frame="64" value="80" /><Key frame="75" value="81.1217" /><Key frame="79" value="82.2478" /><Key frame="93" value="88.6801" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-7.14444" ordinateParam="-4.02419" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_手を交互に広げ" id="20" localization="8" tooltip="Enter tooltip here" x="2092" y="708"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="116" size="150"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-84.6387" /><Key frame="40" value="-80.8901" /><Key frame="48" value="-74.2812" /><Key frame="57" value="-62.3176" /><Key frame="91" value="-62.3176" /><Key frame="116" value="-84.6387" /><Key frame="150" value="-74.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-6.24024" /><Key frame="40" value="-31.9043" /><Key frame="48" value="-77.4" /><Key frame="57" value="-98.3484" /><Key frame="91" value="-98.3484" /><Key frame="116" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="0.0325131" /><Key frame="40" value="0.0448154" /><Key frame="48" value="0.0316" /><Key frame="57" value="1" /><Key frame="91" value="1" /><Key frame="116" value="0.0325131" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="81.1231" /><Key frame="40" value="67.2363" /><Key frame="48" value="39.4" /><Key frame="57" value="23.2058" /><Key frame="91" value="23.2058" /><Key frame="116" value="81.1231" /><Key frame="150" value="58" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="51.9434" /><Key frame="40" value="51.6046" /><Key frame="48" value="26.5717" /><Key frame="57" value="21.9" /><Key frame="91" value="21.9" /><Key frame="103" value="50.0006" /><Key frame="116" value="51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-86.9273" /><Key frame="40" value="-52.2699" /><Key frame="48" value="-9.31412" /><Key frame="57" value="-72.0688" /><Key frame="91" value="-72.0688" /><Key frame="116" value="-86.9273" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="74.5" /><Key frame="18" value="73.4677" /><Key frame="27" value="62.3176" /><Key frame="91" value="62.3176" /><Key frame="116" value="84.6387" /><Key frame="150" value="74.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="41.0449" /><Key frame="18" value="77.4" /><Key frame="27" value="98.3484" /><Key frame="91" value="98.3484" /><Key frame="116" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.0571177" /><Key frame="18" value="0.0976" /><Key frame="27" value="0.996" /><Key frame="91" value="0.996" /><Key frame="116" value="0.033392" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="58" /><Key frame="18" value="39.4" /><Key frame="27" value="23.2058" /><Key frame="91" value="23.2058" /><Key frame="116" value="80.4199" /><Key frame="150" value="58" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-47.5621" /><Key frame="18" value="-21.9664" /><Key frame="27" value="-21.9" /><Key frame="91" value="-21.9" /><Key frame="103" value="-51.3579" /><Key frame="116" value="-52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="40.252" /><Key frame="18" value="9.31412" /><Key frame="27" value="72.0688" /><Key frame="91" value="72.0688" /><Key frame="116" value="87.5378" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_指を広げてこんなに沢山" id="94" localization="8" tooltip="Enter tooltip here" x="623" y="915"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="106" size="106"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="28" value="-11.5" /><Key frame="36" value="2.00005" /><Key frame="51" value="-11.4592" /><Key frame="103" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="15" value="-71" /><Key frame="36" value="-88.5" /><Key frame="46" value="-70" /><Key frame="68" value="-70" /><Key frame="88" value="-71" /><Key frame="103" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="36" value="-85" /><Key frame="46" value="-85" /><Key frame="68" value="-85" /><Key frame="103" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="36" value="0.0108" /><Key frame="46" value="1" /><Key frame="68" value="1" /><Key frame="103" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="36" value="-10" /><Key frame="46" value="-10" /><Key frame="68" value="-10" /><Key frame="103" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="36" value="15" /><Key frame="46" value="15" /><Key frame="68" value="15" /><Key frame="103" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="36" value="70" /><Key frame="46" value="80" /><Key frame="68" value="80" /><Key frame="103" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="15" value="71" /><Key frame="36" value="88.5" /><Key frame="46" value="70" /><Key frame="68" value="70" /><Key frame="88" value="71" /><Key frame="103" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="36" value="85" /><Key frame="46" value="85" /><Key frame="68" value="85" /><Key frame="103" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="36" value="0.0108" /><Key frame="46" value="1" /><Key frame="68" value="1" /><Key frame="103" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="36" value="-10" /><Key frame="46" value="-10" /><Key frame="68" value="-10" /><Key frame="103" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="36" value="-15" /><Key frame="46" value="-15" /><Key frame="68" value="-15" /><Key frame="103" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="36" value="-70" /><Key frame="46" value="-80" /><Key frame="68" value="-80" /><Key frame="103" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="103" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_片手でどうぞ" id="21" localization="8" tooltip="Enter tooltip here" x="766" y="915"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="88" size="88"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="15" value="86.4384" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-5" ordinateParam="0" /><Tangent side="right" interpType="bezier" abscissaParam="2.66667" ordinateParam="0" /></Key><Key frame="23" value="77.4" /><Key frame="36" value="30.5692" /><Key frame="61" value="30.5692" /><Key frame="88" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="92.1835" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-7.66666" ordinateParam="0" /><Tangent side="right" interpType="bezier" abscissaParam="4.33333" ordinateParam="0" /></Key><Key frame="36" value="85.2" /><Key frame="61" value="85.2" /><Key frame="88" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.02" /><Key frame="36" value="1" /><Key frame="61" value="1" /><Key frame="88" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="26.282" /><Key frame="36" value="15" /><Key frame="61" value="15" /><Key frame="88" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="15" value="-40.5908" /><Key frame="23" value="-18.5392" /><Key frame="36" value="-10" /><Key frame="61" value="-10" /><Key frame="76" value="-40.5908" /><Key frame="88" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="25.3104" /><Key frame="36" value="88.7" /><Key frame="61" value="88.7" /><Key frame="88" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_片手でタブレット注目" id="91" localization="8" tooltip="Enter tooltip here" x="918" y="913"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="68" size="68"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="2.00005" /><Key frame="40" value="2.00005" /><Key frame="65" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="89.5" /><Key frame="40" value="89.5" /><Key frame="65" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="-2.9" /><Key frame="40" value="-2.9" /><Key frame="65" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="40" value="1" /><Key frame="65" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="29.3" /><Key frame="40" value="29.3" /><Key frame="65" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-53.2" /><Key frame="40" value="-53.2" /><Key frame="65" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="104.5" /><Key frame="40" value="104.5" /><Key frame="65" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="65" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_片手で胸をグっ" id="23" localization="8" tooltip="Enter tooltip here" x="1067" y="907"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="81" size="81"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="36" value="-11.4591" /><Key frame="43" value="0" /><Key frame="50" value="-11.4591" /><Key frame="81" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="36" value="0" /><Key frame="43" value="0" /><Key frame="50" value="0" /><Key frame="81" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="27" value="76.7" /><Key frame="35" value="76.7" /><Key frame="42" value="86" /><Key frame="49" value="76.7" /><Key frame="81" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="27" value="12.4029" /><Key frame="35" value="12.8" /><Key frame="42" value="12.8" /><Key frame="49" value="12.8" /><Key frame="81" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="27" value="0.9" /><Key frame="35" value="0.9" /><Key frame="42" value="0" /><Key frame="49" value="0.0325131" /><Key frame="81" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="6.40004" /><Key frame="35" value="5.8" /><Key frame="42" value="5.8" /><Key frame="49" value="5.8" /><Key frame="81" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-49.0555" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-3.88002" ordinateParam="-1.63401" /><Tangent side="right" interpType="bezier" abscissaParam="6.59605" ordinateParam="2.77781" /></Key><Key frame="27" value="-9.1734" /><Key frame="35" value="-9.6" /><Key frame="42" value="-9.6" /><Key frame="49" value="-9.6" /><Key frame="67" value="-49.0555" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-6.44681" ordinateParam="-2.71497" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key><Key frame="81" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="27" value="87.0104" /><Key frame="35" value="87.0104" /><Key frame="42" value="87.0104" /><Key frame="49" value="87" /><Key frame="81" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_片手上げて見渡す" id="228" localization="8" tooltip="Enter tooltip here" x="1215" y="911"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="165" size="165"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="35" value="-21.5" /><Key frame="45" value="-21.5" /><Key frame="62" value="-21.3574" /><Key frame="70" value="-21.3574" /><Key frame="87" value="-21.5" /><Key frame="102" value="-21.4453" /><Key frame="110" value="-21.4453" /><Key frame="128" value="-21.5" /><Key frame="135" value="-21.5" /><Key frame="165" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="35" value="-4.70003e-21" /><Key frame="45" value="-4.70003e-21" /><Key frame="62" value="35.0684" /><Key frame="70" value="35.0684" /><Key frame="87" value="-4.70003e-21" /><Key frame="102" value="-34.8047" /><Key frame="110" value="-34.8047" /><Key frame="128" value="-4.70003e-21" /><Key frame="135" value="-4.70003e-21" /><Key frame="165" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="35" value="-10" /><Key frame="45" value="-10" /><Key frame="60" value="-11.0742" /><Key frame="70" value="-11.0742" /><Key frame="85" value="-10" /><Key frame="100" value="-11.0742" /><Key frame="110" value="-11.0742" /><Key frame="125" value="-10" /><Key frame="135" value="-10" /><Key frame="165" value="-0.215502" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="35" value="-29.707" /><Key frame="135" value="-29.707" /><Key frame="165" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="35" value="-70.3125" /><Key frame="135" value="-70.3125" /><Key frame="165" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="35" value="0.0263621" /><Key frame="135" value="0.0263621" /><Key frame="165" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="35" value="94.4824" /><Key frame="135" value="94.4824" /><Key frame="165" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="35" value="9.14062" /><Key frame="135" value="9.14062" /><Key frame="165" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="35" value="-2.63916" /><Key frame="135" value="-2.63916" /><Key frame="165" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="35" value="72.4" /><Key frame="45" value="72.4" /><Key frame="60" value="61.1719" /><Key frame="70" value="61.1719" /><Key frame="85" value="72.4" /><Key frame="100" value="89.5" /><Key frame="110" value="89.5" /><Key frame="125" value="72.4" /><Key frame="135" value="72.4" /><Key frame="159" value="79.8047" /><Key frame="165" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="35" value="38.584" /><Key frame="45" value="38.584" /><Key frame="60" value="60.7324" /><Key frame="70" value="60.7324" /><Key frame="85" value="38.584" /><Key frame="100" value="-13.3594" /><Key frame="110" value="-13.3594" /><Key frame="125" value="38.584" /><Key frame="135" value="38.584" /><Key frame="159" value="18.9844" /><Key frame="165" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="35" value="1" /><Key frame="45" value="1" /><Key frame="60" value="0.970123" /><Key frame="70" value="0.970123" /><Key frame="85" value="1" /><Key frame="100" value="0.971002" /><Key frame="110" value="0.971002" /><Key frame="125" value="1" /><Key frame="135" value="1" /><Key frame="159" value="0.403339" /><Key frame="165" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="35" value="-41.6602" /><Key frame="45" value="-41.6602" /><Key frame="60" value="-21.709" /><Key frame="70" value="-21.709" /><Key frame="85" value="-41.6602" /><Key frame="100" value="-93.252" /><Key frame="110" value="-93.252" /><Key frame="125" value="-41.6602" /><Key frame="135" value="-41.6602" /><Key frame="165" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="35" value="-26.8" /><Key frame="45" value="-26.8" /><Key frame="60" value="-2.10938" /><Key frame="70" value="-2.10938" /><Key frame="85" value="-26.8" /><Key frame="100" value="-47.4609" /><Key frame="110" value="-47.4609" /><Key frame="125" value="-26.8" /><Key frame="135" value="-26.8" /><Key frame="159" value="-51.3776" /><Key frame="165" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="35" value="41.2188" /><Key frame="45" value="41.2188" /><Key frame="60" value="22.8494" /><Key frame="70" value="22.8494" /><Key frame="85" value="41.2188" /><Key frame="100" value="62.6644" /><Key frame="110" value="62.6644" /><Key frame="125" value="41.2188" /><Key frame="135" value="41.2188" /><Key frame="159" value="70.3989" /><Key frame="165" value="88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="60" value="-0.615236" /><Key frame="70" value="-0.615236" /><Key frame="100" value="-1.14258" /><Key frame="110" value="-1.14258" /><Key frame="165" value="1.27266e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="60" value="-5.80078" /><Key frame="70" value="-5.80078" /><Key frame="100" value="-6.15235" /><Key frame="110" value="-6.15235" /><Key frame="165" value="-4.23162" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_片手高く上げてバイバイ" id="24" localization="8" tooltip="Enter tooltip here" x="1367" y="913"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="143" size="143"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="29" value="20" /><Key frame="45" value="20" /><Key frame="60" value="20" /><Key frame="75" value="20" /><Key frame="90" value="20" /><Key frame="113" value="55.3" /><Key frame="130" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="29" value="87" /><Key frame="45" value="90" /><Key frame="60" value="87" /><Key frame="75" value="90" /><Key frame="90" value="87" /><Key frame="130" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="29" value="1" /><Key frame="45" value="1" /><Key frame="60" value="1" /><Key frame="75" value="1" /><Key frame="90" value="1" /><Key frame="130" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="29" value="-55" /><Key frame="45" value="-55" /><Key frame="60" value="-55" /><Key frame="75" value="-55" /><Key frame="90" value="-55" /><Key frame="130" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="13" value="-46.1" /><Key frame="29" value="-1" /><Key frame="45" value="-32" /><Key frame="60" value="-1" /><Key frame="75" value="-30" /><Key frame="90" value="-1" /><Key frame="113" value="-40.4" /><Key frame="130" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="29" value="-79.4" /><Key frame="45" value="-60" /><Key frame="60" value="-79.4" /><Key frame="75" value="-60" /><Key frame="90" value="-79.4" /><Key frame="130" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="n_胸に手(閉じて）" id="26" localization="8" tooltip="Enter tooltip here" x="1537" y="907"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="80" size="80"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="16" value="68.9" /><Key frame="27" value="76.7" /><Key frame="50" value="76.7" /><Key frame="64" value="79.4531" /><Key frame="80" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="16" value="39.2" /><Key frame="27" value="12.4029" /><Key frame="50" value="12.4029" /><Key frame="64" value="9.58008" /><Key frame="80" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="16" value="0" /><Key frame="27" value="0" /><Key frame="50" value="0" /><Key frame="64" value="0.033392" /><Key frame="80" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="16" value="33.6" /><Key frame="27" value="-6.4" /><Key frame="50" value="-6.4" /><Key frame="64" value="33.0469" /><Key frame="80" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="16" value="-37.5" /><Key frame="27" value="-9.1734" /><Key frame="50" value="-9.1734" /><Key frame="64" value="-48.7793" /><Key frame="80" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="27" value="87.0104" /><Key frame="50" value="87.0104" /><Key frame="64" value="87.7135" /><Key frame="80" value="88.6801" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_腕自慢" id="85" localization="8" tooltip="Enter tooltip here" x="627" y="1086"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="90" size="90"><ActuatorList model=""><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="50.7159" /><Key frame="40" value="88.5" /><Key frame="55" value="50.7159" /><Key frame="60" value="50.7159" /><Key frame="90" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="105.292" /><Key frame="33" value="119.5" /><Key frame="40" value="96.6" /><Key frame="47" value="73.6" /><Key frame="55" value="105.292" /><Key frame="60" value="105.292" /><Key frame="90" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0.0224" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="6.3306" /><Key frame="55" value="6.3306" /><Key frame="60" value="6.3306" /><Key frame="90" value="81.5625" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-45.6708" /><Key frame="25" value="-0.5" /><Key frame="40" value="-15.8" /><Key frame="55" value="-0.5" /><Key frame="60" value="-0.5" /><Key frame="77" value="-45.9898" /><Key frame="90" value="-51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="87.362" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_わくわく" id="103" localization="8" tooltip="Enter tooltip here" x="783" y="1080"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="125" size="125"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="31" value="-20" /><Key frame="38" value="-5" /><Key frame="45" value="-20" /><Key frame="52" value="-5" /><Key frame="58" value="-20" /><Key frame="67" value="-20" /><Key frame="74" value="5" /><Key frame="81" value="-20" /><Key frame="95" value="-20" /><Key frame="125" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-77.4" /><Key frame="37" value="-84" /><Key frame="44" value="-77.4" /><Key frame="51" value="-84" /><Key frame="58" value="-77.4" /><Key frame="66" value="-77.4" /><Key frame="73" value="-84" /><Key frame="80" value="-77.4" /><Key frame="95" value="-77.4" /><Key frame="125" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-97.9969" /><Key frame="37" value="-98.7" /><Key frame="44" value="-97.9969" /><Key frame="51" value="-98.7" /><Key frame="58" value="-97.9969" /><Key frame="66" value="-97.9969" /><Key frame="73" value="-98.7" /><Key frame="80" value="-97.9969" /><Key frame="95" value="-97.9969" /><Key frame="125" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="26.282" /><Key frame="37" value="42.2" /><Key frame="44" value="26.282" /><Key frame="51" value="42.2" /><Key frame="58" value="26.282" /><Key frame="66" value="26.282" /><Key frame="73" value="50" /><Key frame="80" value="26.282" /><Key frame="95" value="26.282" /><Key frame="125" value="81.4746" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="14" value="45" /><Key frame="30" value="0.5" /><Key frame="95" value="0.5" /><Key frame="106" value="48" smooth="1"><Tangent side="left" interpType="bezier" abscissaParam="-4.29033" ordinateParam="-5.94433" /><Tangent side="right" interpType="bezier" abscissaParam="7.42149" ordinateParam="10.2826" /></Key><Key frame="125" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-25.3104" /><Key frame="37" value="-25.662" /><Key frame="44" value="-25.3104" /><Key frame="51" value="-25.662" /><Key frame="58" value="-25.3104" /><Key frame="66" value="-25.3104" /><Key frame="73" value="-25.662" /><Key frame="80" value="-25.3104" /><Key frame="95" value="-25.3104" /><Key frame="125" value="-87.4547" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="77.4" /><Key frame="37" value="84" /><Key frame="44" value="77.4" /><Key frame="51" value="84.6421" /><Key frame="58" value="77.4" /><Key frame="66" value="77.4" /><Key frame="73" value="84.6421" /><Key frame="80" value="77.4" /><Key frame="95" value="77.4" /><Key frame="125" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="97.9969" /><Key frame="37" value="98.7" /><Key frame="44" value="97.9969" /><Key frame="51" value="98.7" /><Key frame="58" value="97.9969" /><Key frame="66" value="97.9969" /><Key frame="73" value="98.7" /><Key frame="80" value="97.9969" /><Key frame="95" value="97.9969" /><Key frame="125" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="26.282" /><Key frame="37" value="42.2" /><Key frame="44" value="26.282" /><Key frame="51" value="42.2" /><Key frame="58" value="26.282" /><Key frame="66" value="26.282" /><Key frame="73" value="50" /><Key frame="80" value="26.282" /><Key frame="95" value="26.282" /><Key frame="125" value="81.4746" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="14" value="-45" /><Key frame="30" value="-0.5" /><Key frame="95" value="-0.5" /><Key frame="106" value="-48" smooth="1"><Tangent side="left" interpType="bezier" abscissaParam="-3.66667" ordinateParam="9.92349" /><Tangent side="right" interpType="bezier" abscissaParam="5.16633" ordinateParam="-13.9821" /></Key><Key frame="125" value="-52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="25.3104" /><Key frame="37" value="25.662" /><Key frame="44" value="25.3104" /><Key frame="51" value="25.662" /><Key frame="58" value="25.3104" /><Key frame="66" value="25.3104" /><Key frame="73" value="25.662" /><Key frame="80" value="25.3104" /><Key frame="95" value="25.3104" /><Key frame="125" value="87.5378" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_エクセレント！" id="63" localization="8" tooltip="Enter tooltip here" x="929" y="1084"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="88" size="88"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-11.4592" /><Key frame="30" value="-11.4592" /><Key frame="36" value="2.00005" /><Key frame="43" value="-21.5" /><Key frame="60" value="-21.5" /><Key frame="88" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-0.187434" /><Key frame="43" value="-10" /><Key frame="60" value="-10" /><Key frame="88" value="-0.188581" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-83.939" /><Key frame="30" value="-83.939" /><Key frame="43" value="-50" /><Key frame="60" value="-50" /><Key frame="88" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-77.4" /><Key frame="30" value="-77.4" /><Key frame="43" value="-85" /><Key frame="60" value="-85" /><Key frame="88" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="36" value="0.0976" /><Key frame="43" value="1" /><Key frame="60" value="1" /><Key frame="88" value="0.0351493" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="27.1925" /><Key frame="30" value="27.1925" /><Key frame="43" value="0.204119" /><Key frame="60" value="0.204119" /><Key frame="88" value="81.5625" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="16" value="49" /><Key frame="25" value="10" /><Key frame="60" value="10" /><Key frame="70" value="37" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-2.38632" ordinateParam="-6.72347" /><Tangent side="right" interpType="bezier" abscissaParam="4.29537" ordinateParam="12.1022" /></Key><Key frame="88" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-9.31412" /><Key frame="30" value="-9.31412" /><Key frame="43" value="-12.5" /><Key frame="60" value="-12.5" /><Key frame="88" value="-86.4879" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="83.939" /><Key frame="30" value="83.939" /><Key frame="43" value="50" /><Key frame="60" value="50" /><Key frame="88" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="77.4" /><Key frame="30" value="77.4" /><Key frame="43" value="85" /><Key frame="60" value="85" /><Key frame="88" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="36" value="0.0976" /><Key frame="43" value="1" /><Key frame="60" value="1" /><Key frame="88" value="0.0377855" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="27.1925" /><Key frame="30" value="27.1925" /><Key frame="43" value="0.204119" /><Key frame="60" value="0.204119" /><Key frame="88" value="81.5625" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="16" value="-49" /><Key frame="25" value="-10" /><Key frame="60" value="-10" /><Key frame="70" value="-37" smooth="1"><Tangent side="left" interpType="bezier" abscissaParam="-3.33333" ordinateParam="8.78801" /><Tangent side="right" interpType="bezier" abscissaParam="4.43742" ordinateParam="-11.6988" /></Key><Key frame="88" value="-52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="9.31412" /><Key frame="30" value="9.31412" /><Key frame="43" value="12.5" /><Key frame="60" value="12.5" /><Key frame="88" value="87.6256" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="88" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_いっくぞー！" id="27" localization="8" tooltip="Enter tooltip here" x="1076" y="1080"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="110" size="110"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="40" value="-11" /><Key frame="59" value="-25" /><Key frame="80" value="-25" /><Key frame="110" value="-11.4258" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="40" value="0" /><Key frame="59" value="0" /><Key frame="80" value="0" /><Key frame="110" value="-0.0878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="21" value="-10" /><Key frame="33" value="-20" /><Key frame="40" value="-20" /><Key frame="59" value="-2.97277e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="21" value="-3.99982" /><Key frame="33" value="0" /><Key frame="40" value="0" /><Key frame="59" value="-3.99982" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="83.6343" /><Key frame="21" value="84.9937" /><Key frame="40" value="84.9937" /><Key frame="59" value="2.99072" /><Key frame="80" value="2.99072" /><Key frame="110" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="45.2224" /><Key frame="21" value="97.909" /><Key frame="40" value="97.909" /><Key frame="59" value="93.1628" /><Key frame="80" value="93.1628" /><Key frame="110" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="40" value="0.0272" /><Key frame="59" value="0.9988" /><Key frame="80" value="0.9988" /><Key frame="110" value="0.0369068" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="53.8442" /><Key frame="21" value="16.5" /><Key frame="33" value="36.5" /><Key frame="40" value="36.5" /><Key frame="59" value="-61.7855" /><Key frame="80" value="-61.7855" /><Key frame="110" value="81.5625" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-49.9412" /><Key frame="21" value="-0.5" /><Key frame="40" value="-0.5" /><Key frame="59" value="-6.85796" /><Key frame="80" value="-6.85796" /><Key frame="93" value="-43.3983" /><Key frame="110" value="-51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="60.5421" /><Key frame="21" value="25.8378" /><Key frame="40" value="25.8378" /><Key frame="59" value="24.5194" /><Key frame="80" value="24.5194" /><Key frame="110" value="87.6256" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_ドヤ" id="192" localization="8" tooltip="Enter tooltip here" x="1235" y="1077"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="60" size="60"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="-30" /><Key frame="40" value="-30" /><Key frame="60" value="-11.4258" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="40" value="-7.22616e-07" /><Key frame="60" value="-3.60351" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_バンザイ" id="33" localization="8" tooltip="Enter tooltip here" x="1382" y="1076"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="115" size="115"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="50" value="-25" /><Key frame="75" value="-25" /><Key frame="115" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="50" value="0" /><Key frame="75" value="0" /><Key frame="115" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="23" value="-20" /><Key frame="50" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="23" value="-3.40445e-15" /><Key frame="50" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="23" value="0" /><Key frame="50" value="-4.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="12" value="-82" /><Key frame="23" value="-80" /><Key frame="50" value="-2" /><Key frame="75" value="-2" /><Key frame="115" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="12" value="-40" /><Key frame="23" value="-75" /><Key frame="50" value="35.4" /><Key frame="75" value="35.4" /><Key frame="115" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.0128" /><Key frame="50" value="1" /><Key frame="75" value="1" /><Key frame="115" value="0.0360281" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="12" value="77.7536" /><Key frame="23" value="56.8635" /><Key frame="50" value="-68" /><Key frame="75" value="-68" /><Key frame="115" value="81.4746" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="12" value="42" /><Key frame="23" value="9" /><Key frame="50" value="23.4" /><Key frame="75" value="23.4" /><Key frame="115" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="12" value="-50.0392" /><Key frame="23" value="-14.9971" /><Key frame="50" value="-67.7" /><Key frame="75" value="-67.7" /><Key frame="115" value="-87" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="82" /><Key frame="23" value="80" /><Key frame="50" value="2" /><Key frame="75" value="2" /><Key frame="115" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="40" /><Key frame="23" value="75" /><Key frame="50" value="-35.4" /><Key frame="75" value="-35.4" /><Key frame="115" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.0108" /><Key frame="50" value="1" /><Key frame="75" value="1" /><Key frame="115" value="0.0369068" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="12" value="77.5165" /><Key frame="23" value="56.7805" /><Key frame="50" value="-68" /><Key frame="75" value="-68" /><Key frame="115" value="81.5625" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="12" value="-42" /><Key frame="23" value="-9" /><Key frame="50" value="-23.4" /><Key frame="75" value="-23.4" /><Key frame="115" value="-52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="12" value="50" /><Key frame="23" value="15" /><Key frame="50" value="67.7" /><Key frame="75" value="67.7" /><Key frame="115" value="87" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_バンザイ2" id="68" localization="8" tooltip="Enter tooltip here" x="1534" y="1077"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="164" size="164"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-11.4592" /><Key frame="35" value="-11.4592" /><Key frame="53" value="-30" /><Key frame="63" value="-30" /><Key frame="81" value="-11.4592" /><Key frame="87" value="-11.4592" /><Key frame="107" value="-30" /><Key frame="124" value="-30" /><Key frame="164" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="0" /><Key frame="35" value="0" /><Key frame="53" value="0" /><Key frame="63" value="0" /><Key frame="81" value="0" /><Key frame="87" value="0" /><Key frame="107" value="0" /><Key frame="124" value="0" /><Key frame="164" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-80" /><Key frame="35" value="-80" /><Key frame="53" value="-2.99072" /><Key frame="63" value="-2.99072" /><Key frame="81" value="-80" /><Key frame="87" value="-80" /><Key frame="107" value="-2.99072" /><Key frame="124" value="-2.99072" /><Key frame="164" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-60" /><Key frame="35" value="-60" /><Key frame="53" value="-93.1628" /><Key frame="63" value="-93.1628" /><Key frame="81" value="-60" /><Key frame="87" value="-60" /><Key frame="107" value="-93.1628" /><Key frame="124" value="-93.1628" /><Key frame="164" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="0" /><Key frame="35" value="0" /><Key frame="53" value="0.9988" /><Key frame="63" value="0.9988" /><Key frame="81" value="0" /><Key frame="87" value="0" /><Key frame="107" value="0.9988" /><Key frame="124" value="0.9988" /><Key frame="164" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="-4" /><Key frame="35" value="-4" /><Key frame="53" value="-61.7855" /><Key frame="63" value="-61.7855" /><Key frame="81" value="-4" /><Key frame="87" value="-4" /><Key frame="107" value="-61.7855" /><Key frame="124" value="-61.7855" /><Key frame="164" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="15" /><Key frame="35" value="15" /><Key frame="53" value="6.85796" /><Key frame="63" value="6.85796" /><Key frame="81" value="15" /><Key frame="87" value="15" /><Key frame="107" value="6.85796" /><Key frame="124" value="6.85796" /><Key frame="164" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-100" /><Key frame="35" value="-100" /><Key frame="53" value="50" /><Key frame="63" value="50" /><Key frame="81" value="-100" /><Key frame="87" value="-100" /><Key frame="107" value="50" /><Key frame="124" value="50" /><Key frame="164" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="80" /><Key frame="35" value="80" /><Key frame="53" value="2.99072" /><Key frame="63" value="2.99072" /><Key frame="81" value="80" /><Key frame="87" value="80" /><Key frame="107" value="2.99072" /><Key frame="124" value="2.99072" /><Key frame="164" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="60" /><Key frame="35" value="60" /><Key frame="53" value="93.1628" /><Key frame="63" value="93.1628" /><Key frame="81" value="60" /><Key frame="87" value="60" /><Key frame="107" value="93.1628" /><Key frame="124" value="93.1628" /><Key frame="164" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="0" /><Key frame="35" value="0" /><Key frame="53" value="0.9988" /><Key frame="63" value="0.9988" /><Key frame="81" value="0" /><Key frame="87" value="0" /><Key frame="107" value="0.9988" /><Key frame="124" value="0.9988" /><Key frame="164" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="-4" /><Key frame="35" value="-4" /><Key frame="53" value="-61.7855" /><Key frame="63" value="-61.7855" /><Key frame="81" value="-4" /><Key frame="87" value="-4" /><Key frame="107" value="-61.7855" /><Key frame="124" value="-61.7855" /><Key frame="164" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-15" /><Key frame="35" value="-15" /><Key frame="53" value="-6.85796" /><Key frame="63" value="-6.85796" /><Key frame="81" value="-15" /><Key frame="87" value="-15" /><Key frame="107" value="-6.85796" /><Key frame="124" value="-6.85796" /><Key frame="164" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="100" /><Key frame="35" value="100" /><Key frame="53" value="-50" /><Key frame="63" value="-50" /><Key frame="81" value="100" /><Key frame="87" value="100" /><Key frame="107" value="-50" /><Key frame="124" value="-50" /><Key frame="164" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_パーフェクト！" id="66" localization="8" tooltip="Enter tooltip here" x="1671" y="1074"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="130" size="130"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-11.4592" /><Key frame="36" value="2.00005" /><Key frame="43" value="-21.5" /><Key frame="76" value="-21.5" /><Key frame="83" value="-5" /><Key frame="90" value="-21.5" /><Key frame="99" value="-21.5" /><Key frame="130" value="-11.4258" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-0.187434" /><Key frame="43" value="-10" /><Key frame="99" value="-10" /><Key frame="130" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-80" /><Key frame="43" value="-50" /><Key frame="99" value="-50" /><Key frame="130" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="12" value="-37.4414" /><Key frame="25" value="-77.4" /><Key frame="30" value="-77.4" /><Key frame="43" value="-85" /><Key frame="99" value="-85" /><Key frame="130" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="36" value="0" /><Key frame="43" value="1" /><Key frame="75" value="1" /><Key frame="82" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="12" value="58.5352" /><Key frame="25" value="27.1925" /><Key frame="30" value="27.1925" /><Key frame="43" value="0.204119" /><Key frame="75" value="0.204119" /><Key frame="82" value="10.7" /><Key frame="89" value="0.204119" /><Key frame="99" value="0.204119" /><Key frame="130" value="81.4746" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="12" value="50" /><Key frame="25" value="10" /><Key frame="99" value="10" /><Key frame="113" value="38.3" /><Key frame="130" value="51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="12" value="-52" /><Key frame="25" value="-9.31412" /><Key frame="30" value="-9.31412" /><Key frame="43" value="-12.5" /><Key frame="99" value="-12.5" /><Key frame="130" value="-86" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="80" /><Key frame="43" value="50" /><Key frame="99" value="50" /><Key frame="130" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="37.3535" /><Key frame="25" value="77.4" /><Key frame="30" value="77.4" /><Key frame="43" value="85" /><Key frame="99" value="85" /><Key frame="130" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="36" value="0" /><Key frame="43" value="1" /><Key frame="75" value="1" /><Key frame="82" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="12" value="58.0078" /><Key frame="25" value="27.1925" /><Key frame="30" value="27.1925" /><Key frame="43" value="0.204119" /><Key frame="75" value="0.204119" /><Key frame="82" value="10.7" /><Key frame="89" value="0.204119" /><Key frame="99" value="0.204119" /><Key frame="130" value="81.4746" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="12" value="-50" /><Key frame="25" value="-10" /><Key frame="99" value="-10" /><Key frame="113" value="-38.3" /><Key frame="130" value="-51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="12" value="52" /><Key frame="25" value="9.31412" /><Key frame="30" value="9.31412" /><Key frame="43" value="12.5" /><Key frame="99" value="12.5" /><Key frame="130" value="86" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_上向きガッツ" id="230" localization="8" tooltip="Enter tooltip here" x="1806" y="1074"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="72" size="72"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="19" value="-11.1" /><Key frame="26" value="8.5" /><Key frame="33" value="-11.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="16" value="-77.4" /><Key frame="42" value="-77.4" /><Key frame="64" value="-84.5508" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="16" value="-97.9969" /><Key frame="42" value="-97.9969" /><Key frame="64" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="18" value="69.4" /><Key frame="25" value="82.3" /><Key frame="32" value="69.4" /><Key frame="42" value="69.4" /><Key frame="64" value="81.3867" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="16" value="0.5" /><Key frame="42" value="0.5" /><Key frame="54" value="46" /><Key frame="64" value="51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="16" value="-25.3104" /><Key frame="42" value="-25.3104" /><Key frame="64" value="-87" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="16" value="77.4" /><Key frame="42" value="77.4" /><Key frame="64" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="16" value="97.9969" /><Key frame="42" value="97.9969" /><Key frame="64" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="18" value="69.4" /><Key frame="25" value="82.3" /><Key frame="32" value="69.4" /><Key frame="42" value="69.4" /><Key frame="64" value="81.6504" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="16" value="-0.5" /><Key frame="42" value="-0.5" /><Key frame="54" value="-46" /><Key frame="64" value="-51.9434" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="16" value="25.3104" /><Key frame="42" value="25.3104" /><Key frame="64" value="87" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_片手ずつバンザイ" id="61" localization="8" tooltip="Enter tooltip here" x="1959" y="1079"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="115" size="115"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-30" /><Key frame="40" value="-30" /><Key frame="70" value="-30" /><Key frame="80" value="-30" /><Key frame="115" value="-11.4258" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="-30" /><Key frame="40" value="-30" /><Key frame="70" value="30" /><Key frame="80" value="30" /><Key frame="115" value="-0.0878909" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="40" value="-84.6387" /><Key frame="80" value="-1.99996" /><Key frame="115" value="-84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-6.15235" /><Key frame="80" value="35.4" /><Key frame="115" value="-6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="40" value="0.0641476" /><Key frame="80" value="0.866" /><Key frame="115" value="0.0369068" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="81.5625" /><Key frame="80" value="-68" /><Key frame="115" value="81.5625" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="51.9434" /><Key frame="80" value="23.4" /><Key frame="115" value="52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-86.5758" /><Key frame="80" value="-67.7" /><Key frame="115" value="-87.8941" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="2" /><Key frame="40" value="2" /><Key frame="70" value="1.99996" /><Key frame="80" value="1.99996" /><Key frame="115" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="-35.4" /><Key frame="40" value="-35.4" /><Key frame="70" value="-35.4" /><Key frame="80" value="-35.4" /><Key frame="115" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="40" value="1" /><Key frame="70" value="1" /><Key frame="80" value="1" /><Key frame="115" value="0.0360281" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="-68" /><Key frame="40" value="-68" /><Key frame="70" value="-68" /><Key frame="80" value="-68" /><Key frame="115" value="81.2109" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-23.4" /><Key frame="40" value="-23.4" /><Key frame="70" value="-23.4" /><Key frame="80" value="-23.4" /><Key frame="115" value="-52.0312" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="67.7" /><Key frame="40" value="67.7" /><Key frame="70" value="67.7" /><Key frame="80" value="67.7" /><Key frame="115" value="87.4499" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="+_片手でガッツポーズ" id="35" localization="8" tooltip="Enter tooltip here" x="2107" y="1074"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="96" size="96"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-20" /><Key frame="37" value="-5" /><Key frame="44" value="-20" /><Key frame="68" value="-20" /><Key frame="96" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="22" value="-10" /><Key frame="29" value="-10" /><Key frame="36" value="-10" /><Key frame="43" value="-10" /><Key frame="68" value="-10" /><Key frame="96" value="-0.188581" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="22" value="-3.40445e-15" /><Key frame="29" value="-3.40445e-15" /><Key frame="36" value="-3.40445e-15" /><Key frame="43" value="-3.40445e-15" /><Key frame="68" value="-3.40445e-15" /><Key frame="96" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="22" value="-3.99982" /><Key frame="29" value="-3.99982" /><Key frame="36" value="-3.99982" /><Key frame="43" value="-3.99982" /><Key frame="68" value="-3.99982" /><Key frame="96" value="-4.20201" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="9" value="80.1562" /><Key frame="22" value="77.4" /><Key frame="29" value="77.4" /><Key frame="36" value="84.6421" /><Key frame="43" value="77.4" /><Key frame="68" value="77.4" /><Key frame="96" value="84.6387" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="9" value="36.0352" /><Key frame="22" value="97.9969" /><Key frame="68" value="97.9969" /><Key frame="96" value="6.24024" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="9" value="64.3359" /><Key frame="22" value="26.282" /><Key frame="29" value="26.282" /><Key frame="36" value="42.2" /><Key frame="43" value="26.282" /><Key frame="68" value="26.282" /><Key frame="96" value="81.5625" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="9" value="-47.0855" /><Key frame="22" value="-0.5" /><Key frame="68" value="-0.5" /><Key frame="84" value="-49.562" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-6.35119" ordinateParam="9.65" /><Tangent side="right" interpType="bezier" abscissaParam="4.76339" ordinateParam="-7.2375" /></Key><Key frame="96" value="-52.0312" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-4" ordinateParam="-2.48084" /><Tangent side="right" interpType="bezier" abscissaParam="0" ordinateParam="0" /></Key></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="9" value="68.0258" /><Key frame="22" value="25.3104" /><Key frame="68" value="25.3104" /><Key frame="96" value="87.5378" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_頭かきかき" id="28" localization="8" tooltip="Enter tooltip here" x="635" y="1282"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="107" size="107"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-11.4592" /><Key frame="37" value="5" /><Key frame="44" value="-11.4592" /><Key frame="51" value="5" /><Key frame="58" value="-11.4592" /><Key frame="65" value="5" /><Key frame="72" value="5" /><Key frame="107" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="-4.70003e-21" /><Key frame="37" value="-4.70003e-21" /><Key frame="44" value="-4.70003e-21" /><Key frame="51" value="-4.70003e-21" /><Key frame="58" value="-4.70003e-21" /><Key frame="65" value="-4.70003e-21" /><Key frame="72" value="-4.70003e-21" /><Key frame="107" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="13" value="72.4" /><Key frame="30" value="80" /><Key frame="37" value="89.5" /><Key frame="44" value="80" /><Key frame="51" value="89.5" /><Key frame="58" value="80" /><Key frame="65" value="89.5" /><Key frame="72" value="89.5" /><Key frame="92" value="77.4" /><Key frame="107" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="5.53478" /><Key frame="37" value="5.53478" /><Key frame="44" value="5.53478" /><Key frame="51" value="5.53478" /><Key frame="58" value="5.53478" /><Key frame="65" value="5.53478" /><Key frame="72" value="5.53478" /><Key frame="107" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="0.9" /><Key frame="37" value="0.1512" /><Key frame="44" value="0.9" /><Key frame="51" value="0.1512" /><Key frame="58" value="0.9" /><Key frame="65" value="0.1512" /><Key frame="72" value="0.1512" /><Key frame="107" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="-80.9" /><Key frame="37" value="-80.9" /><Key frame="44" value="-80.9" /><Key frame="51" value="-80.9" /><Key frame="58" value="-80.9" /><Key frame="65" value="-80.9" /><Key frame="72" value="-80.9" /><Key frame="107" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-47.0128" /><Key frame="37" value="-47.0128" /><Key frame="44" value="-47.0128" /><Key frame="51" value="-47.0128" /><Key frame="58" value="-47.0128" /><Key frame="65" value="-47.0128" /><Key frame="72" value="-47.0128" /><Key frame="107" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="88.6804" /><Key frame="37" value="88.6804" /><Key frame="44" value="88.6804" /><Key frame="51" value="88.6804" /><Key frame="58" value="88.6804" /><Key frame="65" value="88.6804" /><Key frame="72" value="88.6804" /><Key frame="107" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_あり得ない" id="58" localization="8" tooltip="Enter tooltip here" x="777" y="1282"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="96" size="96"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="32" value="-11" /><Key frame="45" value="-25" /><Key frame="55" value="-25.3" /><Key frame="63" value="-25.3" /><Key frame="93" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="32" value="0" /><Key frame="45" value="-40" /><Key frame="55" value="40" /><Key frame="63" value="40" /><Key frame="93" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="13" value="-72.4" /><Key frame="28" value="-78" /><Key frame="32" value="-78" /><Key frame="45" value="-78" /><Key frame="55" value="-78.1" /><Key frame="63" value="-78.1" /><Key frame="81" value="-72.4" /><Key frame="93" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="28" value="-104" /><Key frame="32" value="-104" /><Key frame="45" value="-65.3422" /><Key frame="55" value="-119.5" /><Key frame="63" value="-119.5" /><Key frame="93" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="28" value="1" /><Key frame="32" value="1" /><Key frame="45" value="1" /><Key frame="55" value="1" /><Key frame="63" value="1" /><Key frame="93" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="28" value="12.1979" /><Key frame="32" value="12.1979" /><Key frame="45" value="12.4212" /><Key frame="55" value="-3.6" /><Key frame="63" value="-3.6" /><Key frame="93" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="28" value="20.4152" /><Key frame="32" value="20.4152" /><Key frame="45" value="3.40733" /><Key frame="55" value="20.4319" /><Key frame="63" value="20.4319" /><Key frame="93" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="28" value="-25" /><Key frame="32" value="-25" /><Key frame="45" value="-15" /><Key frame="55" value="-25" /><Key frame="63" value="-25" /><Key frame="93" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="13" value="72.4" /><Key frame="28" value="89.5" /><Key frame="32" value="89.5" /><Key frame="45" value="88.4469" /><Key frame="55" value="78.1" /><Key frame="63" value="78.1" /><Key frame="81" value="72.4" /><Key frame="93" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="28" value="104.205" /><Key frame="32" value="104.205" /><Key frame="45" value="65.2104" /><Key frame="55" value="119.5" /><Key frame="63" value="119.5" /><Key frame="93" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="28" value="1" /><Key frame="32" value="1" /><Key frame="45" value="1" /><Key frame="55" value="1" /><Key frame="63" value="1" /><Key frame="93" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="28" value="12.1979" /><Key frame="32" value="12.1979" /><Key frame="45" value="12.042" /><Key frame="55" value="-3.6" /><Key frame="63" value="-3.6" /><Key frame="93" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="28" value="-20.4152" /><Key frame="32" value="-20.4152" /><Key frame="45" value="-3.0888" /><Key frame="55" value="-20.4319" /><Key frame="63" value="-20.4319" /><Key frame="93" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="28" value="25" /><Key frame="32" value="25" /><Key frame="45" value="15" /><Key frame="55" value="25" /><Key frame="63" value="25" /><Key frame="93" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_わかったわかった" id="125" localization="8" tooltip="Enter tooltip here" x="930" y="1286"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="101" size="101"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="31" value="12" /><Key frame="41" value="-19" /><Key frame="51" value="12" /><Key frame="61" value="-19" /><Key frame="71" value="-19" /><Key frame="101" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="31" value="-4.70003e-21" /><Key frame="41" value="-4.70003e-21" /><Key frame="51" value="-4.70003e-21" /><Key frame="61" value="-4.70003e-21" /><Key frame="71" value="-4.70003e-21" /><Key frame="101" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="13" value="-76" /><Key frame="31" value="-75" /><Key frame="41" value="-55" /><Key frame="51" value="-75" /><Key frame="61" value="-55" /><Key frame="71" value="-55" /><Key frame="88" value="-68.1" /><Key frame="101" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="31" value="-98.3484" /><Key frame="41" value="-98.3484" /><Key frame="51" value="-98.3484" /><Key frame="61" value="-98.3484" /><Key frame="71" value="-98.3484" /><Key frame="101" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="31" value="0.996" /><Key frame="41" value="0.996" /><Key frame="51" value="0.996" /><Key frame="61" value="0.996" /><Key frame="71" value="0.996" /><Key frame="101" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="31" value="-10" /><Key frame="41" value="10" /><Key frame="51" value="-10" /><Key frame="61" value="10" /><Key frame="71" value="10" /><Key frame="101" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="31" value="21.9" /><Key frame="41" value="21.9" /><Key frame="51" value="21.9" /><Key frame="61" value="21.9" /><Key frame="71" value="21.9" /><Key frame="101" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="31" value="60" /><Key frame="41" value="60" /><Key frame="51" value="60" /><Key frame="61" value="60" /><Key frame="71" value="60" /><Key frame="101" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="13" value="76" /><Key frame="31" value="75" /><Key frame="41" value="55" /><Key frame="51" value="75" /><Key frame="61" value="55" /><Key frame="71" value="55" /><Key frame="88" value="68.1" /><Key frame="101" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="31" value="98.3484" /><Key frame="41" value="98.3484" /><Key frame="51" value="98.3484" /><Key frame="61" value="98.3484" /><Key frame="71" value="98.3484" /><Key frame="101" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="31" value="0.996" /><Key frame="41" value="0.9" /><Key frame="51" value="0.996" /><Key frame="61" value="0.9" /><Key frame="71" value="0.9" /><Key frame="101" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="31" value="-10" /><Key frame="41" value="10" /><Key frame="51" value="-10" /><Key frame="61" value="10" /><Key frame="71" value="10" /><Key frame="101" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="31" value="-21.9" /><Key frame="41" value="-21.9" /><Key frame="51" value="-21.9" /><Key frame="61" value="-21.9" /><Key frame="71" value="-21.9" /><Key frame="101" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="31" value="-60" /><Key frame="41" value="-60" /><Key frame="51" value="-60" /><Key frame="61" value="-60" /><Key frame="71" value="-60" /><Key frame="101" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_それはない " id="30" localization="8" tooltip="Enter tooltip here" x="1082" y="1282"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="100" size="100"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="39" value="-11" /><Key frame="50" value="-11" /><Key frame="64" value="-11" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="73.1" /><Key frame="27" value="89.5" /><Key frame="39" value="89.5" /><Key frame="50" value="88.4688" /><Key frame="64" value="89.5" /><Key frame="72" value="89.5" /><Key frame="86" value="66.7" /><Key frame="100" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="27" value="104.2" /><Key frame="39" value="104.2" /><Key frame="50" value="65" /><Key frame="64" value="104.2" /><Key frame="72" value="104.2" /><Key frame="100" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="27" value="1" /><Key frame="39" value="1" /><Key frame="50" value="1" /><Key frame="64" value="1" /><Key frame="72" value="1" /><Key frame="100" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="12.2" /><Key frame="39" value="12.2" /><Key frame="50" value="12.0989" /><Key frame="64" value="12.2" /><Key frame="72" value="12.2" /><Key frame="100" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="27" value="-20.4" /><Key frame="39" value="-20.4" /><Key frame="50" value="-6.42555" /><Key frame="64" value="-20.4" /><Key frame="72" value="-20.4" /><Key frame="100" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="27" value="25" /><Key frame="39" value="25" /><Key frame="50" value="15" /><Key frame="64" value="25" /><Key frame="72" value="25" /><Key frame="100" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="39" value="0" /><Key frame="50" value="-40" /><Key frame="64" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_いやいや" id="31" localization="8" tooltip="Enter tooltip here" x="1240" y="1286"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="108" size="108"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="108" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="27" value="15" /><Key frame="40" value="-15" /><Key frame="54" value="15" /><Key frame="68" value="-15" /><Key frame="82" value="15" /><Key frame="108" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="67.4" /><Key frame="27" value="71.2" /><Key frame="40" value="71.2" /><Key frame="53" value="71.2" /><Key frame="68" value="71.2" /><Key frame="82" value="71.2" /><Key frame="96" value="66" /><Key frame="108" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="27" value="102.3" /><Key frame="40" value="70" /><Key frame="53" value="102.3" /><Key frame="68" value="70" /><Key frame="82" value="102.3" /><Key frame="108" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="27" value="1" /><Key frame="40" value="1" /><Key frame="53" value="1" /><Key frame="68" value="1" /><Key frame="82" value="1" /><Key frame="108" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="27" value="2.1" /><Key frame="40" value="2.1" /><Key frame="53" value="2.1" /><Key frame="68" value="2.1" /><Key frame="82" value="2.1" /><Key frame="108" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-32.5" /><Key frame="27" value="-15.8" /><Key frame="40" value="-15.8" /><Key frame="53" value="-15.8" /><Key frame="68" value="-15.8" /><Key frame="82" value="-15.8" /><Key frame="96" value="-39.7" /><Key frame="108" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="27" value="5.09532" /><Key frame="40" value="5.09532" /><Key frame="53" value="5.09532" /><Key frame="68" value="5.09532" /><Key frame="82" value="5.09532" /><Key frame="108" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_え！？" id="47" localization="8" tooltip="Enter tooltip here" x="1382" y="1286"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="18"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="9" value="-25" /><Key frame="18" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="18" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="18" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="6" value="0.68" /><Key frame="9" value="0.8" /><Key frame="18" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="18" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="18" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="18" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="18" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="6" value="0.68" /><Key frame="9" value="0.8" /><Key frame="18" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="18" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="18" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="18" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_あきれ" id="41" localization="8" tooltip="Enter tooltip here" x="1536" y="1284"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="95" size="95"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="38" value="-11.4592" /><Key frame="48" value="-25" /><Key frame="70" value="-25" /><Key frame="95" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="38" value="0" /><Key frame="70" value="0" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="12" value="-71.7" /><Key frame="23" value="-78" /><Key frame="38" value="-78" /><Key frame="48" value="-78" /><Key frame="65" value="-78" /><Key frame="70" value="-78" /><Key frame="83" value="-78.1" /><Key frame="95" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="23" value="-119.5" /><Key frame="38" value="-119.5" /><Key frame="48" value="-119.5" /><Key frame="65" value="-119.5" /><Key frame="70" value="-119.5" /><Key frame="95" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="23" value="0.996" /><Key frame="38" value="0.996" /><Key frame="48" value="0.996" /><Key frame="65" value="0.996" /><Key frame="70" value="0.996" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="23" value="60" /><Key frame="38" value="60" /><Key frame="48" value="60" /><Key frame="65" value="60" /><Key frame="70" value="60" /><Key frame="95" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="23" value="0.5" /><Key frame="38" value="0.5" /><Key frame="48" value="25" /><Key frame="65" value="0.5" /><Key frame="70" value="0.5" /><Key frame="83" value="33.3" /><Key frame="95" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="23" value="-65" /><Key frame="38" value="-65" /><Key frame="48" value="-65" /><Key frame="65" value="-65" /><Key frame="70" value="-65" /><Key frame="95" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="71.7" /><Key frame="23" value="89.5" /><Key frame="38" value="89.5" /><Key frame="48" value="89.5" /><Key frame="65" value="89.5" /><Key frame="70" value="89.5" /><Key frame="83" value="78.1" /><Key frame="95" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="119.5" /><Key frame="38" value="119.5" /><Key frame="48" value="119.5" /><Key frame="65" value="119.5" /><Key frame="70" value="119.5" /><Key frame="95" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.996" /><Key frame="38" value="0.996" /><Key frame="48" value="0.996" /><Key frame="65" value="0.996" /><Key frame="70" value="0.996" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="60" /><Key frame="38" value="60" /><Key frame="48" value="60" /><Key frame="65" value="60" /><Key frame="70" value="60" /><Key frame="95" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-0.5" /><Key frame="38" value="-0.5" /><Key frame="48" value="-25" /><Key frame="65" value="-0.5" /><Key frame="70" value="-0.5" /><Key frame="83" value="-33.3" /><Key frame="95" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="65" /><Key frame="38" value="65" /><Key frame="48" value="65" /><Key frame="65" value="65" /><Key frame="70" value="65" /><Key frame="95" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_やれやれ" id="40" localization="8" tooltip="Enter tooltip here" x="1686" y="1286"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="90" size="90"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="15" /><Key frame="75" value="15" /><Key frame="90" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="-15" /><Key frame="30" value="15" /><Key frame="45" value="-15" /><Key frame="60" value="15" /><Key frame="75" value="15" /><Key frame="90" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_キャー" id="44" localization="8" tooltip="Enter tooltip here" x="1828" y="1286"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="93" size="93"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="32" value="-30" /><Key frame="61" value="-30" /><Key frame="93" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="93" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="19" value="-63.2" /><Key frame="32" value="-78" /><Key frame="61" value="-78" /><Key frame="80" value="-67.4" /><Key frame="93" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="32" value="-59.4995" /><Key frame="61" value="-59.4995" /><Key frame="93" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="32" value="1" /><Key frame="61" value="1" /><Key frame="93" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="32" value="10" /><Key frame="61" value="10" /><Key frame="93" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="32" value="3.33377" /><Key frame="61" value="3.33377" /><Key frame="93" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="32" value="-80" /><Key frame="61" value="-80" /><Key frame="93" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="19" value="63.2" /><Key frame="32" value="78" /><Key frame="61" value="78" /><Key frame="80" value="67.4" /><Key frame="93" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="32" value="59.4995" /><Key frame="61" value="59.4995" /><Key frame="93" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="32" value="1" /><Key frame="61" value="1" /><Key frame="93" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="32" value="10" /><Key frame="61" value="10" /><Key frame="93" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="32" value="-3.33377" /><Key frame="61" value="-3.33377" /><Key frame="93" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="32" value="80" /><Key frame="61" value="80" /><Key frame="93" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_下向き" id="45" localization="8" tooltip="Enter tooltip here" x="1977" y="1288"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="60" size="60"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="10" /><Key frame="45" value="10" /><Key frame="60" value="-11.5" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_伏し目" id="227" localization="8" tooltip="Enter tooltip here" x="2129" y="1287"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="68" size="68"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="23" value="15" /><Key frame="48" value="15" /><Key frame="68" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="23" value="-15" /><Key frame="48" value="-15" /><Key frame="68" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_照れ" id="138" localization="8" tooltip="Enter tooltip here" x="635" y="1465"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="90" size="90"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-30" /><Key frame="55" value="-30" /><Key frame="90" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="-4.16139e-05" /><Key frame="55" value="-4.16139e-05" /><Key frame="90" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="18" value="64.6" /><Key frame="30" value="84.6" /><Key frame="55" value="84.6" /><Key frame="69" value="67.4" /><Key frame="90" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="59.4995" /><Key frame="55" value="59.4995" /><Key frame="90" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="55" value="1" /><Key frame="90" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="10" /><Key frame="55" value="10" /><Key frame="90" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-12.6" /><Key frame="55" value="-12.6" /><Key frame="90" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="80" /><Key frame="55" value="80" /><Key frame="90" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_絶対無理" id="117" localization="8" tooltip="Enter tooltip here" x="769" y="1463"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="96" size="96"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="-11" /><Key frame="43" value="-20.3" /><Key frame="55" value="-20.3" /><Key frame="66" value="-20.3" /><Key frame="96" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="0" /><Key frame="43" value="-30" /><Key frame="55" value="30" /><Key frame="66" value="30" /><Key frame="96" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="15" value="-73.8" /><Key frame="30" value="-78" /><Key frame="42" value="-78" /><Key frame="54" value="-78" /><Key frame="66" value="-78" /><Key frame="85" value="-72.4" /><Key frame="96" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="-104" /><Key frame="42" value="-73.6" /><Key frame="54" value="-104.006" /><Key frame="66" value="-104.006" /><Key frame="96" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="42" value="1" /><Key frame="54" value="1" /><Key frame="66" value="1" /><Key frame="96" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="12.1979" /><Key frame="42" value="12.2" /><Key frame="54" value="12.1946" /><Key frame="66" value="12.1946" /><Key frame="96" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="20.4152" /><Key frame="42" value="2.6" /><Key frame="54" value="20.4319" /><Key frame="66" value="20.4319" /><Key frame="96" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-25" /><Key frame="42" value="-15" /><Key frame="54" value="-25" /><Key frame="66" value="-25" /><Key frame="96" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="15" value="73.8" /><Key frame="30" value="89.5" /><Key frame="42" value="88.5" /><Key frame="54" value="89.5" /><Key frame="66" value="89.5" /><Key frame="85" value="72.4" /><Key frame="96" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="104.205" /><Key frame="42" value="73.6" /><Key frame="54" value="104.211" /><Key frame="66" value="104.211" /><Key frame="96" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="42" value="1" /><Key frame="54" value="1" /><Key frame="66" value="1" /><Key frame="96" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="12.1979" /><Key frame="42" value="12.2" /><Key frame="54" value="12.1946" /><Key frame="66" value="12.1946" /><Key frame="96" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-20.4152" /><Key frame="42" value="-2.6" /><Key frame="54" value="-20.4319" /><Key frame="66" value="-20.4319" /><Key frame="96" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="25" /><Key frame="42" value="15" /><Key frame="54" value="25" /><Key frame="66" value="25" /><Key frame="96" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_首横にふる" id="48" localization="8" tooltip="Enter tooltip here" x="928" y="1458"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="75" size="75"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="25" /><Key frame="30" value="-25" /><Key frame="45" value="25" /><Key frame="60" value="-25" /><Key frame="65" value="-25" /><Key frame="75" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="75" value="-11.4592" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_だめだこりゃ" id="52" localization="8" tooltip="Enter tooltip here" x="1087" y="1455"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="85" size="85"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="24" value="-11.4592" /><Key frame="35" value="-35.9" /><Key frame="47" value="-35.9" /><Key frame="82" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="24" value="0" /><Key frame="35" value="40" /><Key frame="47" value="40" /><Key frame="82" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="12" value="-77.4" /><Key frame="22" value="-78" /><Key frame="24" value="-78" /><Key frame="35" value="-75.0586" /><Key frame="47" value="-75" /><Key frame="68" value="-75.3" /><Key frame="82" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="12" value="-83.2" /><Key frame="22" value="-111.57" /><Key frame="24" value="-111.57" /><Key frame="35" value="-115.049" /><Key frame="47" value="-115.049" /><Key frame="82" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="22" value="0.608" /><Key frame="24" value="0.608" /><Key frame="35" value="0.976274" /><Key frame="47" value="0.976274" /><Key frame="82" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="22" value="68.0488" /><Key frame="24" value="68.0488" /><Key frame="35" value="-0.1" /><Key frame="47" value="-0.1" /><Key frame="82" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="22" value="3.63046" /><Key frame="24" value="3.63046" /><Key frame="35" value="20.4785" /><Key frame="47" value="20.4785" /><Key frame="82" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="22" value="-82.269" /><Key frame="24" value="-82.269" /><Key frame="35" value="-60.4719" /><Key frame="47" value="-60.4719" /><Key frame="82" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="12" value="77.4" /><Key frame="22" value="86.368" /><Key frame="24" value="86.368" /><Key frame="35" value="75" /><Key frame="47" value="75" /><Key frame="68" value="75.3" /><Key frame="82" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="12" value="83.2" /><Key frame="22" value="111.57" /><Key frame="24" value="111.57" /><Key frame="35" value="114.961" /><Key frame="47" value="114.961" /><Key frame="82" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="22" value="0.608" /><Key frame="24" value="0.608" /><Key frame="35" value="0.972759" /><Key frame="47" value="0.972759" /><Key frame="82" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="22" value="68.0488" /><Key frame="24" value="68.0488" /><Key frame="35" value="0" /><Key frame="47" value="0" /><Key frame="82" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="22" value="-3.63046" /><Key frame="24" value="-3.63046" /><Key frame="35" value="-20.4785" /><Key frame="47" value="-20.4785" /><Key frame="82" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="22" value="82.3058" /><Key frame="24" value="82.3058" /><Key frame="35" value="60.2034" /><Key frame="47" value="60.2034" /><Key frame="82" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_ドンマイ" id="46" localization="8" tooltip="Enter tooltip here" x="1235" y="1453"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="85" size="85"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="26" value="7" /><Key frame="57" value="7" /><Key frame="85" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="26" value="-4.16139e-05" /><Key frame="57" value="-4.16139e-05" /><Key frame="85" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="18" value="40" /><Key frame="26" value="55" /><Key frame="37" value="40" /><Key frame="57" value="40" /><Key frame="85" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="30" /><Key frame="26" value="35" /><Key frame="37" value="30" /><Key frame="57" value="30" /><Key frame="85" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="18" value="0.6" /><Key frame="26" value="1" /><Key frame="37" value="0.6" /><Key frame="57" value="0.6" /><Key frame="85" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="18" value="-12" /><Key frame="26" value="-32.5" /><Key frame="37" value="-12" /><Key frame="57" value="-12" /><Key frame="85" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="18" value="-28.3208" /><Key frame="26" value="-35" /><Key frame="37" value="-28.3208" /><Key frame="57" value="-28.3208" /><Key frame="85" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="-20" /><Key frame="26" value="-20" /><Key frame="37" value="-20" /><Key frame="57" value="-20" /><Key frame="85" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_恥ずかし" id="43" localization="8" tooltip="Enter tooltip here" x="1385" y="1453"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="103" size="103"><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="40" value="15" /><Key frame="65" value="15" /><Key frame="103" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="103" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="21" value="-66.7" /><Key frame="40" value="-78" /><Key frame="65" value="-78" /><Key frame="79" value="-72.4" /><Key frame="103" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="40" value="-59.4995" /><Key frame="65" value="-59.4995" /><Key frame="103" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="40" value="1" /><Key frame="65" value="1" /><Key frame="103" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="40" value="10" /><Key frame="65" value="10" /><Key frame="103" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="40" value="3.33377" /><Key frame="65" value="3.33377" /><Key frame="79" value="26.1" /><Key frame="103" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="40" value="-80" /><Key frame="65" value="-80" /><Key frame="103" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="21" value="66.7" /><Key frame="40" value="78" /><Key frame="65" value="78" /><Key frame="79" value="72.4" /><Key frame="103" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="40" value="59.4995" /><Key frame="65" value="59.4995" /><Key frame="103" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="40" value="1" /><Key frame="65" value="1" /><Key frame="103" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="40" value="10" /><Key frame="65" value="10" /><Key frame="103" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="40" value="-3.33377" /><Key frame="65" value="-3.33377" /><Key frame="79" value="-26.1" /><Key frame="103" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="40" value="80" /><Key frame="65" value="80" /><Key frame="103" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="-_普通じゃん" id="84" localization="8" tooltip="Enter tooltip here" x="1534" y="1455"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="78" size="78"><ActuatorList model=""><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="18" value="-80.2" /><Key frame="28" value="-85.9" /><Key frame="50" value="-85.9" /><Key frame="60" value="-71" /><Key frame="75" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="18" value="-73.6" /><Key frame="28" value="-92.7" /><Key frame="50" value="-92.7" /><Key frame="75" value="-6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="18" value="0" /><Key frame="28" value="0.996" /><Key frame="50" value="0.996" /><Key frame="75" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="28" value="59.4" /><Key frame="50" value="59.4" /><Key frame="75" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="28" value="11.9" /><Key frame="50" value="11.9" /><Key frame="75" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="18" value="-10.9" /><Key frame="28" value="-104.5" /><Key frame="50" value="-104.5" /><Key frame="75" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="18" value="80.2" /><Key frame="28" value="85.9" /><Key frame="50" value="85.9" /><Key frame="60" value="71" /><Key frame="75" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="18" value="73.6" /><Key frame="28" value="92.7" /><Key frame="50" value="92.7" /><Key frame="75" value="6.20701" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="18" value="0" /><Key frame="28" value="0.996" /><Key frame="50" value="0.996" /><Key frame="75" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="28" value="59.4" /><Key frame="50" value="59.4" /><Key frame="75" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="28" value="-11.9" /><Key frame="50" value="-11.9" /><Key frame="75" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="18" value="10.9" /><Key frame="28" value="104.5" /><Key frame="50" value="104.5" /><Key frame="75" value="88.6804" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay" id="1" localization="8" tooltip="" x="58" y="26"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text (1)" id="36" localization="8" tooltip="Say the text received on its input." x="409" y="12"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="14" indexofinput="2" outputowner="3" indexofoutput="6" /><Link inputowner="12" indexofinput="2" outputowner="3" indexofoutput="7" /><Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="6" /><Link inputowner="22" indexofinput="2" outputowner="3" indexofoutput="8" /><Link inputowner="54" indexofinput="2" outputowner="3" indexofoutput="9" /><Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="10" /><Link inputowner="67" indexofinput="2" outputowner="3" indexofoutput="11" /><Link inputowner="207" indexofinput="2" outputowner="3" indexofoutput="12" /><Link inputowner="81" indexofinput="2" outputowner="3" indexofoutput="13" /><Link inputowner="104" indexofinput="2" outputowner="3" indexofoutput="14" /><Link inputowner="25" indexofinput="2" outputowner="3" indexofoutput="15" /><Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="16" /><Link inputowner="163" indexofinput="2" outputowner="3" indexofoutput="17" /><Link inputowner="160" indexofinput="2" outputowner="3" indexofoutput="18" /><Link inputowner="143" indexofinput="2" outputowner="3" indexofoutput="19" /><Link inputowner="144" indexofinput="2" outputowner="3" indexofoutput="20" /><Link inputowner="74" indexofinput="2" outputowner="3" indexofoutput="21" /><Link inputowner="75" indexofinput="2" outputowner="3" indexofoutput="22" /><Link inputowner="121" indexofinput="2" outputowner="3" indexofoutput="23" /><Link inputowner="71" indexofinput="2" outputowner="3" indexofoutput="24" /><Link inputowner="9" indexofinput="2" outputowner="3" indexofoutput="25" /><Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="26" /><Link inputowner="159" indexofinput="2" outputowner="3" indexofoutput="27" /><Link inputowner="89" indexofinput="2" outputowner="3" indexofoutput="28" /><Link inputowner="15" indexofinput="2" outputowner="3" indexofoutput="29" /><Link inputowner="11" indexofinput="2" outputowner="3" indexofoutput="30" /><Link inputowner="158" indexofinput="2" outputowner="3" indexofoutput="31" /><Link inputowner="76" indexofinput="2" outputowner="3" indexofoutput="32" /><Link inputowner="87" indexofinput="2" outputowner="3" indexofoutput="33" /><Link inputowner="32" indexofinput="2" outputowner="3" indexofoutput="34" /><Link inputowner="13" indexofinput="2" outputowner="3" indexofoutput="35" /><Link inputowner="214" indexofinput="2" outputowner="3" indexofoutput="36" /><Link inputowner="199" indexofinput="2" outputowner="3" indexofoutput="37" /><Link inputowner="17" indexofinput="2" outputowner="3" indexofoutput="38" /><Link inputowner="16" indexofinput="2" outputowner="3" indexofoutput="39" /><Link inputowner="142" indexofinput="2" outputowner="3" indexofoutput="40" /><Link inputowner="102" indexofinput="2" outputowner="3" indexofoutput="41" /><Link inputowner="69" indexofinput="2" outputowner="3" indexofoutput="42" /><Link inputowner="171" indexofinput="2" outputowner="3" indexofoutput="43" /><Link inputowner="18" indexofinput="2" outputowner="3" indexofoutput="44" /><Link inputowner="29" indexofinput="2" outputowner="3" indexofoutput="45" /><Link inputowner="19" indexofinput="2" outputowner="3" indexofoutput="46" /><Link inputowner="20" indexofinput="2" outputowner="3" indexofoutput="47" /><Link inputowner="94" indexofinput="2" outputowner="3" indexofoutput="48" /><Link inputowner="21" indexofinput="2" outputowner="3" indexofoutput="49" /><Link inputowner="91" indexofinput="2" outputowner="3" indexofoutput="50" /><Link inputowner="23" indexofinput="2" outputowner="3" indexofoutput="51" /><Link inputowner="228" indexofinput="2" outputowner="3" indexofoutput="52" /><Link inputowner="24" indexofinput="2" outputowner="3" indexofoutput="53" /><Link inputowner="26" indexofinput="2" outputowner="3" indexofoutput="54" /><Link inputowner="85" indexofinput="2" outputowner="3" indexofoutput="55" /><Link inputowner="103" indexofinput="2" outputowner="3" indexofoutput="56" /><Link inputowner="63" indexofinput="2" outputowner="3" indexofoutput="57" /><Link inputowner="27" indexofinput="2" outputowner="3" indexofoutput="58" /><Link inputowner="192" indexofinput="2" outputowner="3" indexofoutput="59" /><Link inputowner="33" indexofinput="2" outputowner="3" indexofoutput="60" /><Link inputowner="68" indexofinput="2" outputowner="3" indexofoutput="61" /><Link inputowner="66" indexofinput="2" outputowner="3" indexofoutput="62" /><Link inputowner="230" indexofinput="2" outputowner="3" indexofoutput="63" /><Link inputowner="61" indexofinput="2" outputowner="3" indexofoutput="64" /><Link inputowner="35" indexofinput="2" outputowner="3" indexofoutput="65" /><Link inputowner="28" indexofinput="2" outputowner="3" indexofoutput="66" /><Link inputowner="58" indexofinput="2" outputowner="3" indexofoutput="67" /><Link inputowner="125" indexofinput="2" outputowner="3" indexofoutput="68" /><Link inputowner="30" indexofinput="2" outputowner="3" indexofoutput="69" /><Link inputowner="31" indexofinput="2" outputowner="3" indexofoutput="70" /><Link inputowner="47" indexofinput="2" outputowner="3" indexofoutput="71" /><Link inputowner="41" indexofinput="2" outputowner="3" indexofoutput="72" /><Link inputowner="40" indexofinput="2" outputowner="3" indexofoutput="73" /><Link inputowner="44" indexofinput="2" outputowner="3" indexofoutput="74" /><Link inputowner="45" indexofinput="2" outputowner="3" indexofoutput="75" /><Link inputowner="227" indexofinput="2" outputowner="3" indexofoutput="76" /><Link inputowner="138" indexofinput="2" outputowner="3" indexofoutput="77" /><Link inputowner="117" indexofinput="2" outputowner="3" indexofoutput="78" /><Link inputowner="48" indexofinput="2" outputowner="3" indexofoutput="79" /><Link inputowner="52" indexofinput="2" outputowner="3" indexofoutput="80" /><Link inputowner="46" indexofinput="2" outputowner="3" indexofoutput="81" /><Link inputowner="43" indexofinput="2" outputowner="3" indexofoutput="82" /><Link inputowner="84" indexofinput="2" outputowner="3" indexofoutput="83" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="36" indexofinput="2" outputowner="6" indexofoutput="5" /><Link inputowner="0" indexofinput="4" outputowner="36" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_問診開始" id="14" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="478" y="35"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Interview/StartQuestion" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="21" indexofoutput="6" /><Link inputowner="19" indexofinput="2" outputowner="23" indexofoutput="6" /><Link inputowner="3" indexofinput="2" outputowner="25" indexofoutput="6" /><Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="13" indexofinput="2" outputowner="14" indexofoutput="6" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="25" indexofinput="2" outputowner="0" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_待機画面" id="3" localization="8" tooltip="Enter description here" x="567" y="21"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_待機説明_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_受付_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_経営相談 (1)_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="_待機説明" id="5" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="393" y="76"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Main/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_受付" id="7" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="383" y="292"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Main/BtnReceptionClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_経営相談 (1)" id="10" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="382" y="479"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Main/BtnManagementClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文" id="1" localization="8" tooltip="" x="671" y="139"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="oa_1001" id="3" localization="8" tooltip="Enter tooltip here" x="380" y="252"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="25" size="25"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="25" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="25" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="25" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="25" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="25" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="25" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="25" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="25" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="25" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="25" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="25" value="2.93938e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="25" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="25" value="0.000129227" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="25" value="-4.2" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Wait For Signals" id="4" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="606" y="162"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        #self.memory = ALProxy('ALMemory')

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        # Init listIdTalk and listIdPlay
        #self.memory.insertData("listIdTalk",[])
        #self.memory.insertData("listIdPlay",[])

        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="stopTalkAndPlay (1)" id="5" localization="8" tooltip="" x="163" y="238"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="349" y="88"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "ペッパー！待機モード"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="4" indexofinput="3" outputowner="3" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ｂｔｎReceptionClick" id="6" localization="8" tooltip="" x="695" y="466"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="195" y="100"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="9" localization="8" tooltip="Say the text received on its input and move during its speech." x="544" y="117"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "受付"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ｂｔｎManagementClick" id="8" localization="8" tooltip="" x="709" y="817"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay (1)" id="5" localization="8" tooltip="" x="153" y="104"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="9" localization="8" tooltip="Say the text received on its input and move during its speech." x="491" y="115"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "経営相談"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Insert Data" id="9" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="672" y="29"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 1)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="DONBURI/UserInfo/IsMainVC" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Insert Data (1)" id="4" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="687" y="357"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="DONBURI/UserInfo/IsMainVC" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Insert Data (2)" id="11" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key." x="705" y="704"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.insertData(self.getParameter("key"), 0)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="DONBURI/UserInfo/IsMainVC" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Raise Event" id="2" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="687" y="249"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="OADonburi/Main/OpenReception" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Raise Event (1)" id="3" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="693" y="587"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        self.memory.raiseEvent(self.getParameter("key"), p)
        self.onStopped(p)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="OADonburi/Main/OpenManagement" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="6" /><Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="6" /><Link inputowner="11" indexofinput="2" outputowner="10" indexofoutput="6" /><Link inputowner="8" indexofinput="2" outputowner="10" indexofoutput="6" /><Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="6" /><Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_アポありコール" id="7" localization="8" tooltip="Enter description here" x="975" y="385"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_アポあり説明_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_社員戻る_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_アポありコールキャンセル_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="ｂｔｎReturnClick" id="6" localization="8" tooltip="" x="568" y="277"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="160" y="90"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="530" y="103"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "戻る"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="ｂｔｎCancelClick" id="8" localization="8" tooltip="" x="567" y="393"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="140" y="64"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="492" y="100"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "キャンセル"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_社員戻る" id="19" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="386" y="274"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/CallHasAppo/BtnReturnClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_アポありコールキャンセル" id="10" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="385" y="392"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/CallHasAppo/BtnCancelClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_アポあり説明" id="5" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="371" y="73"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/CallHasAppo/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明" id="1" localization="8" tooltip="" x="569" y="38"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="166" y="85"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="684" y="95"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="oa_1009" id="18" localization="8" tooltip="Enter tooltip here" x="568" y="146"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="175" size="175"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="15" value="-53.4" /><Key frame="30" value="-72.4" /><Key frame="40" value="-72.4" /><Key frame="54" value="-83.1" /><Key frame="65" value="-83.1" /><Key frame="80" value="-72.4" /><Key frame="95" value="-61.1719" /><Key frame="105" value="-61.1719" /><Key frame="120" value="-72.4" /><Key frame="130" value="-72.4" /><Key frame="154" value="-79.8047" /><Key frame="160" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="15" value="-39.2" /><Key frame="30" value="-38.584" /><Key frame="40" value="-38.584" /><Key frame="54" value="-10.7" /><Key frame="65" value="-10.7" /><Key frame="80" value="-38.584" /><Key frame="95" value="-60.7324" /><Key frame="105" value="-60.7324" /><Key frame="120" value="-38.584" /><Key frame="130" value="-38.584" /><Key frame="154" value="-18.9844" /><Key frame="160" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="15" value="0.9" /><Key frame="30" value="1" /><Key frame="40" value="1" /><Key frame="54" value="0.970123" /><Key frame="65" value="0.970123" /><Key frame="80" value="1" /><Key frame="95" value="0.970123" /><Key frame="105" value="0.970123" /><Key frame="120" value="1" /><Key frame="130" value="1" /><Key frame="154" value="0.403339" /><Key frame="160" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="15" value="22.9" /><Key frame="30" value="-41.6602" /><Key frame="40" value="-41.6602" /><Key frame="54" value="-65.9" /><Key frame="65" value="-65.9" /><Key frame="80" value="-41.6602" /><Key frame="95" value="-21.709" /><Key frame="105" value="-21.709" /><Key frame="120" value="-41.6602" /><Key frame="130" value="-41.6602" /><Key frame="160" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="15" value="33.9" /><Key frame="30" value="26.8" /><Key frame="40" value="26.8" /><Key frame="54" value="45.4" /><Key frame="65" value="45.4" /><Key frame="80" value="26.8" /><Key frame="95" value="2.10938" /><Key frame="105" value="2.10938" /><Key frame="120" value="26.8" /><Key frame="130" value="26.8" /><Key frame="154" value="51.3776" /><Key frame="160" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="15" value="-61.8" /><Key frame="30" value="-41.2188" /><Key frame="40" value="-41.2188" /><Key frame="54" value="-54.5" /><Key frame="65" value="-54.5" /><Key frame="80" value="-41.2188" /><Key frame="95" value="-22.8494" /><Key frame="105" value="-22.8494" /><Key frame="120" value="-41.2188" /><Key frame="130" value="-41.2188" /><Key frame="154" value="-70.3989" /><Key frame="160" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="15" value="53.4" /><Key frame="30" value="72.4" /><Key frame="40" value="72.4" /><Key frame="54" value="61.1719" /><Key frame="65" value="61.1719" /><Key frame="80" value="72.4" /><Key frame="95" value="83.1" /><Key frame="105" value="83.1" /><Key frame="120" value="72.4" /><Key frame="130" value="72.4" /><Key frame="154" value="79.8047" /><Key frame="160" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="15" value="39.2" /><Key frame="30" value="38.584" /><Key frame="40" value="38.584" /><Key frame="54" value="60.7324" /><Key frame="65" value="60.7324" /><Key frame="80" value="38.584" /><Key frame="95" value="10.7" /><Key frame="105" value="10.7" /><Key frame="120" value="38.584" /><Key frame="130" value="38.584" /><Key frame="154" value="18.9844" /><Key frame="160" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="15" value="0.9" /><Key frame="30" value="1" /><Key frame="40" value="1" /><Key frame="54" value="0.970123" /><Key frame="65" value="0.970123" /><Key frame="80" value="1" /><Key frame="95" value="0.970123" /><Key frame="105" value="0.970123" /><Key frame="120" value="1" /><Key frame="130" value="1" /><Key frame="154" value="0.403339" /><Key frame="160" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="15" value="22.9" /><Key frame="30" value="-41.6602" /><Key frame="40" value="-41.6602" /><Key frame="54" value="-21.709" /><Key frame="65" value="-21.709" /><Key frame="80" value="-41.6602" /><Key frame="95" value="-65.9" /><Key frame="105" value="-65.9" /><Key frame="120" value="-41.6602" /><Key frame="130" value="-41.6602" /><Key frame="160" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="15" value="-33.9" /><Key frame="30" value="-26.8" /><Key frame="40" value="-26.8" /><Key frame="54" value="-2.10938" /><Key frame="65" value="-2.10938" /><Key frame="80" value="-26.8" /><Key frame="95" value="-45.4" /><Key frame="105" value="-45.4" /><Key frame="120" value="-26.8" /><Key frame="130" value="-26.8" /><Key frame="154" value="-51.3776" /><Key frame="160" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="15" value="61.8" /><Key frame="30" value="41.2188" /><Key frame="40" value="41.2188" /><Key frame="54" value="22.8494" /><Key frame="65" value="22.8494" /><Key frame="80" value="41.2188" /><Key frame="95" value="54.5" /><Key frame="105" value="54.5" /><Key frame="120" value="41.2188" /><Key frame="130" value="41.2188" /><Key frame="154" value="70.3989" /><Key frame="160" value="88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-36.9" /><Key frame="30" value="-36.9" /><Key frame="40" value="-36.8" /><Key frame="59" value="-32.6" /><Key frame="82" value="-21.5" /><Key frame="95" value="-32.5" /><Key frame="100" value="-32.4" /><Key frame="105" value="-33.9" /><Key frame="123" value="-21.5" /><Key frame="130" value="-21.5" /><Key frame="160" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="-4.70003e-21" /><Key frame="30" value="-4.70003e-21" /><Key frame="40" value="-4.70003e-21" /><Key frame="54" value="15.5" /><Key frame="59" value="29.6" /><Key frame="82" value="-4.70003e-21" /><Key frame="95" value="-15.5" /><Key frame="100" value="-29.6" /><Key frame="105" value="-15.5" /><Key frame="123" value="-4.70003e-21" /><Key frame="130" value="-4.70003e-21" /><Key frame="160" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="15" value="-10" /><Key frame="30" value="-10" /><Key frame="40" value="-10" /><Key frame="54" value="-11.0742" /><Key frame="65" value="-11.0742" /><Key frame="80" value="-10" /><Key frame="95" value="-11.0742" /><Key frame="105" value="-11.0742" /><Key frame="120" value="-10" /><Key frame="130" value="-10" /><Key frame="160" value="-0.215502" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="54" value="-0.615236" /><Key frame="65" value="-0.615236" /><Key frame="95" value="0.615236" /><Key frame="105" value="0.615236" /><Key frame="160" value="1.27266e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="54" value="-5.80078" /><Key frame="65" value="-5.80078" /><Key frame="95" value="-5.80078" /><Key frame="105" value="-5.80078" /><Key frame="160" value="-4.23162" /></ActuatorCurve></ActuatorList></Timeline></Box><Link inputowner="6" indexofinput="2" outputowner="19" indexofoutput="6" /><Link inputowner="8" indexofinput="2" outputowner="10" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="18" indexofinput="2" outputowner="5" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_問診確認" id="11" localization="8" tooltip="Enter description here" x="869" y="755"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_問診確認始まる_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_問診戻る_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_結果へ_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="_問診戻る" id="10" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="314" y="216"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Confirm/BtnNavBackClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_結果へ" id="19" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="320" y="351"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Confirm/BtnResultClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="btnNavBackClick" id="6" localization="8" tooltip="" x="498" y="210"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="200" y="108"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="423" y="98"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "戻る"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_説明文" id="1" localization="8" tooltip="" x="498" y="73"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="634" y="156"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="oa_1013" id="22" localization="8" tooltip="Enter tooltip here" x="392" y="276"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="109" size="109"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-89.5" /><Key frame="45" value="-89.5" /><Key frame="50" value="-89.5" /><Key frame="55" value="-89.5" /><Key frame="60" value="-89.5" /><Key frame="65" value="-89.5" /><Key frame="70" value="-89.5" /><Key frame="75" value="-89.5" /><Key frame="80" value="-89.5" /><Key frame="95" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="2.9" /><Key frame="45" value="2.9" /><Key frame="50" value="2.8" /><Key frame="55" value="2.9" /><Key frame="60" value="2.8" /><Key frame="65" value="2.9" /><Key frame="70" value="2.8" /><Key frame="75" value="2.9" /><Key frame="80" value="2.8" /><Key frame="95" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="45" value="0.2" /><Key frame="50" value="0.9" /><Key frame="55" value="0.2" /><Key frame="60" value="0.9" /><Key frame="65" value="0.2" /><Key frame="70" value="0.9" /><Key frame="75" value="0.2" /><Key frame="80" value="0.9" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="29.3" /><Key frame="45" value="14" /><Key frame="50" value="14" /><Key frame="55" value="14" /><Key frame="60" value="14" /><Key frame="65" value="14" /><Key frame="70" value="14" /><Key frame="75" value="14" /><Key frame="80" value="14" /><Key frame="95" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="53.2" /><Key frame="45" value="46.9" /><Key frame="50" value="47.7" /><Key frame="55" value="46.9" /><Key frame="60" value="47.7" /><Key frame="65" value="46.9" /><Key frame="70" value="47.7" /><Key frame="75" value="46.9" /><Key frame="80" value="47.7" /><Key frame="95" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-104.5" /><Key frame="45" value="-104.5" /><Key frame="50" value="-104.5" /><Key frame="55" value="-104.5" /><Key frame="60" value="-104.5" /><Key frame="65" value="-104.5" /><Key frame="70" value="-104.5" /><Key frame="75" value="-104.5" /><Key frame="80" value="-104.5" /><Key frame="95" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="89.5" /><Key frame="45" value="89.5" /><Key frame="50" value="89.5" /><Key frame="55" value="89.5" /><Key frame="60" value="89.5" /><Key frame="65" value="89.5" /><Key frame="70" value="89.5" /><Key frame="75" value="89.5" /><Key frame="80" value="89.5" /><Key frame="95" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="-2.9" /><Key frame="45" value="-2.9" /><Key frame="50" value="-2.8" /><Key frame="55" value="-2.9" /><Key frame="60" value="-2.8" /><Key frame="65" value="-2.9" /><Key frame="70" value="-2.8" /><Key frame="75" value="-2.9" /><Key frame="80" value="-2.8" /><Key frame="95" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="45" value="0.2" /><Key frame="50" value="0.9" /><Key frame="55" value="0.2" /><Key frame="60" value="0.9" /><Key frame="65" value="0.2" /><Key frame="70" value="0.9" /><Key frame="75" value="0.2" /><Key frame="80" value="0.9" /><Key frame="95" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="29.3" /><Key frame="45" value="14" /><Key frame="50" value="14" /><Key frame="55" value="14" /><Key frame="60" value="14" /><Key frame="65" value="14" /><Key frame="70" value="14" /><Key frame="75" value="14" /><Key frame="80" value="14" /><Key frame="95" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-53.2" /><Key frame="45" value="-46.9" /><Key frame="50" value="-47.7" /><Key frame="55" value="-46.9" /><Key frame="60" value="-47.7" /><Key frame="65" value="-46.9" /><Key frame="70" value="-47.7" /><Key frame="75" value="-46.9" /><Key frame="80" value="-47.7" /><Key frame="95" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="104.5" /><Key frame="45" value="104.5" /><Key frame="50" value="104.5" /><Key frame="55" value="104.5" /><Key frame="60" value="104.5" /><Key frame="65" value="104.5" /><Key frame="70" value="104.5" /><Key frame="75" value="104.5" /><Key frame="80" value="104.5" /><Key frame="95" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="15" /><Key frame="45" value="15" /><Key frame="50" value="15" /><Key frame="55" value="15" /><Key frame="60" value="15" /><Key frame="65" value="15" /><Key frame="70" value="15" /><Key frame="75" value="15" /><Key frame="80" value="15" /><Key frame="95" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="0" /><Key frame="45" value="0" /><Key frame="50" value="0" /><Key frame="55" value="0" /><Key frame="60" value="0" /><Key frame="65" value="0" /><Key frame="70" value="0" /><Key frame="75" value="0" /><Key frame="80" value="0" /><Key frame="95" value="2.93938e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="95" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="95" value="0.000129227" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="95" value="-4.2" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="157" y="177"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="396" y="119"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "あなたの選んだ選択は、こうなってます。修正が無ければ結果ボタンを押してください。"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="22" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="22" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_問診確認始まる" id="5" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="312" y="75"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Confirm/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="6" indexofinput="2" outputowner="10" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_アポなしコール中" id="8" localization="8" tooltip="Enter description here" x="867" y="509"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_アポなし呼びます_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_アポなしキャンセル_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="ｂｔｎCancelClick" id="6" localization="8" tooltip="" x="514" y="178"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="115" y="83"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="441" y="136"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "キャンセル"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_アポなしキャンセル" id="1" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="358" y="180"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/CallNoAppoDone/BtnCancelClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_アポなし呼びます" id="14" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="356" y="70"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/CallNoAppoDone/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文" id="5" localization="8" tooltip="" x="509" y="72"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="592" y="132"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="oa_1011" id="20" localization="8" tooltip="Enter tooltip here" x="388" y="231"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="269" size="269"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="20" value="-89.3" /><Key frame="38" value="-89.3" /><Key frame="55" value="-89.3" /><Key frame="70" value="-89.3" /><Key frame="85" value="-84.3" /><Key frame="98" value="-89.3" /><Key frame="114" value="-89.3" /><Key frame="163" value="-84.5" /><Key frame="183" value="-84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="20" value="13" /><Key frame="38" value="31.1" /><Key frame="55" value="13" /><Key frame="70" value="31.1" /><Key frame="85" value="3.7" /><Key frame="98" value="13" /><Key frame="114" value="31.1" /><Key frame="163" value="25.3" /><Key frame="183" value="-6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="20" value="0.32" /><Key frame="38" value="0.32" /><Key frame="55" value="0.32" /><Key frame="70" value="0.32" /><Key frame="98" value="0.32" /><Key frame="114" value="0.32" /><Key frame="163" value="0.72935" /><Key frame="183" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="20" value="-110.7" /><Key frame="38" value="-110.7" /><Key frame="55" value="-110.7" /><Key frame="70" value="-110.7" /><Key frame="85" value="-89.5" /><Key frame="98" value="-110.7" /><Key frame="114" value="-110.7" /><Key frame="163" value="63.4" /><Key frame="183" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="20" value="38.4" /><Key frame="38" value="38.4" /><Key frame="55" value="38.4" /><Key frame="70" value="38.4" /><Key frame="85" value="37.6" /><Key frame="98" value="38.4" /><Key frame="114" value="38.4" /><Key frame="163" value="23.9" /><Key frame="183" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="20" value="-100.814" /><Key frame="38" value="-100.814" /><Key frame="55" value="-100.814" /><Key frame="70" value="-100.814" /><Key frame="98" value="-100.814" /><Key frame="114" value="-100.814" /><Key frame="163" value="-100.463" /><Key frame="183" value="-88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="20" value="21" /><Key frame="38" value="21" /><Key frame="55" value="21" /><Key frame="70" value="21" /><Key frame="98" value="21" /><Key frame="114" value="21" /><Key frame="163" value="78.8379" /><Key frame="183" value="84.639" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="20" value="88.5" /><Key frame="38" value="88.5" /><Key frame="55" value="88.5" /><Key frame="70" value="88.5" /><Key frame="98" value="88.5" /><Key frame="114" value="88.5" /><Key frame="163" value="42.0117" /><Key frame="183" value="6.20706" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="20" value="0.88" /><Key frame="38" value="0.88" /><Key frame="55" value="0.88" /><Key frame="70" value="0.88" /><Key frame="98" value="0.88" /><Key frame="114" value="0.88" /><Key frame="163" value="0.725835" /><Key frame="183" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="20" value="102.7" /><Key frame="38" value="102.7" /><Key frame="55" value="102.7" /><Key frame="70" value="102.7" /><Key frame="98" value="102.7" /><Key frame="114" value="102.7" /><Key frame="163" value="29.0039" /><Key frame="183" value="81.285" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="20" value="-5.6" /><Key frame="38" value="-5.6" /><Key frame="55" value="-5.6" /><Key frame="70" value="-5.6" /><Key frame="98" value="-5.6" /><Key frame="114" value="-5.6" /><Key frame="163" value="-44.8562" /><Key frame="183" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="20" value="21.6" /><Key frame="38" value="21.6" /><Key frame="55" value="21.6" /><Key frame="70" value="21.6" /><Key frame="98" value="21.6" /><Key frame="114" value="21.6" /><Key frame="163" value="18.8943" /><Key frame="183" value="88.6801" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="20" value="-18.2" /><Key frame="38" value="-18.2" /><Key frame="55" value="-18.2" /><Key frame="70" value="-18.2" /><Key frame="85" value="-23.5" /><Key frame="98" value="-18.2" /><Key frame="114" value="-18.2" /><Key frame="163" value="36.4" /><Key frame="183" value="-11.4591" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="20" value="21.1" /><Key frame="38" value="-14.4" /><Key frame="55" value="21.1" /><Key frame="70" value="-4.4" /><Key frame="85" value="-20.1" /><Key frame="98" value="21.1" /><Key frame="114" value="-4.4" /><Key frame="132" value="-16.4" /><Key frame="163" value="35.1" /><Key frame="183" value="2.39632e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="183" value="-0.215502" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="183" value="1.27266e-05" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="183" value="-4.23162" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="130" y="142"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="384" y="117"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "トゥルルルルルー、トゥルルルルルー"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="3" indexofinput="3" outputowner="20" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="20" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="6" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_設定画面" id="13" localization="8" tooltip="Enter description here" x="559" y="833"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_接続テスト_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_接続成功_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_接続失敗_onStart_4" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Input name="_閉まる_onStart_5" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="_接続テスト" id="10" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="508" y="92"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Setting/BtnConnectClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_ボタンクリック" id="6" localization="8" tooltip="" x="700" y="87"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="166" y="82"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="9" localization="8" tooltip="Say the text received on its input and move during its speech." x="483" y="96"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "接続テスト開始します"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_接続成功" id="12" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="507" y="207"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Setting/ConnectOk" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_成功" id="14" localization="8" tooltip="" x="699" y="202"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="158" y="50"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="9" localization="8" tooltip="Say the text received on its input and move during its speech." x="494" y="89"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "接続成功"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="9" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_接続失敗" id="15" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="512" y="321"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Setting/ConnectFailed" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_失敗" id="19" localization="8" tooltip="" x="704" y="316"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="178" y="70"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="455" y="94"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "接続失敗！困るんですけどー"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="CloseApp" id="20" localization="8" tooltip="" x="692" y="443"><bitmap>media/images/buttons/stop2-48.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        #self.application = ALProxy("Application")
        #self.application.stop()
        self.application = ALProxy("ALBehaviorManager")
        if(self.application.isBehaviorRunning("User/oa_donburipepper/behavior_1")):
            self.application.stopBehavior("User/oa_donburipepper/behavior_1")
        if(self.application.isBehaviorRunning("User/.lastUploadedChoregrapheBehavior/behavior_1")):
            self.application.stopBehavior("User/.lastUploadedChoregrapheBehavior/behavior_1")
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="_閉まる" id="21" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="518" y="445"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Settting/CloseApplication" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="6" indexofinput="2" outputowner="10" indexofoutput="6" /><Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="6" /><Link inputowner="19" indexofinput="2" outputowner="15" indexofoutput="6" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="21" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="20" indexofinput="2" outputowner="21" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_問診結果" id="18" localization="8" tooltip="Enter description here" x="969" y="832"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="_問診確認始まる_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Input name="_問診確認説明_onStart_2" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Input name="_問診確認戻る_onStart_3" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Input name="_終了_onStart_4" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="btnNavBackClick" id="6" localization="8" tooltip="" x="721" y="277"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="173" y="62"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="477" y="72"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "戻る"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="btnNavFinishClick" id="1" localization="8" tooltip="" x="723" y="378"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="118" y="43"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Animated Say Text" id="1" localization="8" tooltip="Say the text received on its input and move during its speech." x="406" y="55"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "終了"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            configuration =\
            {"bodyLanguageMode":self.getParameter("Body language mode")}
            id = self.animSpeech.post.say(str(sentence), configuration)
            idAnimations = self.memory.getData("listIdAnimation")
            idAnimations.append(id)
            self.memory.insertData("listIdAnimation",idAnimations)
            self.animSpeech.wait(id, 0)
        finally:
            try:
                idAnimations = self.memory.getData("listIdAnimation")
                idAnimations.remove(id)
                self.memory.insertData("listIdAnimation",idAnimations)
            except:
                pass
            #if( self.memory.getData("listIdTalk") == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Parameter name="Body language mode" inherits_from_parent="1" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user. ex: ^start(...) or ^tag(...)&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7"><Choice value="disabled" /><Choice value="random" /><Choice value="contextual" /></Parameter></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_問診確認戻る" id="5" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="492" y="268"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Result/BtnNavBackClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_終了" id="10" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="495" y="372"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Result/BtnNavFinishClick" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文" id="12" localization="8" tooltip="" x="721" y="172"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="5" localization="8" tooltip="" x="207" y="100"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped(p) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Say Text" id="11" localization="8" tooltip="Say the text received on its input." x="528" y="84"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self, p):
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="5" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="11" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_問診確認説明" id="14" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="493" y="170"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Result/InterpretQuestion" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="_説明文 " id="15" localization="8" tooltip="" x="716" y="57"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="stopTalkAndPlay" id="2" localization="8" tooltip="" x="279" y="97"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')

        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.stopTalking()
        self.stopPlaying()
        self.stopAnimation()
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Wait For Signals" id="3" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="839" y="59"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" /><Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" /><Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" /></Box><Box name="oa_1014" id="22" localization="8" tooltip="Enter tooltip here" x="550" y="168"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る" id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="109" size="109"><ActuatorList model="juliette"><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="30" value="-89.5" /><Key frame="60" value="-84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="30" value="2.9" /><Key frame="60" value="-6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="60" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="30" value="29.3" /><Key frame="60" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="30" value="53.2" /><Key frame="60" value="52" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="30" value="-104.5" /><Key frame="60" value="-88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="30" value="89.5" /><Key frame="60" value="84.6388" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="30" value="-2.9" /><Key frame="60" value="6.20705" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="30" value="1" /><Key frame="60" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="30" value="29.3" /><Key frame="60" value="81.2851" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="30" value="-53.2" /><Key frame="60" value="-52" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="30" value="104.5" /><Key frame="60" value="88.6804" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="30" value="15" /><Key frame="60" value="-11.4592" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="30" value="0" /><Key frame="60" value="2.93938e-06" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="60" value="-0.2" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="60" value="0.000129227" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="60" value="-4.2" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="Say Text " id="1" localization="8" tooltip="Say the text received on its input." x="540" y="54"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.memory = ALProxy('ALMemory')
        self.animSpeech = ALProxy('ALAnimatedSpeech')
        self.player = ALProxy('ALAudioPlayer')
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        pass

    def onInput_onStart(self):
        p = "\pau=500\けっかはっぴょうー、こんなんでました。きになる部分をタッチしてね。"
        self.checkTalkingAndPlaying()
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))

            idTalks = self.memory.getData("listIdTalk")
            idTalks.append(id)
            self.memory.insertData("listIdTalk",idTalks)
            self.tts.wait(id, 0)
        finally:
            try:
                idTalks = self.memory.getData("listIdTalk")
                idTalks.remove(id)
                self.memory.insertData("listIdTalk",idTalks)
            except:
                pass
            #if( self.ids == [] ):
            self.onStopped() # activate output of the box
            self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()


    def stopTalking(self):
        idTalks = self.memory.getData("listIdTalk")
        idTalksTemp = idTalks
        self.logger.info("IdTalking : "+str(idTalks))
        for id in idTalks:
            try:
                self.ttsStop.stop(id)
                idTalksTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdTalk",idTalksTemp)

    def stopPlaying(self):
        idPlays = self.memory.getData("listIdPlay")
        idPlaysTemp = idPlays
        self.logger.info("IdPlaying: "+str(idPlays))
        for id in idPlays:
            try:
                self.player.stop(id)
                idPlaysTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdPlay",idPlaysTemp)

    def stopAnimation(self):
        idAnimations = self.memory.getData("listIdAnimation")
        idAnimationsTemp = idAnimations
        self.logger.info("listIdAnimation : "+str(idAnimations))
        for id in idAnimations:
            try:
                self.animSpeech.stop(id)
                idAnimationsTemp.remove(id)
            except:
                pass
        self.memory.insertData("listIdAnimation",idAnimationsTemp)

    def checkTalkingAndPlaying(self):
        if(self.memory.getData("listIdTalk") != []):
            self.stopTalking()
        if(self.memory.getData("listIdPlay") != []):
            self.stopPlaying()
        if(self.memory.getData("listIdAnimation") != []):
            self.stopAnimation()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="150" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="110" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="3" outputowner="22" indexofoutput="4" /><Link inputowner="22" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="_問診確認始まる" id="19" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="491" y="63"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="OADonburi/Result/Interpret" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="6" /><Link inputowner="12" indexofinput="2" outputowner="14" indexofoutput="6" /><Link inputowner="15" indexofinput="2" outputowner="19" indexofoutput="6" /><Link inputowner="19" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="3" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="17" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="17" indexofinput="5" outputowner="0" indexofoutput="2" /><Link inputowner="17" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="17" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="5" outputowner="0" indexofoutput="2" /><Link inputowner="16" indexofinput="6" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="5" outputowner="0" indexofoutput="2" /><Link inputowner="4" indexofinput="6" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="22" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="22" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="22" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="22" indexofinput="5" outputowner="0" indexofoutput="2" /><Link inputowner="22" indexofinput="6" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="7" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="11" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="8" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="13" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="13" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="13" indexofinput="5" outputowner="0" indexofoutput="2" /><Link inputowner="18" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="18" indexofinput="3" outputowner="0" indexofoutput="2" /><Link inputowner="18" indexofinput="4" outputowner="0" indexofoutput="2" /><Link inputowner="18" indexofinput="5" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="5" /><Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="18" /><Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="6" /><Link inputowner="5" indexofinput="4" outputowner="9" indexofoutput="6" /><Link inputowner="5" indexofinput="5" outputowner="9" indexofoutput="7" /><Link inputowner="14" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="10" indexofinput="2" outputowner="8" indexofoutput="8" /><Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="7" /><Link inputowner="3" indexofinput="3" outputowner="8" indexofoutput="8" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="10" indexofinput="3" outputowner="0" indexofoutput="6" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="5" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="10" indexofoutput="7" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>